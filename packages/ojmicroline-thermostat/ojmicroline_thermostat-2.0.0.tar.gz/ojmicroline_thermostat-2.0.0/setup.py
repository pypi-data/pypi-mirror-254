# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['ojmicroline_thermostat', 'ojmicroline_thermostat.models']

package_data = \
{'': ['*']}

install_requires = \
['aiohttp>=3.0.0', 'yarl>=1.6.0']

setup_kwargs = {
    'name': 'ojmicroline-thermostat',
    'version': '2.0.0',
    'description': 'Asynchronous Python client controlling an OJ Microline Thermostat.',
    'long_description': '[![GitHub Release][releases-shield]][releases]\n[![Python Versions][python-versions-shield]][pypi]\n![Project Stage][project-stage-shield]\n![Project Maintenance][maintenance-shield]\n[![License][license-shield]](LICENSE)\n\n[![GitHub Activity][commits-shield]][commits-url]\n[![PyPi Downloads][downloads-shield]][downloads-url]\n[![GitHub Last Commit][last-commit-shield]][commits-url]\n[![Stargazers][stars-shield]][stars-url]\n[![Issues][issues-shield]][issues-url]\n\n[![Maintainability][maintainability-shield]][maintainability-url]\n[![Code Coverage][codecov-shield]][codecov-url]\n\n[![Build Status][build-shield]][build-url]\n[![Typing Status][typing-shield]][typing-url]\n\nAsynchronous Python client for communicating with a OJ Microline Thermostat.\n\n## About\n\nA Python package to control OJ Microline thermostats. It currently supports the WD5 series (OWD5, MWD5) and WG4 series (UWG4, AWG4).\n\n## Installation\n\n```bash\npip install ojmicroline-thermostat\n```\n\n## Datasets\n\n### Thermostat\n\nThis object represents the current state of a thermostat.\n\n| Variable | Type | Description |\n| :------- | :--- | :---------- |\n| `model` | string | The model name for this thermostat. |\n| `serial_number` | string | The serial number for this thermostat. |\n| `software_version` | string | The currently installed software version. |\n| `zone_name` | string | The name of the zone this thermostat belongs to. |\n| `zone_id` | integer | The ID of the zone this thermostat belongs to. |\n| `name` | string | The name of the thermostat. |\n| `online` | boolean | Indicates if the thermostat is connected to the network. |\n| `heating` | boolean | Indicates if the thermostat is currently heating/is on. |\n| `regulation_mode` | integer | The currently set regulation mode of the thermostat, see below. |\n| `supported_regulation_modes` | list | The regulation modes this thermostat supports. |\n| `min_temperature` | integer | The lowest temperature the thermostat can be set to. |\n| `max_temperature` | integer | The highest temperature the thermostat can be set to. |\n| `manual_temperature` | integer | If the regulation mode is set to manual mode, the thermostat will target this temperature. |\n| `comfort_temperature` | integer | If the regulation mode is set to comfort mode, the thermostat will target this temperature. |\n| `comfort_end_time` | datetime | If the regulation mode is set to comfort mode, it will end at this time. |\n| `last_primary_mode_is_auto` | boolean | Unknown |\n\nThese fields are only available on WD5-series thermostats; for others, they may be `None`:\n\n| Variable | Type | Description |\n| :------- | :--- | :---------- |\n| `thermostat_id` | int | The unique identifier for this thermostat. |\n| `adaptive_mode` | boolean | If on then then the thermostat automatically changes heating start times to ensure that the required temperature has been reached at the beginning of any specific event. |\n| `vacation_mode` | boolean | If on then the thermostat regulates the heating of your home to a minimum while you are away on holiday, thus saving energy and money. |\n| `open_window_detection` | boolean | If on then the thermostat shuts off the heating for 30 minutes if an open window is detected. |\n| `daylight_saving_active` | boolean | If on, the "Daylight Saving Time" function of the thermostat will automatically adjust the clock to the daylight saving time for the "Region" chosen. |\n| `sensor_mode` | integer | The currently set sensor mode of the thermostat, see below. |\n| `temperature_floor` | integer | The temperature measured by the floor sensor. |\n| `temperature_room` | integer | The temperature measured by the room sensor. |\n| `boost_temperature` | integer | If the regulation mode is set to boost mode, the thermostat will target this temperature. |\n| `boost_end_time` | datetime | If the regulation mode is set to boost mode, it will end at this time. |\n| `vacation_temperature` | integer | If the regulation mode is set to vacation mode, the thermostat will target this temperature. |\n| `vacation_begin_time` | datetime | Vacation mode will be set to on when this date time passes. |\n| `vacation_end_time` | datetime | Vacation mode will be set to off when this date time passes. |\n| `frost_protection_temperature` | integer | If the regulation mode is set to frost protection mode, the thermostat will target this temperature. |\n| `schedule` | Schedule | The schedule the thermostat currently uses. (This *could* be supported by WG4-series thermostats, it simply isn\'t implemented.) |\n\nThese fields are only available on WG4-series thermostats; for others, they may be `None`:\n\n| Variable | Type | Description |\n| :------- | :--- | :---------- |\n| `temperature` | integer | The current temperature; the thermostat uses the room sensor or floor sensor based on its configuration. Avoid using this directly; instead, call the `get_current_temperature()` method which also works for WD5-series thermostats. |\n| `set_point_temperature` | integer | The temperature the thermostat is targeting. Avoid using this directly; instead, call the `get_target_temperature()` method which also works for WD5-series thermostats. |\n\n#### Regulation modes\n\n| Integer | Constant | Description |\n| :------- | :--- | :---------- |\n| `1` | `REGULATION_SCHEDULE` | The thermostat follows the configured schedule. |\n| `2` | `REGULATION_COMFORT` | The thermostat is in comfort mode until `comfort_end_time`. |\n| `3` | `REGULATION_MANUAL` | The thermostat is in manual mode, will not resume schedule unless changed. |\n| `4` | `REGULATION_VACATION` | The thermostat is in vacation mode, it started at `vacation_begin_time` and ends at `vacation_end_time`. |\n| `6` | `REGULATION_FROST_PROTECTION` | The thermostat is set to frost protection, preventing the floor from freezing. |\n| `8` | `REGULATION_BOOST` | The thermostat is in boost mode for 1 hour, using the `max_temperature` as target temperature. |\n| `9` | `REGULATION_ECO` | The thermostat is in eco mode, using the lowest temperature of the `schedule`. |\n\nKeep in mind that certain thermostats only support a subset of these modes; be sure to check the `Thermostat.supported_regulation_modes` field.\n\n#### Sensor modes\n\n| Integer | Constant | Description |\n| :------- | :--- | :---------- |\n| `1` | `SENSOR_ROOM_FLOOR` | The thermostat takes the average of the room and floor temperature |\n| `3` | `SENSOR_FLOOR` | The thermostat is using the floor sensor for target temperature. |\n| `4` | `SENSOR_ROOM` | The thermostat is using the room sensor for target temperature. |\n\n## Methods\n\n### OJMicroline\n| Method | Params | Description |\n| :------- | :--- | :---------- |\n| `login` | `None` | Create a new session at the OJ Microline API. |\n| `get_thermostats` | `None` | Get all thermostats from the OJ Microline API. |\n| `set_regulation_mode` | `resource: Thermostat`, `regulation_mode: int`, `temperature: int \\| None = None`, `duration: int = COMFORT_DURATION` | Set the regulation mode based on the input.<br> - `resource`: An instance of a Thermostat model returned by `get_thermostats()`<br> - `regulation_mode`: An integer representing the regulation mode, see "Regulation modes"<br> - `temperature`: An integer representing the temperature, eg: 2500. Only useful when setting the regulation mode to manual or comfort.<br> - `duration`: The duration in minutes to set the temperature for; only applies to comfort mode. |\n\n## Usage\n\n```python\nimport asyncio\nfrom time import sleep\n\nfrom ojmicroline_thermostat import OJMicroline, Thermostat, WD5API\nfrom ojmicroline_thermostat.const import (\n    REGULATION_BOOST,\n    REGULATION_COMFORT,\n    REGULATION_ECO,\n    REGULATION_FROST_PROTECTION,\n    REGULATION_MANUAL,\n    REGULATION_SCHEDULE,\n    REGULATION_VACATION,\n)\n\nREGULATION_MODES = {\n    REGULATION_SCHEDULE: "Schedule",\n    REGULATION_ECO: "Eco",\n    REGULATION_MANUAL: "None (Manual)",\n    REGULATION_FROST_PROTECTION: "Frost Protection",\n    REGULATION_BOOST: "Boost",\n    REGULATION_COMFORT: "Comfort",\n    REGULATION_VACATION: "Vacation",\n}\n\n\nasync def main():\n    """Show example on using the OJMicroline client."""\n    async with OJMicroline(\n        api=WD5API(\n            customer_id=1234,\n            api_key="<app-api-key>",\n            username="<your-username>",\n            password="<your-password>",\n        ),\n    ) as client:\n        # Thermostats\n        thermostats: list[Thermostat] = await client.get_thermostats()\n\n        for resource in thermostats:\n            print("####################")\n            print(f"# {resource.name}")\n            print("####################")\n            print("- Details:")\n            print(f"   Serial Number: {resource.serial_number}")\n            print(f"   Mode: {REGULATION_MODES[resource.regulation_mode]}")\n            print(f"   Temperature: {resource.get_current_temperature()}")\n            print(f"   Target temperature: {resource.get_target_temperature()}")\n            print("")\n\n            print(f"- Setting to boost mode")\n            await client.set_regulation_mode(resource, REGULATION_BOOST)\n            print("Sleeping for 5 seconds..")\n            sleep(5)\n            print(f"- Setting to schedule")  # noqa: E501\n            await client.set_regulation_mode(resource, REGULATION_SCHEDULE)\n\n\nif __name__ == "__main__":\n    asyncio.run(main())\n```\n\n## Contributing\n\nThis is an active open-source project. We are always open to people who want to\nuse the code or contribute to it.\n\nWe\'ve set up a separate document for our\n[contribution guidelines](CONTRIBUTING.md).\n\nThank you for being involved! :heart_eyes:\n\n## Setting up development environment\n\nThis Python project is fully managed using the [Poetry][poetry] dependency\nmanager.\n\nYou need at least:\n\n- Python 3.9+\n- [Poetry][poetry-install]\n\nInstall all packages, including all development requirements:\n\n```bash\npoetry install\n```\n\nPoetry creates by default an virtual environment where it installs all\nnecessary pip packages, to enter or exit the venv run the following commands:\n\n```bash\npoetry shell\nexit\n```\n\nSetup the pre-commit check, you must run this inside the virtual environment:\n\n```bash\npre-commit install\n```\n\n*Now you\'re all set to get started!*\n\nAs this repository uses the [pre-commit][pre-commit] framework, all changes\nare linted and tested with each commit. You can run all checks and tests\nmanually, using the following command:\n\n```bash\npoetry run pre-commit run --all-files\n```\n\nTo run just the Python tests:\n\n```bash\npoetry run pytest\n```\n\n## License\n\nMIT License\n\nCopyright (c) 2020-2024 Robbin Janssen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n<!-- MARKDOWN LINKS & IMAGES -->\n[build-shield]: https://github.com/robbinjanssen/python-ojmicroline-thermostat/actions/workflows/tests.yaml/badge.svg\n[build-url]: https://github.com/robbinjanssen/python-ojmicroline-thermostat/actions/workflows/tests.yaml\n[commits-shield]: https://img.shields.io/github/commit-activity/y/robbinjanssen/python-ojmicroline-thermostat.svg\n[commits-url]: https://github.com/robbinjanssen/python-ojmicroline-thermostat/commits/main\n[codecov-shield]: https://codecov.io/gh/robbinjanssen/python-ojmicroline-thermostat/branch/main/graph/badge.svg?token=F6CE1S25NV\n[codecov-url]: https://codecov.io/gh/robbinjanssen/python-ojmicroline-thermostat\n[downloads-shield]: https://img.shields.io/pypi/dm/ojmicroline-thermostat\n[downloads-url]: https://pypistats.org/packages/ojmicroline-thermostat\n[issues-shield]: https://img.shields.io/github/issues/robbinjanssen/python-ojmicroline-thermostat.svg\n[issues-url]: https://github.com/robbinjanssen/python-ojmicroline-thermostat/issues\n[license-shield]: https://img.shields.io/github/license/robbinjanssen/python-ojmicroline-thermostat.svg\n[last-commit-shield]: https://img.shields.io/github/last-commit/robbinjanssen/python-ojmicroline-thermostat.svg\n[maintenance-shield]: https://img.shields.io/maintenance/yes/2024.svg\n[maintainability-shield]: https://api.codeclimate.com/v1/badges/d77f7409eb02e331261b/maintainability\n[maintainability-url]: https://codeclimate.com/github/robbinjanssen/python-ojmicroline-thermostat/maintainability\n[project-stage-shield]: https://img.shields.io/badge/project%20stage-experimental-yellow.svg\n[pypi]: https://pypi.org/project/ojmicroline-thermostat/\n[python-versions-shield]: https://img.shields.io/pypi/pyversions/ojmicroline-thermostat\n[typing-shield]: https://github.com/robbinjanssen/python-ojmicroline-thermostat/actions/workflows/typing.yaml/badge.svg\n[typing-url]: https://github.com/robbinjanssen/python-ojmicroline-thermostat/actions/workflows/typing.yaml\n[releases-shield]: https://img.shields.io/github/release/robbinjanssen/python-ojmicroline-thermostat.svg\n[releases]: https://github.com/robbinjanssen/python-ojmicroline-thermostat/releases\n[stars-shield]: https://img.shields.io/github/stars/robbinjanssen/python-ojmicroline-thermostat.svg\n[stars-url]: https://github.com/robbinjanssen/python-ojmicroline-thermostat/stargazers\n\n[poetry-install]: https://python-poetry.org/docs/#installation\n[poetry]: https://python-poetry.org\n[pre-commit]: https://pre-commit.com\n',
    'author': 'Robbin Janssen',
    'author_email': 'robbinjanssen@gmail.com',
    'maintainer': 'Robbin Janssen',
    'maintainer_email': 'robbinjanssen@gmail.com',
    'url': 'https://github.com/robbinjanssen/python-ojmicroline-thermostat',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
