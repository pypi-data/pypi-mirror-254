from ...GenericModel import GenericModel 
from ...Generics import *
from enum import Enum
import queue


class GenericMacEventTypes(Enum):
    HANDLEMACFRAME = "handlemacframe"


class GenericMac(GenericModel):

    def __init__(self, componentname, componentinstancenumber, context=None, configurationparameters=None, num_worker_threads=1, topology=None, sdr=None):
        super().__init__(componentname, componentinstancenumber, context, configurationparameters, num_worker_threads, topology)
        self.framequeue = queue.Queue(maxsize=10000)
        self.sdrdev = sdr
        self.eventhandlers[GenericMacEventTypes.HANDLEMACFRAME] = self.on_handlemacframe

    
    def on_init(self, eventobj: Event):
        self.send_self(Event(self, GenericMacEventTypes.HANDLEMACFRAME, None))  # Continuously trigger handle_frame
        logger.debug(f"{self.componentname}.{self.componentinstancenumber} RECEIVED {str(eventobj)}")

    def on_handlemacframe(self, eventobj: Event): 
        #logger.debug(f"{self.componentname}.{self.componentinstancenumber} RECEIVED {str(eventobj)}")   
        self.handle_frame()
        # self.send_self(Event(self, GenericMacEventTypes.HANDLEMACFRAME, None)) #Continuously trigger handle_frame
        # HANDLEMACFRAME event will be generated by the inheriting component to facilitate delay
    
    def on_message_from_bottom(self, eventobj: Event):
        logger.debug(f"{self.componentname}.{self.componentinstancenumber} RECEIVED {str(eventobj)}")
        evt = Event(self, EventTypes.MFRB, eventobj.eventcontent)
        self.send_up(evt)
    
    def on_message_from_top(self, eventobj: Event):
        logger.debug(f"{self.componentname}.{self.componentinstancenumber} RECEIVED {str(eventobj)}")
        # put message in queue and try accessing the channel
        self.framequeue.put_nowait(eventobj)
        self.handle_frame()

    def handle_frame(self):
        pass