{"version":3,"sources":["st_mui_table.tsx","index.tsx"],"names":["withStreamlitConnection","props","_props$args","args","content","customCss","enablePagination","size","padding","showHeaders","paginationSizes","stickyHeader","paperStyle","detailColumns","detailColNum","detailsHeader","minRowHeight","_React$useState","React","useState","page","rowsPerPage","_React$useState2","_slicedToArray","state","setState","_React$useState3","_React$useState4","expanded","setExpanded","startRow","endRow","currentPageContent","slice","_React$useState5","_React$useState6","shouldUpdateHeight","setShouldUpdateHeight","useEffect","tableRef","current","observer","ResizeObserver","Streamlit","setFrameHeight","observe","disconnect","useRef","createElement","Fragment","dangerouslySetInnerHTML","__html","Paper","sx","TableContainer","ref","Table","aria-label","TableHead","TableRow","TableCell","Object","keys","filter","header","includes","map","i","key","String","TableBody","row","rowIndex","isExpanded","hover","role","tabIndex","length","IconButton","onClick","event","stopPropagation","currentIndex","indexOf","newExpanded","_toConsumableArray","push","splice","handleExpandClick","ExpandLessIcon","ExpandMoreIcon","entries","_ref","_ref2","value","concat","style","wordWrap","whiteSpace","overflowWrap","minHeight","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","component","originalArray","chunkSize","array","results","chunkArray","chunk","additionalColumn","TablePagination","rowsPerPageOptions","label","count","SelectProps","inputProps","native","onPageChange","newPage","prev","_objectSpread","onRowsPerPageChange","persist","target","ReactDOM","render","StrictMode","TableComponent","document","getElementById"],"mappings":"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","file":"static/js/main.98028990.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\r\nimport { Table, TableBody, TableCell, TableContainer, TablePagination, TableRow, Paper, TableHead, IconButton, Typography } from '@mui/material';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport Box from '@mui/material/Box';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\r\n\r\n\r\ninterface TableState {\r\n    page: number;\r\n    rowsPerPage: number;\r\n}\r\n\r\nfunction chunkArray<T>(originalArray: T[], chunkSize: number): T[][] {\r\n  const array = [...originalArray];  // Create a copy of the original array\r\n  const results = [];\r\n  while (array.length) {\r\n    results.push(array.splice(0, chunkSize));\r\n  }\r\n  return results;\r\n}\r\n\r\nconst TableComponent = (props: ComponentProps) => {\r\n\r\n  const { content, customCss, enablePagination, size, padding, showHeaders, paginationSizes, stickyHeader, paperStyle, detailColumns,detailColNum,\r\n    detailsHeader,minRowHeight } = props.args;  // Python Args\r\n  const [state, setState] = React.useState<TableState>({\r\n    page: 0,\r\n    rowsPerPage: paginationSizes[0],  // Set the default rowsPerPage to the first value in the list of options\r\n  })\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setState((prev) => ({ ...prev, page: newPage }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();  // Remove the event from the pool\r\n    setState((prev) => ({ ...prev, rowsPerPage: +event.target.value, page: 0 }));\r\n  };\r\n\r\n  const [expanded, setExpanded] = React.useState<number[]>([]);\r\n\r\nconst startRow = state.page * state.rowsPerPage;\r\nconst endRow = startRow + state.rowsPerPage;\r\nconst currentPageContent = content.slice(startRow, endRow);\r\n\r\n\r\nconst [shouldUpdateHeight, setShouldUpdateHeight] = React.useState(false);\r\n\r\n\r\nconst handleExpandClick = (i: number) => {\r\n  const currentIndex = expanded.indexOf(i);\r\n  const newExpanded = [...expanded];\r\n\r\n  if (currentIndex === -1) {\r\n    newExpanded.push(i);\r\n  } else {\r\n    newExpanded.splice(currentIndex, 1);\r\n  }\r\n\r\n  setExpanded(newExpanded);\r\n  setShouldUpdateHeight(!shouldUpdateHeight);  // toggle shouldUpdateHeight state\r\n};\r\n\r\nuseEffect(() => {\r\n  if (tableRef.current) {\r\n    const observer = new ResizeObserver(() => {\r\n      Streamlit.setFrameHeight();\r\n    });\r\n\r\n    observer.observe(tableRef.current);\r\n\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }\r\n}, []);\r\n\r\nconst tableRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  return (\r\n    <>\r\n      <style dangerouslySetInnerHTML={{__html: customCss}}></style>\r\n<Paper sx={paperStyle}>\r\n<TableContainer ref={tableRef}>\r\n          <Table stickyHeader={stickyHeader} aria-label=\"sticky table\" size={size}>\r\n          {showHeaders && (\r\n  <TableHead>\r\n    <TableRow>\r\n      <TableCell>{/* This cell is for the expand/collapse button */}</TableCell>\r\n      {content[0] && Object.keys(content[0]).filter((header) => !detailColumns.includes(header)).map((header, i) => (\r\n        <TableCell key={i} padding={padding} dangerouslySetInnerHTML={{__html: String(header)}}></TableCell>\r\n      ))}\r\n    </TableRow>\r\n  </TableHead>\r\n)}\r\n         <TableBody>\r\n        {currentPageContent.map((row: {[key: string]: any}, rowIndex: number) => {\r\n    const isExpanded = expanded.includes(rowIndex);\r\n    return (\r\n      <React.Fragment key={rowIndex}>\r\n        <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n          {/* Add a new table cell for the expand button */}\r\n          {detailColumns.length > 0 && (\r\n            <TableCell>\r\n              <IconButton\r\n                onClick={(event) => {\r\n                  event.stopPropagation(); // Prevent the row click event from firing\r\n                  handleExpandClick(rowIndex);\r\n                }}\r\n              >\r\n                {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n              </IconButton>\r\n            </TableCell>\r\n          )}\r\n                {Object.entries(row).map(([key, value], i) => {\r\n            // Exclude the additionalColumns from being rendered in the main row\r\n            if (!detailColumns.includes(key)) {\r\n              return (\r\n                <TableCell \r\n                key={`${rowIndex}-${i}`} \r\n                padding={padding} \r\n                dangerouslySetInnerHTML={{__html: String(value)}}\r\n                style={{\r\n                  wordWrap: \"break-word\",\r\n                  whiteSpace: \"normal\",\r\n                  overflowWrap: \"break-word\",\r\n                  minHeight: `${minRowHeight}px`\r\n                }}\r\n              />\r\n              );\r\n            }\r\n            return null;  // Return null when we don't want to render anything\r\n          })}\r\n        </TableRow>\r\n        {detailColumns.length > 0 && (\r\n          <TableRow>\r\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n              <Collapse in={isExpanded} timeout=\"auto\" unmountOnExit>\r\n                <Box margin={1}>\r\n                <Typography variant=\"h6\" gutterBottom component=\"div\" dangerouslySetInnerHTML={{__html: String(detailsHeader)}}></Typography>\r\n                  <Table size=\"small\" aria-label=\"purchases\">\r\n                  <TableBody>\r\n                  {chunkArray(detailColumns as string[], detailColNum).map((chunk: string[], i) => (\r\n                    <TableRow key={i}>\r\n                      {chunk.map((additionalColumn: string) => (\r\n                                      <React.Fragment key={additionalColumn}>\r\n                <TableCell dangerouslySetInnerHTML={{__html: additionalColumn}} />\r\n                <TableCell dangerouslySetInnerHTML={{__html: String(row[additionalColumn])}} />\r\n              </React.Fragment>\r\n                      ))}\r\n                    </TableRow>\r\n                  ))}\r\n                  </TableBody>\r\n                </Table>\r\n                </Box>\r\n              </Collapse>\r\n            </TableCell>\r\n          </TableRow>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  })}\r\n</TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        {enablePagination && (\r\n          <TablePagination\r\n            rowsPerPageOptions={[...paginationSizes, { label: 'All', value: -1 }]}\r\n            colSpan={3}\r\n            count={content.length}\r\n            rowsPerPage={state.rowsPerPage}\r\n            page={state.page}\r\n            SelectProps={{\r\n              inputProps: { 'aria-label': 'rows per page' },\r\n              native: true,\r\n            }}\r\n            onPageChange={handleChangePage}\r\n            onRowsPerPageChange={handleChangeRowsPerPage}\r\n            component=\"div\"\r\n          />\r\n        )}\r\n      </Paper>\r\n    </>\r\n  );  };\r\nexport default withStreamlitConnection(TableComponent);\r\n","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport TableComponent from \"./st_mui_table\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TableComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}