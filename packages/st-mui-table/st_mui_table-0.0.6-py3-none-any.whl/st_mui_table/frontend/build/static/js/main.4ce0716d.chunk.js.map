{"version":3,"sources":["st_mui_table.tsx","index.tsx"],"names":["withStreamlitConnection","props","_props$args","args","content","customCss","enablePagination","size","padding","showHeaders","paginationSizes","stickyHeader","paperStyle","detailColumns","detailColNum","detailsHeader","showIndex","maxHeight","minHeight","paginationLabel","showFirstButtonPagination","showLastButtonPagination","enable_sorting","selected_row_css","_React$useState","React","useState","page","rowsPerPage","_React$useState2","_slicedToArray","state","setState","_React$useState3","_React$useState4","sortOrder","_React$useState5","_React$useState6","orderBy","_React$useState7","_React$useState8","selectedRow","setSelectedRow","useMemo","comparator","a","b","_toConsumableArray","sort","useEffect","prev","_objectSpread","_React$useState9","_React$useState10","expanded","setExpanded","startRow","endRow","currentPageContent","slice","_React$useState11","_React$useState12","shouldUpdateHeight","setShouldUpdateHeight","tableRef","current","observer","ResizeObserver","Streamlit","setFrameHeight","observe","disconnect","tableStyle","concat","undefined","overflow","useRef","createElement","Fragment","dangerouslySetInnerHTML","__html","Paper","sx","TableContainer","ref","style","Table","aria-label","TableHead","TableRow","TableCell","length","Object","keys","filter","header","includes","map","i","key","String","TableBody","row","rowIndex","hover","role","tabIndex","onClick","handleRowClick","className","IconButton","event","stopPropagation","currentIndex","indexOf","newExpanded","push","splice","handleExpandClick","ExpandLessIcon","ExpandMoreIcon","entries","_ref","columnIndex","_ref2","columnName","cellData","return_clicked_cell","clickedCellData","column","data","setComponentValue","handleCellClick","wordWrap","whiteSpace","overflowWrap","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","component","originalArray","chunkSize","array","results","chunkArray","chunk","additionalColumn","TablePagination","rowsPerPageOptions","label","value","count","SelectProps","inputProps","native","onPageChange","newPage","onRowsPerPageChange","persist","target","labelRowsPerPage","showFirstButton","showLastButton","ReactDOM","render","StrictMode","TableComponent","document","getElementById"],"mappings":"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","file":"static/js/main.4ce0716d.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\r\nimport { Table, TableBody, TableCell, TableContainer, TablePagination, TableRow, Paper, TableHead, IconButton, Typography, TableSortLabel } from '@mui/material';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport Box from '@mui/material/Box';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\r\n\r\n\r\n\r\ninterface TableState {\r\n    page: number;\r\n    rowsPerPage: number;\r\n}\r\n\r\nfunction chunkArray<T>(originalArray: T[], chunkSize: number): T[][] {\r\n  const array = [...originalArray];  // Create a copy of the original array\r\n  const results = [];\r\n  while (array.length) {\r\n    results.push(array.splice(0, chunkSize));\r\n  }\r\n  return results;\r\n}\r\n\r\nconst TableComponent = (props: ComponentProps) => {\r\n\r\n  const { content, customCss, enablePagination, size, padding, showHeaders, paginationSizes, stickyHeader, paperStyle, detailColumns,detailColNum,\r\n    detailsHeader,showIndex, maxHeight,minHeight, paginationLabel, showFirstButtonPagination, showLastButtonPagination, enable_sorting, selected_row_css   } = props.args;  // Python Args\r\n\r\n  const [state, setState] = React.useState<TableState>({\r\n    page: 0,\r\n    rowsPerPage: paginationSizes[0],  // Set the default rowsPerPage to the first value in the list of options\r\n  })\r\n\r\n  const [sortOrder, setSortOrder] = React.useState<\"asc\" | \"desc\">(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState<string | null>(null);\r\n\r\n  // State to track the selected row\r\n  const [selectedRow, setSelectedRow] = React.useState<number | null>(null);\r\n\r\n\r\n  const handleSortRequest = (property: string) => {\r\n    const isAsc = orderBy === property && sortOrder === \"asc\";\r\n    setSortOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleCellClick = (rowIndex: number, columnName: string, cellData: any) => {\r\n    if (props.args.return_clicked_cell) {\r\n      const clickedCellData = {\r\n        row: rowIndex,\r\n        column: columnName,\r\n        data: cellData\r\n      };\r\n      Streamlit.setComponentValue(clickedCellData);\r\n    }\r\n  };\r\n\r\n    // Function to handle row click\r\n    const handleRowClick = (rowIndex: number) => {\r\n      setSelectedRow(rowIndex);\r\n    };\r\n  \r\n\r\n  const sortedContent = React.useMemo(() => {\r\n    if (enable_sorting && orderBy) { // Only sort if enable_sorting is true and orderBy is not null\r\n      const comparator = (a: any, b: any) => {\r\n        if (a[orderBy] < b[orderBy]) {\r\n          return -1;\r\n        }\r\n        if (a[orderBy] > b[orderBy]) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      };\r\n  \r\n      return [...content].sort((a, b) => (sortOrder === \"asc\" ? comparator(a, b) : -comparator(a, b)));\r\n    }\r\n    return content; // If enable_sorting is false or orderBy is null, return the original content\r\n  }, [content, orderBy, sortOrder, enable_sorting]);\r\n  \r\n  \r\n\r\n\r\n  //if pagination is disabled, set rowsPerPage to -1\r\n  useEffect(() => {\r\n    if (!enablePagination) {\r\n      setState((prev) => ({ ...prev, rowsPerPage: -1 }));\r\n    }\r\n    else {\r\n      setState((prev) => ({ ...prev, rowsPerPage: paginationSizes[0] }));\r\n    }\r\n  }, [enablePagination]);\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setState((prev) => ({ ...prev, page: newPage }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();  // Remove the event from the pool\r\n    setState((prev) => ({ ...prev, rowsPerPage: +event.target.value, page: 0 }));\r\n  };\r\n\r\n  const [expanded, setExpanded] = React.useState<number[]>([]);\r\n\r\nconst startRow = state.page * state.rowsPerPage;\r\nconst endRow = startRow + state.rowsPerPage;\r\nconst currentPageContent = content.slice(startRow, endRow);\r\n\r\nconst [shouldUpdateHeight, setShouldUpdateHeight] = React.useState(false);\r\n\r\n\r\nconst handleExpandClick = (i: number) => {\r\n  const currentIndex = expanded.indexOf(i);\r\n  const newExpanded = [...expanded];\r\n\r\n  if (currentIndex === -1) {\r\n    newExpanded.push(i);\r\n  } else {\r\n    newExpanded.splice(currentIndex, 1);\r\n  }\r\n\r\n  setExpanded(newExpanded);\r\n  setShouldUpdateHeight(!shouldUpdateHeight);  // toggle shouldUpdateHeight state\r\n};\r\n\r\nuseEffect(() => {\r\n  if (tableRef.current) {\r\n    const observer = new ResizeObserver(() => {\r\n      Streamlit.setFrameHeight();\r\n    });\r\n\r\n    observer.observe(tableRef.current);\r\n\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }\r\n}, []);\r\n\r\n\r\n\r\nconst tableStyle = {\r\n  maxHeight: maxHeight ? `${maxHeight}px` : undefined,\r\n  minHeight: minHeight ? `${minHeight}px` : undefined,\r\n  overflow: 'auto'\r\n};const tableRef = React.useRef<HTMLDivElement>(null);\r\n\r\n\r\nreturn (\r\n  <>\r\n    <style dangerouslySetInnerHTML={{__html: customCss}}></style>\r\n    <style dangerouslySetInnerHTML={{__html: selected_row_css}}></style>\r\n    <Paper sx={paperStyle}>\r\n    <TableContainer ref={tableRef} style={tableStyle}>\r\n      <Table stickyHeader={stickyHeader} aria-label=\"sticky table\" size={size}>\r\n        {showHeaders && (\r\n          <TableHead>\r\n            <TableRow>\r\n              {showIndex && <TableCell></TableCell>}\r\n              {detailColumns.length > 0 && <TableCell></TableCell>}\r\n              {content[0] && Object.keys(content[0]).filter((header) => !detailColumns.includes(header)).map((header, i) => (\r\n                <TableCell key={i} padding={padding} dangerouslySetInnerHTML={{__html: String(header)}}></TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n        )}\r\n        <TableBody>\r\n          {currentPageContent.map((row: any, rowIndex: number) => (\r\n            <React.Fragment key={rowIndex}>\r\n              <TableRow hover role=\"checkbox\" tabIndex={-1} onClick={() => handleRowClick(rowIndex)}  className={rowIndex === selectedRow ? \"selected-row\" : \"\"}>\r\n                {showIndex && <TableCell>{rowIndex + startRow}</TableCell>}\r\n                {detailColumns.length > 0 && (\r\n                  <TableCell>\r\n                    <IconButton\r\n                      onClick={(event) => {\r\n                        event.stopPropagation();\r\n                        handleExpandClick(rowIndex);\r\n                      }}\r\n                    >\r\n                      {expanded.includes(rowIndex) ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n                    </IconButton>\r\n                  </TableCell>\r\n                )}\r\n                {Object.entries(row).map(([columnName, cellData], columnIndex) => {\r\n                  if (!detailColumns.includes(columnName)) {\r\n                    return (\r\n                      <TableCell \r\n                        key={`${rowIndex}-${columnIndex}`} \r\n                        onClick={() => handleCellClick(rowIndex + startRow, columnName, cellData)}\r\n                        padding={padding}\r\n                        style={{\r\n                          wordWrap: \"break-word\",\r\n                          whiteSpace: \"normal\",\r\n                          overflowWrap: \"break-word\",\r\n                        }}\r\n                      >\r\n                        <div dangerouslySetInnerHTML={{__html: String(cellData)}}></div>\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n                  return null; \r\n                })}\r\n              </TableRow>\r\n              {detailColumns.length > 0 && (\r\n                <TableRow>\r\n                  <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n                    <Collapse in={expanded.includes(rowIndex)} timeout=\"auto\" unmountOnExit>\r\n                      <Box margin={1}>\r\n                        <Typography variant=\"h6\" gutterBottom component=\"div\" dangerouslySetInnerHTML={{__html: String(detailsHeader)}}></Typography>\r\n                        <Table size=\"small\" aria-label=\"purchases\">\r\n                          <TableBody>\r\n                            {chunkArray(detailColumns as string[], detailColNum).map((chunk, i) => (\r\n                              <TableRow key={i}>\r\n                                {chunk.map((additionalColumn) => (\r\n                                  <React.Fragment key={additionalColumn}>\r\n                                    <TableCell dangerouslySetInnerHTML={{__html: additionalColumn}} />\r\n                                    <TableCell dangerouslySetInnerHTML={{__html: String(row[additionalColumn])}} />\r\n                                  </React.Fragment>\r\n                                ))}\r\n                              </TableRow>\r\n                            ))}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </Box>\r\n                    </Collapse>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </React.Fragment>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    {enablePagination && (\r\n      <TablePagination\r\n        rowsPerPageOptions={[...paginationSizes, { label: 'All', value: -1 }]}\r\n        colSpan={3}\r\n        count={content.length}\r\n        rowsPerPage={state.rowsPerPage}\r\n        page={state.page}\r\n        SelectProps={{\r\n          inputProps: { 'aria-label': 'rows per page' },\r\n          native: true,\r\n        }}\r\n        onPageChange={handleChangePage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n        component=\"div\"\r\n        labelRowsPerPage = {paginationLabel}\r\n        showFirstButton = {showFirstButtonPagination}\r\n        showLastButton = {showLastButtonPagination}\r\n      />\r\n    )}\r\n    </Paper>\r\n  </>\r\n);\r\n\r\n  };\r\nexport default withStreamlitConnection(TableComponent);\r\n","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport TableComponent from \"./st_mui_table\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TableComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}