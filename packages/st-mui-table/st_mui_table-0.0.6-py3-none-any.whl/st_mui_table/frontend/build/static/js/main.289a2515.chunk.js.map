{"version":3,"sources":["st_mui_table.tsx","index.tsx"],"names":["withStreamlitConnection","props","_props$args","args","content","customCss","enablePagination","size","padding","showHeaders","paginationSizes","stickyHeader","paperStyle","detailColumns","detailColNum","detailsHeader","showIndex","maxHeight","minHeight","paginationLabel","showFirstButtonPagination","showLastButtonPagination","_React$useState","React","useState","page","rowsPerPage","_React$useState2","_slicedToArray","state","setState","useEffect","prev","_objectSpread","_React$useState3","_React$useState4","expanded","setExpanded","startRow","endRow","currentPageContent","slice","_React$useState5","_React$useState6","shouldUpdateHeight","setShouldUpdateHeight","tableRef","current","observer","ResizeObserver","Streamlit","setFrameHeight","observe","disconnect","tableStyle","concat","undefined","overflow","useRef","createElement","Fragment","dangerouslySetInnerHTML","__html","Paper","sx","TableContainer","ref","style","Table","aria-label","TableHead","TableRow","TableCell","length","Object","keys","filter","header","includes","map","i","key","String","TableBody","row","rowIndex","isExpanded","hover","role","tabIndex","IconButton","onClick","event","stopPropagation","currentIndex","indexOf","newExpanded","_toConsumableArray","push","splice","handleExpandClick","ExpandLessIcon","ExpandMoreIcon","entries","_ref","_ref2","value","wordWrap","whiteSpace","overflowWrap","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","component","originalArray","chunkSize","array","results","chunkArray","chunk","additionalColumn","TablePagination","rowsPerPageOptions","label","count","SelectProps","inputProps","native","onPageChange","newPage","onRowsPerPageChange","persist","target","labelRowsPerPage","showFirstButton","showLastButton","ReactDOM","render","StrictMode","TableComponent","document","getElementById"],"mappings":"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","file":"static/js/main.289a2515.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\r\nimport { Table, TableBody, TableCell, TableContainer, TablePagination, TableRow, Paper, TableHead, IconButton, Typography } from '@mui/material';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport Box from '@mui/material/Box';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\n\r\n\r\n\r\ninterface TableState {\r\n    page: number;\r\n    rowsPerPage: number;\r\n}\r\n\r\nfunction chunkArray<T>(originalArray: T[], chunkSize: number): T[][] {\r\n  const array = [...originalArray];  // Create a copy of the original array\r\n  const results = [];\r\n  while (array.length) {\r\n    results.push(array.splice(0, chunkSize));\r\n  }\r\n  return results;\r\n}\r\n\r\nconst TableComponent = (props: ComponentProps) => {\r\n\r\n  const { content, customCss, enablePagination, size, padding, showHeaders, paginationSizes, stickyHeader, paperStyle, detailColumns,detailColNum,\r\n    detailsHeader,showIndex, maxHeight,minHeight, paginationLabel, showFirstButtonPagination, showLastButtonPagination   } = props.args;  // Python Args\r\n\r\n  const [state, setState] = React.useState<TableState>({\r\n    page: 0,\r\n    rowsPerPage: paginationSizes[0],  // Set the default rowsPerPage to the first value in the list of options\r\n  })\r\n\r\n  //if pagination is disabled, set rowsPerPage to -1\r\n  useEffect(() => {\r\n    if (!enablePagination) {\r\n      setState((prev) => ({ ...prev, rowsPerPage: -1 }));\r\n    }\r\n    else {\r\n      setState((prev) => ({ ...prev, rowsPerPage: paginationSizes[0] }));\r\n    }\r\n  }, [enablePagination]);\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setState((prev) => ({ ...prev, page: newPage }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();  // Remove the event from the pool\r\n    setState((prev) => ({ ...prev, rowsPerPage: +event.target.value, page: 0 }));\r\n  };\r\n\r\n  const [expanded, setExpanded] = React.useState<number[]>([]);\r\n\r\nconst startRow = state.page * state.rowsPerPage;\r\nconst endRow = startRow + state.rowsPerPage;\r\nconst currentPageContent = content.slice(startRow, endRow);\r\n\r\nconst [shouldUpdateHeight, setShouldUpdateHeight] = React.useState(false);\r\n\r\n\r\nconst handleExpandClick = (i: number) => {\r\n  const currentIndex = expanded.indexOf(i);\r\n  const newExpanded = [...expanded];\r\n\r\n  if (currentIndex === -1) {\r\n    newExpanded.push(i);\r\n  } else {\r\n    newExpanded.splice(currentIndex, 1);\r\n  }\r\n\r\n  setExpanded(newExpanded);\r\n  setShouldUpdateHeight(!shouldUpdateHeight);  // toggle shouldUpdateHeight state\r\n};\r\n\r\nuseEffect(() => {\r\n  if (tableRef.current) {\r\n    const observer = new ResizeObserver(() => {\r\n      Streamlit.setFrameHeight();\r\n    });\r\n\r\n    observer.observe(tableRef.current);\r\n\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }\r\n}, []);\r\n\r\n\r\n\r\nconst tableStyle = {\r\n  maxHeight: maxHeight ? `${maxHeight}px` : undefined,\r\n  minHeight: minHeight ? `${minHeight}px` : undefined,\r\n  overflow: 'auto'\r\n};const tableRef = React.useRef<HTMLDivElement>(null);\r\nreturn (\r\n  <>\r\n    <style dangerouslySetInnerHTML={{__html: customCss}}></style>\r\n    <Paper sx={paperStyle}>\r\n      <TableContainer ref={tableRef} style={tableStyle}>\r\n        <Table stickyHeader={stickyHeader} aria-label=\"sticky table\" size={size}>\r\n          {showHeaders && (\r\n            <TableHead>\r\n              <TableRow>\r\n                {showIndex && <TableCell>{/* This cell is for the index */}</TableCell>}\r\n                {/* Add a new table cell for the expand button */}\r\n                {detailColumns.length > 0 && <TableCell></TableCell>}\r\n                {content[0] && Object.keys(content[0]).filter((header) => !detailColumns.includes(header)).map((header, i) => (\r\n                  <TableCell key={i} padding={padding} dangerouslySetInnerHTML={{__html: String(header)}}></TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n          )}\r\n          <TableBody>\r\n            {currentPageContent.map((row: {[key: string]: any}, rowIndex: number) => {\r\n              const isExpanded = expanded.includes(rowIndex);\r\n              return (\r\n                <React.Fragment key={rowIndex}>\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                    {showIndex && <TableCell>{rowIndex}</TableCell>}\r\n                    {detailColumns.length > 0 && (\r\n                      <TableCell>\r\n                        <IconButton\r\n                          onClick={(event) => {\r\n                            event.stopPropagation(); // Prevent the row click event from firing\r\n                            handleExpandClick(rowIndex);\r\n                          }}\r\n                        >\r\n                          {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    )}\r\n                    {Object.entries(row).map(([key, value], i) => {\r\n                      if (!detailColumns.includes(key)) {\r\n                        return (\r\n                          <TableCell \r\n                            key={`${rowIndex}-${i}`} \r\n                            padding={padding} \r\n                            dangerouslySetInnerHTML={{__html: String(value)}}\r\n                            style={{\r\n                              wordWrap: \"break-word\",\r\n                              whiteSpace: \"normal\",\r\n                              overflowWrap: \"break-word\",\r\n                            }}\r\n                          />\r\n                        );\r\n                      }\r\n                      return null;  // Return null when we don't want to render anything\r\n                    })}\r\n                  </TableRow>\r\n                  {detailColumns.length > 0 && (\r\n                    <TableRow>\r\n                      <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n                        <Collapse in={isExpanded} timeout=\"auto\" unmountOnExit>\r\n                          <Box margin={1}>\r\n                          <Typography variant=\"h6\" gutterBottom component=\"div\" dangerouslySetInnerHTML={{__html: String(detailsHeader)}}></Typography>\r\n                            <Table size=\"small\" aria-label=\"purchases\">\r\n                            <TableBody>\r\n                            {chunkArray(detailColumns as string[], detailColNum).map((chunk: string[], i) => (\r\n                              <TableRow key={i}>\r\n                                {chunk.map((additionalColumn: string) => (\r\n                                  <React.Fragment key={additionalColumn}>\r\n                                    <TableCell dangerouslySetInnerHTML={{__html: additionalColumn}} />\r\n                                    <TableCell dangerouslySetInnerHTML={{__html: String(row[additionalColumn])}} />\r\n                                  </React.Fragment>\r\n                                ))}\r\n                              </TableRow>\r\n                            ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                          </Box>\r\n                        </Collapse>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      {enablePagination && (\r\n        <TablePagination\r\n          rowsPerPageOptions={[...paginationSizes, { label: 'All', value: -1 }]}\r\n          colSpan={3}\r\n          count={content.length}\r\n          rowsPerPage={state.rowsPerPage}\r\n          page={state.page}\r\n          SelectProps={{\r\n            inputProps: { 'aria-label': 'rows per page' },\r\n            native: true,\r\n          }}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n          component=\"div\"\r\n          labelRowsPerPage = {paginationLabel}\r\n          showFirstButton = {showFirstButtonPagination}\r\n          showLastButton = {showLastButtonPagination}\r\n        />\r\n      )}\r\n    </Paper>\r\n  </>\r\n);\r\n\r\n  };\r\nexport default withStreamlitConnection(TableComponent);\r\n","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport TableComponent from \"./st_mui_table\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TableComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}