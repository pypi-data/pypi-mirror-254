{"version":3,"sources":["st_mui_table.tsx","index.tsx"],"names":["withStreamlitConnection","props","_props$args","args","content","customCss","enablePagination","size","padding","showHeaders","paginationSizes","stickyHeader","paperStyle","detailColumns","detailColNum","detailsHeader","showIndex","_React$useState","React","useState","page","rowsPerPage","_React$useState2","_slicedToArray","state","setState","useEffect","prev","_objectSpread","_React$useState3","_React$useState4","expanded","setExpanded","startRow","endRow","currentPageContent","slice","_React$useState5","_React$useState6","shouldUpdateHeight","setShouldUpdateHeight","tableRef","current","observer","ResizeObserver","Streamlit","setFrameHeight","observe","disconnect","useRef","createElement","Fragment","dangerouslySetInnerHTML","__html","Paper","sx","TableContainer","ref","Table","aria-label","TableHead","TableRow","TableCell","length","Object","keys","filter","header","includes","map","i","key","String","TableBody","row","rowIndex","isExpanded","hover","role","tabIndex","IconButton","onClick","event","stopPropagation","currentIndex","indexOf","newExpanded","_toConsumableArray","push","splice","handleExpandClick","ExpandLessIcon","ExpandMoreIcon","entries","_ref","_ref2","value","concat","style","wordWrap","whiteSpace","overflowWrap","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","component","originalArray","chunkSize","array","results","chunkArray","chunk","additionalColumn","TablePagination","rowsPerPageOptions","label","count","SelectProps","inputProps","native","onPageChange","newPage","onRowsPerPageChange","persist","target","ReactDOM","render","StrictMode","TableComponent","document","getElementById"],"mappings":"0WAuBA,IA8KeA,eA9KQ,SAACC,GAEtB,IAAAC,EAC+BD,EAAME,KAD7BC,EAAOF,EAAPE,QAASC,EAASH,EAATG,UAAWC,EAAgBJ,EAAhBI,iBAAkBC,EAAIL,EAAJK,KAAMC,EAAON,EAAPM,QAASC,EAAWP,EAAXO,YAAaC,EAAeR,EAAfQ,gBAAiBC,EAAYT,EAAZS,aAAcC,EAAUV,EAAVU,WAAYC,EAAaX,EAAbW,cAAcC,EAAYZ,EAAZY,aACjIC,EAAab,EAAba,cAAcC,EAASd,EAATc,UAChBC,EAA0BC,IAAMC,SAAqB,CACnDC,KAAM,EACNC,YAAaX,EAAgB,KAC7BY,EAAAC,YAAAN,EAAA,GAHKO,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAMtBI,qBAAU,WAKND,EAJGnB,EAIM,SAACqB,GAAI,OAAAC,wBAAA,GAAWD,GAAI,IAAEN,YAAaX,EAAgB,MAHnD,SAACiB,GAAI,OAAAC,wBAAA,GAAWD,GAAI,IAAEN,aAAc,QAK9C,CAACf,IAEJ,IASAuB,EAAgCX,IAAMC,SAAmB,IAAGW,EAAAP,YAAAM,EAAA,GAArDE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAExBG,EAAWT,EAAMJ,KAAOI,EAAMH,YAC9Ba,EAASD,EAAWT,EAAMH,YAC1Bc,EAAqB/B,EAAQgC,MAAMH,EAAUC,GAGnDG,EAAoDnB,IAAMC,UAAS,GAAMmB,EAAAf,YAAAc,EAAA,GAAlEE,EAAkBD,EAAA,GAAEE,EAAqBF,EAAA,GAiBhDZ,qBAAU,WACR,GAAIe,EAASC,QAAS,CACpB,IAAMC,EAAW,IAAIC,gBAAe,WAClCC,IAAUC,oBAKZ,OAFAH,EAASI,QAAQN,EAASC,SAEnB,WACLC,EAASK,iBAGZ,IAEH,IAAMP,EAAWvB,IAAM+B,OAAuB,MAC9C,OACE/B,IAAAgC,cAAAhC,IAAAiC,SAAA,KACEjC,IAAAgC,cAAA,SAAOE,wBAAyB,CAACC,OAAQhD,KACzCa,IAAAgC,cAACI,IAAK,CAACC,GAAI3C,GACTM,IAAAgC,cAACM,IAAc,CAACC,IAAKhB,GACnBvB,IAAAgC,cAACQ,IAAK,CAAC/C,aAAcA,EAAcgD,aAAW,eAAepD,KAAMA,GAChEE,GACCS,IAAAgC,cAACU,IAAS,KACR1C,IAAAgC,cAACW,IAAQ,KACN7C,GAAaE,IAAAgC,cAACY,IAAS,MAEvBjD,EAAckD,OAAS,GAAK7C,IAAAgC,cAACY,IAAS,MACtC1D,EAAQ,IAAM4D,OAAOC,KAAK7D,EAAQ,IAAI8D,QAAO,SAACC,GAAM,OAAMtD,EAAcuD,SAASD,MAASE,KAAI,SAACF,EAAQG,GAAC,OACvGpD,IAAAgC,cAACY,IAAS,CAACS,IAAKD,EAAG9D,QAASA,EAAS4C,wBAAyB,CAACC,OAAQmB,OAAOL,WAKtFjD,IAAAgC,cAACuB,IAAS,KACPtC,EAAmBkC,KAAI,SAACK,EAA2BC,GAClD,IAAMC,EAAa7C,EAASqC,SAASO,GACrC,OACEzD,IAAAgC,cAAChC,IAAMiC,SAAQ,CAACoB,IAAKI,GACnBzD,IAAAgC,cAACW,IAAQ,CAACgB,OAAK,EAACC,KAAK,WAAWC,UAAW,GACxC/D,GAAaE,IAAAgC,cAACY,IAAS,KAAEa,GACzB9D,EAAckD,OAAS,GACtB7C,IAAAgC,cAACY,IAAS,KACR5C,IAAAgC,cAAC8B,IAAU,CACTC,QAAS,SAACC,GACRA,EAAMC,kBA1DR,SAACb,GACzB,IAAMc,EAAerD,EAASsD,QAAQf,GAChCgB,EAAWC,YAAOxD,IAEF,IAAlBqD,EACFE,EAAYE,KAAKlB,GAEjBgB,EAAYG,OAAOL,EAAc,GAGnCpD,EAAYsD,GACZ9C,GAAuBD,GAgDGmD,CAAkBf,KAGnBC,EAAa1D,IAAAgC,cAACyC,IAAc,MAAMzE,IAAAgC,cAAC0C,IAAc,QAIvD5B,OAAO6B,QAAQnB,GAAKL,KAAI,SAAAyB,EAAexB,GAAO,IAADyB,EAAAxE,YAAAuE,EAAA,GAAnBvB,EAAGwB,EAAA,GAAEC,EAAKD,EAAA,GACnC,OAAKlF,EAAcuD,SAASG,GAcrB,KAZHrD,IAAAgC,cAACY,IAAS,CACRS,IAAG,GAAA0B,OAAKtB,EAAQ,KAAAsB,OAAI3B,GACpB9D,QAASA,EACT4C,wBAAyB,CAACC,OAAQmB,OAAOwB,IACzCE,MAAO,CACLC,SAAU,aACVC,WAAY,SACZC,aAAc,oBAQzBxF,EAAckD,OAAS,GACtB7C,IAAAgC,cAACW,IAAQ,KACP3C,IAAAgC,cAACY,IAAS,CAACoC,MAAO,CAAEI,cAAe,EAAGC,WAAY,GAAKC,QAAS,GAC9DtF,IAAAgC,cAACuD,IAAQ,CAACC,GAAI9B,EAAY+B,QAAQ,OAAOC,eAAa,GACpD1F,IAAAgC,cAAC2D,IAAG,CAACC,OAAQ,GACb5F,IAAAgC,cAAC6D,IAAU,CAACC,QAAQ,KAAKC,cAAY,EAACC,UAAU,MAAM9D,wBAAyB,CAACC,OAAQmB,OAAOzD,MAC7FG,IAAAgC,cAACQ,IAAK,CAACnD,KAAK,QAAQoD,aAAW,aAC/BzC,IAAAgC,cAACuB,IAAS,KA1ItC,SAAuB0C,EAAoBC,GAGzC,IAFA,IAAMC,EAAK9B,YAAO4B,GACZG,EAAU,GACTD,EAAMtD,QACXuD,EAAQ9B,KAAK6B,EAAM5B,OAAO,EAAG2B,IAE/B,OAAOE,EAqIoBC,CAAW1G,EAA2BC,GAAcuD,KAAI,SAACmD,EAAiBlD,GAAC,OAC1EpD,IAAAgC,cAACW,IAAQ,CAACU,IAAKD,GACZkD,EAAMnD,KAAI,SAACoD,GAAwB,OAClCvG,IAAAgC,cAAChC,IAAMiC,SAAQ,CAACoB,IAAKkD,GACnBvG,IAAAgC,cAACY,IAAS,CAACV,wBAAyB,CAACC,OAAQoE,KAC7CvG,IAAAgC,cAACY,IAAS,CAACV,wBAAyB,CAACC,OAAQmB,OAAOE,EAAI+C,4BAkBrFnH,GACCY,IAAAgC,cAACwE,IAAe,CACdC,mBAAkB,GAAA1B,OAAAV,YAAM7E,GAAe,CAAE,CAAEkH,MAAO,MAAO5B,OAAQ,KACjEQ,QAAS,EACTqB,MAAOzH,EAAQ2D,OACf1C,YAAaG,EAAMH,YACnBD,KAAMI,EAAMJ,KACZ0G,YAAa,CACXC,WAAY,CAAE,aAAc,iBAC5BC,QAAQ,GAEVC,aAjJiB,SAAC/C,EAAgBgD,GACxCzG,GAAS,SAACE,GAAI,OAAAC,wBAAA,GAAWD,GAAI,IAAEP,KAAM8G,QAiJ/BC,oBA9IwB,SAACjD,GAC/BA,EAAMkD,UACN3G,GAAS,SAACE,GAAI,OAAAC,wBAAA,GAAWD,GAAI,IAAEN,aAAc6D,EAAMmD,OAAOrC,MAAO5E,KAAM,QA6IjE8F,UAAU,aCpLpBoB,IAASC,OACPrH,IAAAgC,cAAChC,IAAMsH,WAAU,KACftH,IAAAgC,cAACuF,EAAc,OAEjBC,SAASC,eAAe,W","file":"static/js/main.39e441ba.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\r\nimport { Table, TableBody, TableCell, TableContainer, TablePagination, TableRow, Paper, TableHead, IconButton, Typography } from '@mui/material';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport Box from '@mui/material/Box';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\r\n\r\n\r\ninterface TableState {\r\n    page: number;\r\n    rowsPerPage: number;\r\n}\r\n\r\nfunction chunkArray<T>(originalArray: T[], chunkSize: number): T[][] {\r\n  const array = [...originalArray];  // Create a copy of the original array\r\n  const results = [];\r\n  while (array.length) {\r\n    results.push(array.splice(0, chunkSize));\r\n  }\r\n  return results;\r\n}\r\n\r\nconst TableComponent = (props: ComponentProps) => {\r\n\r\n  const { content, customCss, enablePagination, size, padding, showHeaders, paginationSizes, stickyHeader, paperStyle, detailColumns,detailColNum,\r\n    detailsHeader,showIndex  } = props.args;  // Python Args\r\n  const [state, setState] = React.useState<TableState>({\r\n    page: 0,\r\n    rowsPerPage: paginationSizes[0],  // Set the default rowsPerPage to the first value in the list of options\r\n  })\r\n\r\n  //if pagination is disabled, set rowsPerPage to -1\r\n  useEffect(() => {\r\n    if (!enablePagination) {\r\n      setState((prev) => ({ ...prev, rowsPerPage: -1 }));\r\n    }\r\n    else {\r\n      setState((prev) => ({ ...prev, rowsPerPage: paginationSizes[0] }));\r\n    }\r\n  }, [enablePagination]);\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setState((prev) => ({ ...prev, page: newPage }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();  // Remove the event from the pool\r\n    setState((prev) => ({ ...prev, rowsPerPage: +event.target.value, page: 0 }));\r\n  };\r\n\r\n  const [expanded, setExpanded] = React.useState<number[]>([]);\r\n\r\nconst startRow = state.page * state.rowsPerPage;\r\nconst endRow = startRow + state.rowsPerPage;\r\nconst currentPageContent = content.slice(startRow, endRow);\r\n\r\n\r\nconst [shouldUpdateHeight, setShouldUpdateHeight] = React.useState(false);\r\n\r\n\r\nconst handleExpandClick = (i: number) => {\r\n  const currentIndex = expanded.indexOf(i);\r\n  const newExpanded = [...expanded];\r\n\r\n  if (currentIndex === -1) {\r\n    newExpanded.push(i);\r\n  } else {\r\n    newExpanded.splice(currentIndex, 1);\r\n  }\r\n\r\n  setExpanded(newExpanded);\r\n  setShouldUpdateHeight(!shouldUpdateHeight);  // toggle shouldUpdateHeight state\r\n};\r\n\r\nuseEffect(() => {\r\n  if (tableRef.current) {\r\n    const observer = new ResizeObserver(() => {\r\n      Streamlit.setFrameHeight();\r\n    });\r\n\r\n    observer.observe(tableRef.current);\r\n\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }\r\n}, []);\r\n\r\nconst tableRef = React.useRef<HTMLDivElement>(null);\r\nreturn (\r\n  <>\r\n    <style dangerouslySetInnerHTML={{__html: customCss}}></style>\r\n    <Paper sx={paperStyle}>\r\n      <TableContainer ref={tableRef}>\r\n        <Table stickyHeader={stickyHeader} aria-label=\"sticky table\" size={size}>\r\n          {showHeaders && (\r\n            <TableHead>\r\n              <TableRow>\r\n                {showIndex && <TableCell>{/* This cell is for the index */}</TableCell>}\r\n                {/* Add a new table cell for the expand button */}\r\n                {detailColumns.length > 0 && <TableCell></TableCell>}\r\n                {content[0] && Object.keys(content[0]).filter((header) => !detailColumns.includes(header)).map((header, i) => (\r\n                  <TableCell key={i} padding={padding} dangerouslySetInnerHTML={{__html: String(header)}}></TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n          )}\r\n          <TableBody>\r\n            {currentPageContent.map((row: {[key: string]: any}, rowIndex: number) => {\r\n              const isExpanded = expanded.includes(rowIndex);\r\n              return (\r\n                <React.Fragment key={rowIndex}>\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                    {showIndex && <TableCell>{rowIndex}</TableCell>}\r\n                    {detailColumns.length > 0 && (\r\n                      <TableCell>\r\n                        <IconButton\r\n                          onClick={(event) => {\r\n                            event.stopPropagation(); // Prevent the row click event from firing\r\n                            handleExpandClick(rowIndex);\r\n                          }}\r\n                        >\r\n                          {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    )}\r\n                    {Object.entries(row).map(([key, value], i) => {\r\n                      if (!detailColumns.includes(key)) {\r\n                        return (\r\n                          <TableCell \r\n                            key={`${rowIndex}-${i}`} \r\n                            padding={padding} \r\n                            dangerouslySetInnerHTML={{__html: String(value)}}\r\n                            style={{\r\n                              wordWrap: \"break-word\",\r\n                              whiteSpace: \"normal\",\r\n                              overflowWrap: \"break-word\",\r\n                            }}\r\n                          />\r\n                        );\r\n                      }\r\n                      return null;  // Return null when we don't want to render anything\r\n                    })}\r\n                  </TableRow>\r\n                  {detailColumns.length > 0 && (\r\n                    <TableRow>\r\n                      <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n                        <Collapse in={isExpanded} timeout=\"auto\" unmountOnExit>\r\n                          <Box margin={1}>\r\n                          <Typography variant=\"h6\" gutterBottom component=\"div\" dangerouslySetInnerHTML={{__html: String(detailsHeader)}}></Typography>\r\n                            <Table size=\"small\" aria-label=\"purchases\">\r\n                            <TableBody>\r\n                            {chunkArray(detailColumns as string[], detailColNum).map((chunk: string[], i) => (\r\n                              <TableRow key={i}>\r\n                                {chunk.map((additionalColumn: string) => (\r\n                                  <React.Fragment key={additionalColumn}>\r\n                                    <TableCell dangerouslySetInnerHTML={{__html: additionalColumn}} />\r\n                                    <TableCell dangerouslySetInnerHTML={{__html: String(row[additionalColumn])}} />\r\n                                  </React.Fragment>\r\n                                ))}\r\n                              </TableRow>\r\n                            ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                          </Box>\r\n                        </Collapse>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      {enablePagination && (\r\n        <TablePagination\r\n          rowsPerPageOptions={[...paginationSizes, { label: 'All', value: -1 }]}\r\n          colSpan={3}\r\n          count={content.length}\r\n          rowsPerPage={state.rowsPerPage}\r\n          page={state.page}\r\n          SelectProps={{\r\n            inputProps: { 'aria-label': 'rows per page' },\r\n            native: true,\r\n          }}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n          component=\"div\"\r\n        />\r\n      )}\r\n    </Paper>\r\n  </>\r\n);\r\n\r\n  };\r\nexport default withStreamlitConnection(TableComponent);\r\n","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport TableComponent from \"./st_mui_table\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TableComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}