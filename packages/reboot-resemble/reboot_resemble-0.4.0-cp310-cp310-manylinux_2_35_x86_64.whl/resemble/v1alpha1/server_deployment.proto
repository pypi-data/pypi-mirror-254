syntax = "proto3";

// To build this proto with bazel, the proto and bazel rule must be in the same
// package, which means that the proto file must have a package declaration
// matching the Bazel workspace's folder structure.
package resemble.v1alpha1;

// Import a skeleton message representation of Kubernetes `V1ObjectMeta`. Note
// this message is missing a lot of fields compared to the native Kubernetes
// object and is only intended for serialization.
import "resemble/v1alpha1/kubernetes_helpers.proto";

message ServerDeployment {
  // Message detailing the current state of the `ServerDeployment`.
  message Status {
    // Message detailing the "failed" state.
    message Failed {
      // Metadata object of the current config pod, if any.
      V1ObjectMeta config_pod = 1;
    }

    // Message detailing the "configuring" state.
    message Configuring {
      // Metadata object of the current config pod, if any.
      V1ObjectMeta config_pod = 1;
    }

    // Message detailing the "configured" state.
    message Configured {}

    // The state of the `ServerDeployment` is provided through a `oneof` field.
    // State specific information is provided through the state specific
    // messages.
    oneof state_oneof {
      Failed failed = 1;
      // When a `ServerDeployment` is created or updated, the controller will
      // attempt to create or update a `ServerConfig` based on the
      // `ServerDeployment`. Until this has either succeeded or failed the state
      // of the `ServerDeployment` is `configuring`.
      Configuring configuring = 2;
      // When the `ServerConfig` object has been successfully created or
      // updated, the `ServerDeployment` object is `configured`.
      Configured configured = 3;
    }

    // Status message providing additional information.
    string reason = 4;

    // Metadata object of the corresponding `ServerConfig` object, if any.
    // The `ServerConfig` object pointed to is the one corresponding to the one
    // last successfully "configured". i.e., if we transition back to
    // "configuring" (and optionally to "failed") we are still pointing to the
    // last successfully created or updated `ServerConfig`.
    V1ObjectMeta server_config = 5;
  }

  // Status of the `ServerDeployment` reported by the resemble controller.
  Status status = 1;

  message Spec {
    // Name of the user image being deployed; e.g. registry.k8s.io/myserver:1.4.
    string container_image_name = 1;
  }
  Spec spec = 2;
}
