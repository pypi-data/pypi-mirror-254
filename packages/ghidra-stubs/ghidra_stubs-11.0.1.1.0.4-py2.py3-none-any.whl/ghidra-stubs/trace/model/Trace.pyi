from typing import List
import db
import ghidra.framework.data
import ghidra.framework.model
import ghidra.framework.options
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.trace.model
import ghidra.trace.model.bookmark
import ghidra.trace.model.breakpoint
import ghidra.trace.model.context
import ghidra.trace.model.guest
import ghidra.trace.model.listing
import ghidra.trace.model.memory
import ghidra.trace.model.modules
import ghidra.trace.model.program
import ghidra.trace.model.property
import ghidra.trace.model.stack
import ghidra.trace.model.symbol
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.trace.model.time
import ghidra.trace.util
import ghidra.util
import ghidra.util.task
import java.io
import java.lang
import java.util
import utility.function


class Trace(ghidra.program.model.data.DataTypeManagerDomainObject, object):
    DO_DOMAIN_FILE_CHANGED: int = 2
    DO_OBJECT_CLOSED: int = 6
    DO_OBJECT_ERROR: int = 8
    DO_OBJECT_RENAMED: int = 3
    DO_OBJECT_RESTORED: int = 4
    DO_OBJECT_SAVED: int = 1
    DO_PROPERTY_CHANGED: int = 5
    TRACE_ICON: javax.swing.Icon = jar:file:/opt/hostedtoolcache/ghidra/11.0.1/x64/Ghidra/Framework/Gui/lib/Gui.jar!/images/core.png
    undoLock: object = java.lang.Object@740c3028




    class TraceStackChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@6d5c99a9
        CHANGED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@4556ea72
        DELETED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@7afa8884



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceProgramViewListener(object):








        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def viewCreated(self, __a0: ghidra.trace.model.program.TraceProgramView) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TracePlatformChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@3a14070b
        DELETED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@330c4112
        MAPPING_ADDED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@49814475
        MAPPING_DELETED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@c7a3e57



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceStaticMappingChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceStaticMappingChangeType = ghidra.trace.model.Trace$TraceStaticMappingChangeType@385e1754
        DELETED: ghidra.trace.model.Trace.TraceStaticMappingChangeType = ghidra.trace.model.Trace$TraceStaticMappingChangeType@2268704d



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSymbolChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@59545215
        ADDRESS_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@2f7f364a
        ASSOCIATION_ADDED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@2cbf6de4
        ASSOCIATION_REMOVED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@78f8b4fc
        CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@7b770325
        DELETED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@1a7cee1e
        LIFESPAN_CHANGED: ghidra.trace.util.DefaultTraceChangeType = ghidra.trace.util.DefaultTraceChangeType@52d0beb2
        PARENT_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@6bc6bc6
        RENAMED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@514e6a73
        SET_AS_PRIMARY: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@d40cc24
        SOURCE_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@6f923518



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCodeChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@5ba01479
        DATA_TYPE_REPLACED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@503c6d49
        DATA_TYPE_SETTINGS_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@33ec339
        FRAGMENT_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@55a572a1
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@8941e96
        REMOVED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@256e45d6



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryStateChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceMemoryStateChangeType = ghidra.trace.model.Trace$TraceMemoryStateChangeType@232c69cd



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceModuleChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@704b0f37
        CHANGED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@47dea560
        DELETED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@1a3c1bf4
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@5a1e6b7f



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceReferenceChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@1940dafa
        DELETED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@1179d00b
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@396357a4
        PRIMARY_CHANGED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@381501e5



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSnapshotChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@6a99baf8
        CHANGED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@56ec8aa4
        DELETED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@751129aa



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCommentChangeType(ghidra.trace.util.DefaultTraceChangeType):
        EOL_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@5d1f3cff
        PLATE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@37d23d60
        POST_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@2208bc
        PRE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@7af60723
        REPEATABLE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@656323a
        type: int







        @staticmethod
        def byType(__a0: int) -> ghidra.trace.model.Trace.TraceCommentChangeType: ...

        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCompositeDataChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@49fc4c52
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@590bc827
        REMOVED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@6fe35130



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSourceArchiveChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@744cceca
        CHANGED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@2a6632d3
        DELETED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@1d37511



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryRegionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@4b64b1c2
        CHANGED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@1e9059b1
        DELETED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@471cc8f
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@16d96855



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceObjectChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CREATED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@6e78845f
        DELETED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@7ccf33
        LIFE_CHANGED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@194e991c
        VALUE_CREATED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@43685b0
        VALUE_DELETED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@1085ce0a
        VALUE_LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@5dba9f11



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceDataTypeChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@17034d61
        CHANGED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@55ddf187
        DELETED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@6b1690a8
        MOVED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@72a4810a
        RENAMED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@2de8c7cf
        REPLACED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@67d62af



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCategoryChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@79f9b803
        DELETED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@1244d33b
        MOVED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@3fdda449
        RENAMED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@2f83cae7



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceOverlaySpaceChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceOverlaySpaceChangeType = ghidra.trace.model.Trace$TraceOverlaySpaceChangeType@30342b0d
        DELETED: ghidra.trace.model.Trace.TraceOverlaySpaceChangeType = ghidra.trace.model.Trace$TraceOverlaySpaceChangeType@3fb9ed47



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryBytesChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceMemoryBytesChangeType = ghidra.trace.model.Trace$TraceMemoryBytesChangeType@5cf1cedb



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceInstructionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        FALL_THROUGH_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@46220a8
        FLOW_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@6cb3ed75
        LENGTH_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@3e66612e



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSectionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@28a438b9
        CHANGED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@56edd5c3
        DELETED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@2546522e



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceBookmarkChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@577c2498
        CHANGED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@2dae777b
        DELETED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@338601d6
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@9b78f7a
        TYPE_ADDED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@3aee97c2



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceBreakpointChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@175b3bfb
        CHANGED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@1ae9c379
        DELETED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@2f105301
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@19feea9f



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceThreadChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@63857e72
        CHANGED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@6ed81b47
        DELETED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@1cae11
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@4ed6c90a



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def addCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def addConsumer(self, __a0: object) -> bool: ...

    def addDomainFileListener(self, __a0: ghidra.framework.data.DomainObjectFileListener) -> None: ...

    def addListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def addProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def addSynchronizedDomainObject(self, __a0: ghidra.framework.model.DomainObject) -> None: ...

    def addTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def canLock(self) -> bool: ...

    def canRedo(self) -> bool: ...

    def canSave(self) -> bool: ...

    def canUndo(self) -> bool: ...

    def clearUndo(self) -> None: ...

    def createPrivateEventQueue(self, __a0: ghidra.framework.model.DomainObjectListener, __a1: int) -> ghidra.framework.model.EventQueueID: ...

    def createProgramView(self, __a0: long) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    def createTimeViewport(self) -> ghidra.trace.model.TraceTimeViewport: ...

    def endTransaction(self, __a0: int, __a1: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def flushEvents(self) -> None: ...

    def flushPrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> None: ...

    def forceLock(self, __a0: bool, __a1: unicode) -> None: ...

    def getAddressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    def getAllProgramViews(self) -> java.util.Collection: ...

    def getAllRedoNames(self) -> List[object]: ...

    def getAllUndoNames(self) -> List[object]: ...

    def getBaseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    def getBaseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    def getBaseLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getBookmarkManager(self) -> ghidra.trace.model.bookmark.TraceBookmarkManager: ...

    def getBreakpointManager(self) -> ghidra.trace.model.breakpoint.TraceBreakpointManager: ...

    def getClass(self) -> java.lang.Class: ...

    def getCodeManager(self) -> ghidra.trace.model.listing.TraceCodeManager: ...

    def getConsumerList(self) -> List[object]: ...

    def getCurrentTransactionInfo(self) -> ghidra.framework.model.TransactionInfo: ...

    def getDataTypeManager(self) -> ghidra.program.model.data.DataTypeManager: ...

    def getDescription(self) -> unicode: ...

    def getDomainFile(self) -> ghidra.framework.model.DomainFile: ...

    def getEmulatorCacheVersion(self) -> long: ...

    def getEquateManager(self) -> ghidra.trace.model.symbol.TraceEquateManager: ...

    def getFixedProgramView(self, __a0: long) -> ghidra.trace.model.program.TraceProgramView: ...

    def getMemoryManager(self) -> ghidra.trace.model.memory.TraceMemoryManager: ...

    def getMetadata(self) -> java.util.Map: ...

    def getModificationNumber(self) -> long: ...

    def getModuleManager(self) -> ghidra.trace.model.modules.TraceModuleManager: ...

    def getName(self) -> unicode: ...

    def getObjectManager(self) -> ghidra.trace.model.target.TraceObjectManager: ...

    def getOptions(self, __a0: unicode) -> ghidra.framework.options.Options: ...

    def getOptionsNames(self) -> List[object]: ...

    def getPlatformManager(self) -> ghidra.trace.model.guest.TracePlatformManager: ...

    def getProgramView(self) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    def getRedoName(self) -> unicode: ...

    def getReferenceManager(self) -> ghidra.trace.model.symbol.TraceReferenceManager: ...

    def getRegisterContextManager(self) -> ghidra.trace.model.context.TraceRegisterContextManager: ...

    def getStackManager(self) -> ghidra.trace.model.stack.TraceStackManager: ...

    def getStaticMappingManager(self) -> ghidra.trace.model.modules.TraceStaticMappingManager: ...

    def getSymbolManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    def getSynchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    def getThreadManager(self) -> ghidra.trace.model.thread.TraceThreadManager: ...

    def getTimeManager(self) -> ghidra.trace.model.time.TraceTimeManager: ...

    def getUndoName(self) -> unicode: ...

    def hasExclusiveAccess(self) -> bool: ...

    def hasTerminatedTransaction(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isChangeable(self) -> bool: ...

    def isChanged(self) -> bool: ...

    def isClosed(self) -> bool: ...

    @staticmethod
    def isLegacy(__a0: ghidra.trace.model.Trace) -> bool: ...

    def isLocked(self) -> bool: ...

    def isSendingEvents(self) -> bool: ...

    def isTemporary(self) -> bool: ...

    def isUsedBy(self, __a0: object) -> bool: ...

    def lock(self, __a0: unicode) -> bool: ...

    def lockRead(self) -> ghidra.util.LockHold: ...

    def lockWrite(self) -> ghidra.util.LockHold: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def openTransaction(self, __a0: unicode) -> db.Transaction: ...

    def redo(self) -> None: ...

    def release(self, __a0: object) -> None: ...

    def releaseSynchronizedDomainObject(self) -> None: ...

    def removeCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def removeDomainFileListener(self, __a0: ghidra.framework.data.DomainObjectFileListener) -> None: ...

    def removeListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def removePrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> bool: ...

    def removeProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def removeTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def save(self, __a0: unicode, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def saveToPackedFile(self, __a0: java.io.File, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def setEmulatorCacheVersion(self, __a0: long) -> None: ...

    def setEventsEnabled(self, __a0: bool) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setTemporary(self, __a0: bool) -> None: ...

    @overload
    def startTransaction(self, __a0: unicode) -> int: ...

    @overload
    def startTransaction(self, __a0: unicode, __a1: ghidra.framework.model.AbortedTransactionListener) -> int: ...

    def toString(self) -> unicode: ...

    def undo(self) -> None: ...

    def unlock(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @overload
    def withTransaction(self, __a0: unicode, __a1: utility.function.ExceptionalCallback) -> None: ...

    @overload
    def withTransaction(self, __a0: unicode, __a1: utility.function.ExceptionalSupplier) -> object: ...

    @property
    def addressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    @property
    def allProgramViews(self) -> java.util.Collection: ...

    @property
    def allRedoNames(self) -> List[object]: ...

    @property
    def allUndoNames(self) -> List[object]: ...

    @property
    def baseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    @property
    def baseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    @property
    def baseLanguage(self) -> ghidra.program.model.lang.Language: ...

    @property
    def bookmarkManager(self) -> ghidra.trace.model.bookmark.TraceBookmarkManager: ...

    @property
    def breakpointManager(self) -> ghidra.trace.model.breakpoint.TraceBreakpointManager: ...

    @property
    def changeable(self) -> bool: ...

    @property
    def changed(self) -> bool: ...

    @property
    def closed(self) -> bool: ...

    @property
    def codeManager(self) -> ghidra.trace.model.listing.TraceCodeManager: ...

    @property
    def consumerList(self) -> List[object]: ...

    @property
    def currentTransactionInfo(self) -> ghidra.framework.model.TransactionInfo: ...

    @property
    def dataTypeManager(self) -> ghidra.trace.model.data.TraceBasedDataTypeManager: ...

    @property
    def description(self) -> unicode: ...

    @property
    def domainFile(self) -> ghidra.framework.model.DomainFile: ...

    @property
    def emulatorCacheVersion(self) -> long: ...

    @emulatorCacheVersion.setter
    def emulatorCacheVersion(self, value: long) -> None: ...

    @property
    def equateManager(self) -> ghidra.trace.model.symbol.TraceEquateManager: ...

    @property
    def eventsEnabled(self) -> None: ...  # No getter available.

    @eventsEnabled.setter
    def eventsEnabled(self, value: bool) -> None: ...

    @property
    def locked(self) -> bool: ...

    @property
    def memoryManager(self) -> ghidra.trace.model.memory.TraceMemoryManager: ...

    @property
    def metadata(self) -> java.util.Map: ...

    @property
    def modificationNumber(self) -> long: ...

    @property
    def moduleManager(self) -> ghidra.trace.model.modules.TraceModuleManager: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def objectManager(self) -> ghidra.trace.model.target.TraceObjectManager: ...

    @property
    def optionsNames(self) -> List[object]: ...

    @property
    def platformManager(self) -> ghidra.trace.model.guest.TracePlatformManager: ...

    @property
    def programView(self) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    @property
    def redoName(self) -> unicode: ...

    @property
    def referenceManager(self) -> ghidra.trace.model.symbol.TraceReferenceManager: ...

    @property
    def registerContextManager(self) -> ghidra.trace.model.context.TraceRegisterContextManager: ...

    @property
    def sendingEvents(self) -> bool: ...

    @property
    def stackManager(self) -> ghidra.trace.model.stack.TraceStackManager: ...

    @property
    def staticMappingManager(self) -> ghidra.trace.model.modules.TraceStaticMappingManager: ...

    @property
    def symbolManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    @property
    def synchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    @property
    def temporary(self) -> bool: ...

    @temporary.setter
    def temporary(self, value: bool) -> None: ...

    @property
    def threadManager(self) -> ghidra.trace.model.thread.TraceThreadManager: ...

    @property
    def timeManager(self) -> ghidra.trace.model.time.TraceTimeManager: ...

    @property
    def undoName(self) -> unicode: ...