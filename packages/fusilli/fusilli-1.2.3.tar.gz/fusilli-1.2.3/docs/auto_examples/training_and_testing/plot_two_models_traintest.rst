
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/training_and_testing/plot_two_models_traintest.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_training_and_testing_plot_two_models_traintest.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_training_and_testing_plot_two_models_traintest.py:


Regression: Comparing Two Tabular Models Trained on Simulated Data
========================================================================

üöÄ Welcome to this tutorial on training and comparing two fusion models on a regression task using simulated multimodal tabular data! üéâ

üåü Key Features:

- üì• Importing models based on name.
- üß™ Training and testing models with train/test protocol.
- üíæ Saving trained models to a dictionary for later analysis.
- üìä Plotting the results of a single model.
- üìà Plotting the results of multiple models as a bar chart.
- üíæ Saving the results of multiple models as a CSV file.

.. GENERATED FROM PYTHON SOURCE LINES 17-32

.. code-block:: Python


    import importlib

    import matplotlib.pyplot as plt
    from tqdm.auto import tqdm
    import os

    from docs.examples import generate_sklearn_simulated_data
    from fusilli.data import prepare_fusion_data
    from fusilli.eval import RealsVsPreds, ModelComparison
    from fusilli.train import train_and_save_models
    from fusilli.utils.model_chooser import import_chosen_fusion_models

    # sphinx_gallery_thumbnail_number = -1








.. GENERATED FROM PYTHON SOURCE LINES 33-42

1. Import fusion models üîç
--------------------------------
Let's kick things off by importing our fusion models. The models are imported using the
:func:`~fusilli.utils.model_chooser.import_chosen_fusion_models` function, which takes a dictionary of conditions
as an input. The conditions are the attributes of the models, e.g. the class name, the modality type, etc.

The function returns list of class objects that match the conditions. If no conditions are specified, then all the models are returned.

We're importing ConcatTabularData and TabularChannelWiseMultiAttention models for this example. Both are multimodal tabular models.

.. GENERATED FROM PYTHON SOURCE LINES 42-49

.. code-block:: Python


    model_conditions = {
        "class_name": ["ConcatTabularData", "TabularChannelWiseMultiAttention"],
    }

    fusion_models = import_chosen_fusion_models(model_conditions)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/docs/examples/training_and_testing/plot_two_models_traintest.py", line 47, in <module>
        fusion_models = import_chosen_fusion_models(model_conditions)
      File "/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/fusilli/utils/model_chooser.py", line 323, in import_chosen_fusion_models
        imported_models = get_models(model_conditions, skip_models)
      File "/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/fusilli/utils/model_chooser.py", line 194, in get_models
        fusion_models, fusion_model_dict_without_skips = all_model_importer(fusion_model_dict, skip_models=skip_models)
      File "/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/fusilli/utils/model_chooser.py", line 125, in all_model_importer
        module = importlib.import_module(module_path)
      File "/Users/florencetownend/miniforge3/envs/fusion_eval/lib/python3.9/importlib/__init__.py", line 127, in import_module
        return _bootstrap._gcd_import(name[level:], package, level)
      File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
      File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
      File "<frozen importlib._bootstrap>", line 986, in _find_and_load_unlocked
      File "<frozen importlib._bootstrap>", line 680, in _load_unlocked
      File "<frozen importlib._bootstrap_external>", line 850, in exec_module
      File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
      File "/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/fusilli/fusionmodels/tabularfusion/mcvae_model.py", line 9, in <module>
        from fusilli.utils.mcvae.src.mcvae.models import Mcvae
    ImportError: cannot import name 'Mcvae' from 'fusilli.utils.mcvae.src.mcvae.models' (unknown location)




.. GENERATED FROM PYTHON SOURCE LINES 50-70

2. Set the training parameters üéØ
-----------------------------------
Now, let's configure our training parameters. The parameters are stored in a dictionary and passed to most
of the methods in this library.

For training and testing, the necessary parameters are:

- Paths to the input data files.
- Paths to the output directories.
- ``prediction_task``: the type of prediction to be performed. This is either ``regression``, ``binary``, or ``classification``.

Some optional parameters are:

- ``kfold``: a boolean of whether to use k-fold cross-validation (True) or not (False). By default, this is set to False.
- ``num_folds``: the number of folds to use. It can't be ``k=1``.
- ``wandb_logging``: a boolean of whether to log the results using Weights and Biases (True) or not (False). Default is False.
- ``test_size``: the proportion of the dataset to include in the test split. Default is 0.2.
- ``batch_size``: the batch size to use for training. Default is 8.
- ``multiclass_dimensions``: the number of classes to use for multiclass classification. Default is None unless ``prediction_task`` is ``multiclass``.
- ``max_epochs``: the maximum number of epochs to train for. Default is 1000.

.. GENERATED FROM PYTHON SOURCE LINES 70-99

.. code-block:: Python



    # Regression task (predicting a binary variable - 0 or 1)
    prediction_task = "regression"

    # Set the batch size
    batch_size = 48

    # Set the test_size
    test_size = 0.3

    # Setting output directories
    output_paths = {
        "losses": "loss_logs/two_models_traintest",
        "checkpoints": "checkpoints/two_models_traintest",
        "figures": "figures/two_models_traintest",
    }

    for path in output_paths.values():
        os.makedirs(path, exist_ok=True)

    # Clearing the loss logs directory (only for the example notebooks)
    for dir in os.listdir(output_paths["losses"]):
        # remove files
        for file in os.listdir(os.path.join(output_paths["losses"], dir)):
            os.remove(os.path.join(output_paths["losses"], dir, file))
        # remove dir
        os.rmdir(os.path.join(output_paths["losses"], dir))


.. GENERATED FROM PYTHON SOURCE LINES 100-104

3. Generating simulated data üîÆ
--------------------------------
Time to create some simulated data for our models to work their wonders on.
This function also simulated image data which we aren't using here.

.. GENERATED FROM PYTHON SOURCE LINES 104-116

.. code-block:: Python


    tabular1_path, tabular2_path = generate_sklearn_simulated_data(prediction_task,
                                                                   num_samples=500,
                                                                   num_tab1_features=10,
                                                                   num_tab2_features=20)

    data_paths = {
        "tabular1": tabular1_path,
        "tabular2": tabular2_path,
        "image": "",
    }


.. GENERATED FROM PYTHON SOURCE LINES 117-128

4. Training the first fusion model üèÅ
--------------------------------------
Here we train the first fusion model. We're using the ``train_and_save_models`` function to train and test the models.
This function takes the following inputs:

- ``prediction_task``: the type of prediction to be performed.
- ``fusion_model``: the fusion model to be trained.
- ``data_paths``: the paths to the input data files.
- ``output_paths``: the paths to the output directories.

First we'll create a dictionary to store both the trained models so we can compare them later.

.. GENERATED FROM PYTHON SOURCE LINES 128-130

.. code-block:: Python

    all_trained_models = {}  # create dictionary to store trained models


.. GENERATED FROM PYTHON SOURCE LINES 131-138

To train the first model we need to:

1. *Choose the model*: We're using the first model in the ``fusion_models`` list we made earlier.
2. *Print the attributes of the model*: To check it's been initialised correctly.
3. *Create the datamodule*: This is done with the :func:`~fusilli.data.prepare_fusion_data` function. This function takes the initialised model and some parameters as inputs. It returns the datamodule.
4. *Train and test the model*: This is done with the :func:`~fusilli.train.train_and_save_models` function. This function takes the datamodule and the fusion model as inputs, as well as optional training modifications. It returns the trained model.
5. *Add the trained model to the ``all_trained_models`` dictionary*: This is so we can compare the results of the two models later.

.. GENERATED FROM PYTHON SOURCE LINES 138-164

.. code-block:: Python


    fusion_model = fusion_models[0]

    print("Method name:", fusion_model.method_name)
    print("Modality type:", fusion_model.modality_type)
    print("Fusion type:", fusion_model.fusion_type)

    # Create the data module
    dm = prepare_fusion_data(prediction_task=prediction_task,
                             fusion_model=fusion_model,
                             data_paths=data_paths,
                             output_paths=output_paths,
                             batch_size=batch_size,
                             test_size=test_size)

    # train and test
    model_1_list = train_and_save_models(
        data_module=dm,
        fusion_model=fusion_model,
        enable_checkpointing=False,  # False for the example notebooks
        show_loss_plot=True,
    )

    # Add trained model to dictionary
    all_trained_models[fusion_model.__name__] = model_1_list


.. GENERATED FROM PYTHON SOURCE LINES 165-170

5. Plotting the results of the first model üìä
-----------------------------------------------
Let's unveil the results of our first model's hard work. We're using the :class:`~fusilli.eval.RealsVsPreds` class to plot the results of the first model.
This class takes the trained model as an input and returns a plot of the real values vs the predicted values from the final validation data (when using from_final_val_data).
If you want to plot the results from the test data, you can use from_new_data instead. See the example notebook on plotting with new data for more detail.

.. GENERATED FROM PYTHON SOURCE LINES 170-175

.. code-block:: Python


    reals_preds_model_1 = RealsVsPreds.from_final_val_data(model_1_list)

    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 176-179

6. Training the second fusion model üèÅ
---------------------------------------
 It's time for our second fusion model to shine! Here we train the second fusion model: TabularChannelWiseMultiAttention. We're using the same steps as before, but this time we're using the second model in the ``fusion_models`` list.

.. GENERATED FROM PYTHON SOURCE LINES 182-183

Choose the model

.. GENERATED FROM PYTHON SOURCE LINES 183-208

.. code-block:: Python

    fusion_model = fusion_models[1]

    print("Method name:", fusion_model.method_name)
    print("Modality type:", fusion_model.modality_type)
    print("Fusion type:", fusion_model.fusion_type)

    # Create the data module
    dm = prepare_fusion_data(prediction_task=prediction_task,
                             fusion_model=fusion_model,
                             data_paths=data_paths,
                             output_paths=output_paths,
                             batch_size=batch_size,
                             test_size=test_size)

    # train and test
    model_2_list = train_and_save_models(
        data_module=dm,
        fusion_model=fusion_model,
        enable_checkpointing=False,  # False for the example notebooks
        show_loss_plot=True,
    )

    # Add trained model to dictionary
    all_trained_models[fusion_model.__name__] = model_2_list


.. GENERATED FROM PYTHON SOURCE LINES 209-211

7. Plotting the results of the second model üìä
-----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 211-216

.. code-block:: Python


    reals_preds_model_2 = RealsVsPreds.from_final_val_data(model_2_list)

    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 217-222

8. Comparing the results of the two models üìà
----------------------------------------------
Let the ultimate showdown begin! We're comparing the results of our two models.
We're using the :class:`~fusilli.eval.ModelComparison` class to compare the results of the two models.
This class takes the trained models as an input and returns a plot of the results of the two models and a Pandas DataFrame of the metrics of the two models.

.. GENERATED FROM PYTHON SOURCE LINES 222-229

.. code-block:: Python


    comparison_plot, metrics_dataframe = ModelComparison.from_final_val_data(
        all_trained_models
    )

    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 230-233

9. Saving the metrics of the two models üíæ
-------------------------------------------
Time to archive our models' achievements. We're using the :class:`~fusilli.eval.ModelComparison` class to save the metrics of the two models.

.. GENERATED FROM PYTHON SOURCE LINES 233-235

.. code-block:: Python


    metrics_dataframe


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.003 seconds)


.. _sphx_glr_download_auto_examples_training_and_testing_plot_two_models_traintest.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_two_models_traintest.ipynb <plot_two_models_traintest.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_two_models_traintest.py <plot_two_models_traintest.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
