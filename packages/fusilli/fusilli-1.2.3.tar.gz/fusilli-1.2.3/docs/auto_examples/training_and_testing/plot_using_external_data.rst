
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/training_and_testing/plot_using_external_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_training_and_testing_plot_using_external_data.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_training_and_testing_plot_using_external_data.py:


Using External Test Data
========================================================================

Let's learn how to use external test data with Fusilli!
Some guidance can also be found in the :ref:`Data Loading <data-loading>` section of the documentation.

The extra step that we need to take is to provide the paths to the test data files to the functions that create evaluation figures: :class:`~fusilli.eval.RealsVsPreds.from_new_data`, :class:`~fusilli.eval.ConfusionMatrix.from_new_data`, :class:`~fusilli.eval.ModelComparison.from_new_data`.

.. note::

    It is not possible to use external test data with graph-based fusion models.


We'll rush through the first few steps of the training and testing process, as they are covered in more detail in the other example notebooks.

.. GENERATED FROM PYTHON SOURCE LINES 18-105

.. code-block:: Python


    import matplotlib.pyplot as plt
    from tqdm.auto import tqdm
    import os

    from docs.examples import generate_sklearn_simulated_data
    from fusilli.data import prepare_fusion_data
    from fusilli.eval import RealsVsPreds, ModelComparison
    from fusilli.train import train_and_save_models
    from fusilli.utils.model_chooser import import_chosen_fusion_models

    # sphinx_gallery_thumbnail_number = -1


    model_conditions = {
        "class_name": ["ConcatTabularData"],
    }

    fusion_models = import_chosen_fusion_models(model_conditions)

    # Regression task
    prediction_task = "regression"

    # Set the batch size
    batch_size = 48

    # Setting output directories
    output_paths = {
        "losses": "loss_logs/external_data",
        "checkpoints": "checkpoints/external_data",
        "figures": "figures/external_data",
    }

    for dir in output_paths.values():
        os.makedirs(dir, exist_ok=True)

    # Clearing the loss logs directory (only for the example notebooks)
    for dir in os.listdir(output_paths["losses"]):
        # remove files
        for file in os.listdir(os.path.join(output_paths["losses"], dir)):
            os.remove(os.path.join(output_paths["losses"], dir, file))
        # remove dir
        os.rmdir(os.path.join(output_paths["losses"], dir))

    tabular1_path, tabular2_path = generate_sklearn_simulated_data(prediction_task,
                                                                   num_samples=500,
                                                                   num_tab1_features=10,
                                                                   num_tab2_features=20)

    external_tabular1_path, external_tabular2_path = generate_sklearn_simulated_data(prediction_task,
                                                                                     num_samples=100,
                                                                                     num_tab1_features=10,
                                                                                     num_tab2_features=20,
                                                                                     external=True)
    data_paths = {
        "tabular1": tabular1_path,
        "tabular2": tabular2_path,
        "image": "",
    }

    external_data_paths = {
        "tabular1": external_tabular1_path,
        "tabular2": external_tabular2_path,
        "image": "",
    }

    fusion_model = fusion_models[0]

    print("Method name:", fusion_model.method_name)
    print("Modality type:", fusion_model.modality_type)
    print("Fusion type:", fusion_model.fusion_type)

    # Create the data module
    dm = prepare_fusion_data(prediction_task=prediction_task,
                             fusion_model=fusion_model,
                             data_paths=data_paths,
                             output_paths=output_paths,
                             batch_size=batch_size, )

    # train and test
    trained_model = train_and_save_models(
        data_module=dm,
        fusion_model=fusion_model,
        enable_checkpointing=True,
        show_loss_plot=True,
    )



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/docs/examples/training_and_testing/plot_using_external_data.py", line 36, in <module>
        fusion_models = import_chosen_fusion_models(model_conditions)
      File "/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/fusilli/utils/model_chooser.py", line 323, in import_chosen_fusion_models
        imported_models = get_models(model_conditions, skip_models)
      File "/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/fusilli/utils/model_chooser.py", line 194, in get_models
        fusion_models, fusion_model_dict_without_skips = all_model_importer(fusion_model_dict, skip_models=skip_models)
      File "/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/fusilli/utils/model_chooser.py", line 125, in all_model_importer
        module = importlib.import_module(module_path)
      File "/Users/florencetownend/miniforge3/envs/fusion_eval/lib/python3.9/importlib/__init__.py", line 127, in import_module
        return _bootstrap._gcd_import(name[level:], package, level)
      File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
      File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
      File "<frozen importlib._bootstrap>", line 986, in _find_and_load_unlocked
      File "<frozen importlib._bootstrap>", line 680, in _load_unlocked
      File "<frozen importlib._bootstrap_external>", line 850, in exec_module
      File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
      File "/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/fusilli/fusionmodels/tabularfusion/mcvae_model.py", line 9, in <module>
        from fusilli.utils.mcvae.src.mcvae.models import Mcvae
    ImportError: cannot import name 'Mcvae' from 'fusilli.utils.mcvae.src.mcvae.models' (unknown location)




.. GENERATED FROM PYTHON SOURCE LINES 106-109

Evaluating with validation data
-----------------------------------------------
We'll start by evaluating the model with the validation data.

.. GENERATED FROM PYTHON SOURCE LINES 109-113

.. code-block:: Python


    reals_preds_validation = RealsVsPreds.from_final_val_data(trained_model)
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 114-117

Evaluating with external data
----------------------------------------------
Now we'll evaluate the model with the external data.

.. GENERATED FROM PYTHON SOURCE LINES 117-123

.. code-block:: Python


    reals_preds_external = RealsVsPreds.from_new_data(trained_model,
                                                      output_paths=output_paths,
                                                      test_data_paths=external_data_paths)
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 124-125

Removing checkpoint files

.. GENERATED FROM PYTHON SOURCE LINES 125-129

.. code-block:: Python


    for dir in os.listdir(output_paths["checkpoints"]):
        # remove files
        os.remove(os.path.join(output_paths["checkpoints"], dir))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.003 seconds)


.. _sphx_glr_download_auto_examples_training_and_testing_plot_using_external_data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_using_external_data.ipynb <plot_using_external_data.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_using_external_data.py <plot_using_external_data.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
