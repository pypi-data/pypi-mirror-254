# Generated from vba.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,218,2594,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,1,0,
        1,0,1,0,1,1,3,1,311,8,1,1,1,5,1,314,8,1,10,1,12,1,317,9,1,1,1,1,
        1,5,1,321,8,1,10,1,12,1,324,9,1,3,1,326,8,1,1,1,3,1,329,8,1,1,1,
        5,1,332,8,1,10,1,12,1,335,9,1,1,1,3,1,338,8,1,1,1,5,1,341,8,1,10,
        1,12,1,344,9,1,1,1,3,1,347,8,1,1,1,5,1,350,8,1,10,1,12,1,353,9,1,
        1,1,3,1,356,8,1,1,1,5,1,359,8,1,10,1,12,1,362,9,1,1,1,3,1,365,8,
        1,1,2,1,2,1,2,1,2,1,2,3,2,372,8,2,1,3,1,3,1,3,1,3,1,3,3,3,379,8,
        3,1,3,5,3,382,8,3,10,3,12,3,385,9,3,1,3,4,3,388,8,3,11,3,12,3,389,
        1,3,1,3,1,4,1,4,3,4,396,8,4,1,4,1,4,3,4,400,8,4,1,4,1,4,1,4,3,4,
        405,8,4,1,4,5,4,408,8,4,10,4,12,4,411,9,4,1,5,1,5,4,5,415,8,5,11,
        5,12,5,416,4,5,419,8,5,11,5,12,5,420,1,6,1,6,4,6,425,8,6,11,6,12,
        6,426,1,6,1,6,5,6,431,8,6,10,6,12,6,434,9,6,1,6,5,6,437,8,6,10,6,
        12,6,440,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,450,8,7,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,463,8,8,1,9,1,9,3,9,467,
        8,9,1,10,1,10,4,10,471,8,10,11,10,12,10,472,1,10,1,10,5,10,477,8,
        10,10,10,12,10,480,9,10,1,10,5,10,483,8,10,10,10,12,10,486,9,10,
        1,11,1,11,1,11,1,11,1,11,1,11,3,11,494,8,11,1,12,1,12,1,12,1,12,
        3,12,500,8,12,1,12,1,12,3,12,504,8,12,1,12,1,12,3,12,508,8,12,1,
        12,1,12,3,12,512,8,12,1,12,5,12,515,8,12,10,12,12,12,518,9,12,1,
        13,1,13,1,13,1,13,5,13,524,8,13,10,13,12,13,527,9,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,3,14,599,8,14,1,15,1,15,1,15,1,15,3,15,605,8,15,1,15,
        1,15,3,15,609,8,15,1,15,3,15,612,8,15,1,16,1,16,1,17,1,17,1,17,1,
        17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,628,8,19,1,19,1,
        19,3,19,632,8,19,1,19,5,19,635,8,19,10,19,12,19,638,9,19,3,19,640,
        8,19,1,20,1,20,1,20,3,20,645,8,20,1,20,1,20,1,20,1,20,3,20,651,8,
        20,1,20,1,20,3,20,655,8,20,1,20,5,20,658,8,20,10,20,12,20,661,9,
        20,1,21,1,21,3,21,665,8,21,1,21,1,21,3,21,669,8,21,1,21,3,21,672,
        8,21,1,21,1,21,3,21,676,8,21,1,21,1,21,1,22,1,22,3,22,682,8,22,1,
        22,1,22,3,22,686,8,22,1,22,1,22,1,23,1,23,1,23,3,23,693,8,23,1,23,
        1,23,1,23,1,23,3,23,699,8,23,1,23,1,23,3,23,703,8,23,1,23,3,23,706,
        8,23,1,23,1,23,1,23,3,23,711,8,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,3,23,721,8,23,1,23,3,23,724,8,23,1,23,3,23,727,8,23,1,
        23,1,23,3,23,731,8,23,1,24,1,24,1,24,1,24,3,24,737,8,24,1,24,1,24,
        3,24,741,8,24,1,24,5,24,744,8,24,10,24,12,24,747,9,24,1,25,1,25,
        1,25,1,25,3,25,753,8,25,1,25,1,25,3,25,757,8,25,1,25,1,25,3,25,761,
        8,25,1,25,1,25,3,25,765,8,25,1,25,3,25,768,8,25,1,26,1,26,1,26,3,
        26,773,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,784,
        8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,
        797,8,26,1,27,1,27,1,28,1,28,1,28,3,28,804,8,28,1,28,1,28,1,28,1,
        28,1,28,5,28,811,8,28,10,28,12,28,814,9,28,1,28,1,28,1,29,1,29,3,
        29,820,8,29,1,29,1,29,3,29,824,8,29,1,29,3,29,827,8,29,1,29,1,29,
        1,30,1,30,1,30,1,30,1,30,3,30,836,8,30,1,30,5,30,839,8,30,10,30,
        12,30,842,9,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,3,32,851,8,32,
        1,32,1,32,1,32,1,32,3,32,857,8,32,1,32,1,32,1,33,1,33,1,34,1,34,
        1,34,1,34,3,34,867,8,34,1,34,1,34,3,34,871,8,34,1,34,1,34,1,35,1,
        35,1,35,1,35,1,35,1,35,3,35,881,8,35,1,35,1,35,1,35,1,35,1,35,1,
        35,3,35,889,8,35,1,35,1,35,1,35,3,35,894,8,35,1,36,1,36,1,36,1,36,
        3,36,900,8,36,1,36,1,36,3,36,904,8,36,1,36,3,36,907,8,36,1,36,1,
        36,3,36,911,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,
        36,922,8,36,1,36,1,36,3,36,926,8,36,1,36,1,36,1,36,3,36,931,8,36,
        1,37,1,37,1,37,3,37,936,8,37,1,37,1,37,3,37,940,8,37,1,37,1,37,3,
        37,944,8,37,1,37,1,37,3,37,948,8,37,1,37,3,37,951,8,37,1,37,3,37,
        954,8,37,1,37,3,37,957,8,37,1,37,3,37,960,8,37,1,37,1,37,3,37,964,
        8,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,974,8,38,1,38,
        1,38,3,38,978,8,38,1,38,3,38,981,8,38,1,38,3,38,984,8,38,1,38,1,
        38,3,38,988,8,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
        40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1011,
        8,41,1,41,1,41,5,41,1015,8,41,10,41,12,41,1018,9,41,1,41,3,41,1021,
        8,41,1,41,1,41,1,41,1,41,3,41,1027,8,41,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,3,42,1036,8,42,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,3,44,1047,8,44,1,45,1,45,1,45,3,45,1052,8,45,1,46,1,46,1,46,
        1,46,1,47,1,47,1,47,1,47,3,47,1062,8,47,1,47,1,47,3,47,1066,8,47,
        1,47,4,47,1069,8,47,11,47,12,47,1070,1,48,1,48,1,48,1,48,1,49,1,
        49,3,49,1079,8,49,1,49,1,49,3,49,1083,8,49,1,49,1,49,3,49,1087,8,
        49,1,49,3,49,1090,8,49,1,49,1,49,3,49,1094,8,49,1,50,1,50,1,50,1,
        50,3,50,1100,8,50,1,50,1,50,3,50,1104,8,50,1,50,1,50,1,51,1,51,3,
        51,1110,8,51,1,51,3,51,1113,8,51,1,51,3,51,1116,8,51,1,51,3,51,1119,
        8,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,1129,8,53,1,53,
        1,53,3,53,1133,8,53,1,53,1,53,1,53,1,53,1,53,3,53,1140,8,53,3,53,
        1142,8,53,1,54,1,54,1,54,1,54,3,54,1148,8,54,1,54,1,54,3,54,1152,
        8,54,1,54,1,54,1,55,1,55,3,55,1158,8,55,1,55,1,55,3,55,1162,8,55,
        1,55,1,55,3,55,1166,8,55,1,55,1,55,1,56,1,56,5,56,1172,8,56,10,56,
        12,56,1175,9,56,1,56,3,56,1178,8,56,1,56,1,56,1,57,1,57,3,57,1184,
        8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,1193,8,57,10,57,12,
        57,1196,9,57,1,58,1,58,3,58,1200,8,58,1,58,1,58,1,58,1,58,1,58,1,
        58,1,58,5,58,1209,8,58,10,58,12,58,1212,9,58,1,59,1,59,1,59,1,59,
        1,59,5,59,1219,8,59,10,59,12,59,1222,9,59,1,60,1,60,3,60,1226,8,
        60,1,60,1,60,3,60,1230,8,60,1,60,1,60,3,60,1234,8,60,1,60,1,60,1,
        61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1258,8,63,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,3,64,1268,8,64,1,64,1,64,3,64,1272,8,64,1,
        64,5,64,1275,8,64,10,64,12,64,1278,9,64,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,3,65,1288,8,65,1,65,1,65,3,65,1292,8,65,1,65,5,65,
        1295,8,65,10,65,12,65,1298,9,65,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,3,66,1311,8,66,1,66,1,66,3,66,1315,8,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1324,8,66,1,66,1,66,3,66,1328,
        8,66,1,66,3,66,1331,8,66,1,67,1,67,3,67,1335,8,67,1,67,1,67,3,67,
        1339,8,67,1,67,3,67,1342,8,67,5,67,1344,8,67,10,67,12,67,1347,9,
        67,1,67,3,67,1350,8,67,1,67,3,67,1353,8,67,1,67,1,67,3,67,1357,8,
        67,1,67,3,67,1360,8,67,4,67,1362,8,67,11,67,12,67,1363,3,67,1366,
        8,67,1,68,1,68,1,68,3,68,1371,8,68,1,68,1,68,3,68,1375,8,68,1,68,
        1,68,3,68,1379,8,68,1,68,1,68,3,68,1383,8,68,3,68,1385,8,68,1,69,
        1,69,1,69,1,69,3,69,1391,8,69,1,69,1,69,3,69,1395,8,69,1,69,3,69,
        1398,8,69,1,70,1,70,1,70,3,70,1403,8,70,1,70,1,70,3,70,1407,8,70,
        1,70,1,70,1,70,1,70,3,70,1413,8,70,1,70,3,70,1416,8,70,1,70,3,70,
        1419,8,70,1,70,1,70,3,70,1423,8,70,1,70,1,70,3,70,1427,8,70,1,70,
        1,70,1,71,1,71,1,71,3,71,1434,8,71,1,71,1,71,3,71,1438,8,71,1,71,
        1,71,1,71,1,71,3,71,1444,8,71,1,71,3,71,1447,8,71,1,71,1,71,3,71,
        1451,8,71,1,71,1,71,1,72,1,72,1,72,3,72,1458,8,72,1,72,1,72,3,72,
        1462,8,72,1,72,1,72,1,72,1,72,3,72,1468,8,72,1,72,3,72,1471,8,72,
        1,72,1,72,3,72,1475,8,72,1,72,1,72,1,73,1,73,1,73,1,73,3,73,1483,
        8,73,1,73,1,73,3,73,1487,8,73,1,73,3,73,1490,8,73,1,73,3,73,1493,
        8,73,1,73,1,73,3,73,1497,8,73,1,73,1,73,1,74,1,74,1,74,1,74,3,74,
        1505,8,74,1,74,1,74,3,74,1509,8,74,1,74,1,74,3,74,1513,8,74,3,74,
        1515,8,74,1,74,3,74,1518,8,74,1,75,1,75,1,75,3,75,1523,8,75,1,76,
        1,76,1,76,1,76,3,76,1529,8,76,1,76,1,76,3,76,1533,8,76,1,76,1,76,
        3,76,1537,8,76,1,76,5,76,1540,8,76,10,76,12,76,1543,9,76,1,77,1,
        77,3,77,1547,8,77,1,77,1,77,3,77,1551,8,77,1,77,1,77,3,77,1555,8,
        77,1,77,1,77,1,77,3,77,1560,8,77,1,78,1,78,1,79,1,79,1,79,1,79,3,
        79,1568,8,79,3,79,1570,8,79,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,
        82,1,82,1,82,3,82,1582,8,82,1,82,1,82,3,82,1586,8,82,1,82,1,82,1,
        83,1,83,1,83,1,83,3,83,1594,8,83,1,83,1,83,3,83,1598,8,83,1,83,1,
        83,1,84,1,84,1,84,1,84,3,84,1606,8,84,1,84,1,84,3,84,1610,8,84,1,
        84,1,84,3,84,1614,8,84,1,84,1,84,3,84,1618,8,84,1,84,1,84,3,84,1622,
        8,84,1,84,1,84,3,84,1626,8,84,1,84,1,84,1,85,1,85,1,85,1,85,3,85,
        1634,8,85,1,85,1,85,3,85,1638,8,85,1,85,1,85,1,86,1,86,1,86,1,86,
        1,86,1,86,1,86,5,86,1649,8,86,10,86,12,86,1652,9,86,1,86,1,86,1,
        87,1,87,3,87,1658,8,87,1,87,1,87,3,87,1662,8,87,1,87,1,87,1,87,1,
        87,1,87,1,87,1,87,1,87,1,87,3,87,1673,8,87,1,88,1,88,1,88,1,88,1,
        88,3,88,1680,8,88,1,89,1,89,1,89,3,89,1685,8,89,1,89,1,89,3,89,1689,
        8,89,1,89,5,89,1692,8,89,10,89,12,89,1695,9,89,3,89,1697,8,89,1,
        90,1,90,1,90,1,90,3,90,1703,8,90,1,90,1,90,3,90,1707,8,90,1,90,3,
        90,1710,8,90,1,91,1,91,1,91,1,91,3,91,1716,8,91,1,91,1,91,3,91,1720,
        8,91,1,91,1,91,1,92,1,92,1,92,1,92,3,92,1728,8,92,1,92,1,92,3,92,
        1732,8,92,1,92,1,92,1,93,1,93,1,94,1,94,1,94,3,94,1741,8,94,1,94,
        1,94,3,94,1745,8,94,1,94,1,94,3,94,1749,8,94,1,94,1,94,3,94,1753,
        8,94,1,94,3,94,1756,8,94,1,94,1,94,3,94,1760,8,94,1,94,1,94,1,94,
        1,94,1,95,1,95,3,95,1768,8,95,1,95,1,95,3,95,1772,8,95,1,95,1,95,
        1,96,1,96,1,96,3,96,1779,8,96,1,96,1,96,1,96,1,96,1,96,5,96,1786,
        8,96,10,96,12,96,1789,9,96,1,96,1,96,1,97,1,97,3,97,1795,8,97,1,
        97,1,97,3,97,1799,8,97,1,97,3,97,1802,8,97,1,97,3,97,1805,8,97,1,
        97,3,97,1808,8,97,1,97,1,97,3,97,1812,8,97,1,97,1,97,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,3,98,1823,8,98,1,99,1,99,1,99,1,99,1,100,
        1,100,1,100,1,100,3,100,1833,8,100,1,100,1,100,3,100,1837,8,100,
        1,100,1,100,1,100,1,100,1,100,3,100,1844,8,100,3,100,1846,8,100,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1857,
        8,101,1,101,1,101,1,101,3,101,1862,8,101,1,101,1,101,3,101,1866,
        8,101,1,101,1,101,1,101,1,101,3,101,1872,8,101,1,101,1,101,3,101,
        1876,8,101,1,101,1,101,3,101,1880,8,101,1,101,1,101,1,101,3,101,
        1885,8,101,1,101,1,101,3,101,1889,8,101,1,101,1,101,1,101,3,101,
        1894,8,101,1,101,1,101,3,101,1898,8,101,1,101,1,101,1,101,3,101,
        1903,8,101,1,101,1,101,3,101,1907,8,101,1,101,1,101,1,101,3,101,
        1912,8,101,1,101,1,101,3,101,1916,8,101,1,101,1,101,1,101,3,101,
        1921,8,101,1,101,1,101,3,101,1925,8,101,1,101,1,101,1,101,3,101,
        1930,8,101,1,101,1,101,3,101,1934,8,101,1,101,5,101,1937,8,101,10,
        101,12,101,1940,9,101,1,102,1,102,3,102,1944,8,102,1,102,1,102,1,
        103,1,103,3,103,1950,8,103,1,103,1,103,1,104,1,104,3,104,1956,8,
        104,1,104,1,104,3,104,1960,8,104,1,104,1,104,1,105,1,105,3,105,1966,
        8,105,1,105,1,105,1,106,1,106,1,106,3,106,1973,8,106,1,106,1,106,
        1,106,3,106,1978,8,106,1,106,1,106,1,107,1,107,3,107,1984,8,107,
        1,107,1,107,3,107,1988,8,107,1,107,5,107,1991,8,107,10,107,12,107,
        1994,9,107,1,108,1,108,3,108,1998,8,108,1,108,1,108,3,108,2002,8,
        108,1,108,1,108,3,108,2006,8,108,3,108,2008,8,108,1,108,1,108,3,
        108,2012,8,108,3,108,2014,8,108,1,108,3,108,2017,8,108,1,108,1,108,
        3,108,2021,8,108,1,109,1,109,1,109,1,109,1,109,3,109,2028,8,109,
        1,109,1,109,1,110,1,110,1,110,1,110,3,110,2036,8,110,1,110,1,110,
        3,110,2040,8,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,111,
        3,111,2050,8,111,1,111,1,111,3,111,2054,8,111,1,111,1,111,1,112,
        1,112,1,112,1,112,3,112,2062,8,112,1,112,1,112,3,112,2066,8,112,
        1,112,3,112,2069,8,112,1,113,3,113,2072,8,113,1,113,1,113,1,114,
        1,114,3,114,2078,8,114,1,115,1,115,1,115,1,115,3,115,2084,8,115,
        1,115,3,115,2087,8,115,1,115,1,115,3,115,2091,8,115,1,115,1,115,
        3,115,2095,8,115,1,115,1,115,3,115,2099,8,115,1,115,3,115,2102,8,
        115,1,115,1,115,1,115,1,115,5,115,2108,8,115,10,115,12,115,2111,
        9,115,1,116,1,116,1,116,3,116,2116,8,116,1,116,1,116,1,116,3,116,
        2121,8,116,1,116,3,116,2124,8,116,1,116,1,116,3,116,2128,8,116,1,
        116,1,116,3,116,2132,8,116,1,116,1,116,3,116,2136,8,116,1,116,3,
        116,2139,8,116,1,116,1,116,1,116,1,116,5,116,2145,8,116,10,116,12,
        116,2148,9,116,1,117,1,117,3,117,2152,8,117,1,118,3,118,2155,8,118,
        1,118,1,118,1,118,3,118,2160,8,118,1,118,1,118,3,118,2164,8,118,
        1,118,3,118,2167,8,118,1,118,3,118,2170,8,118,1,118,1,118,1,118,
        1,118,5,118,2176,8,118,10,118,12,118,2179,9,118,1,119,1,119,1,119,
        3,119,2184,8,119,1,119,3,119,2187,8,119,1,119,1,119,1,119,1,119,
        5,119,2193,8,119,10,119,12,119,2196,9,119,1,120,1,120,1,120,1,120,
        3,120,2202,8,120,1,121,1,121,3,121,2206,8,121,1,121,3,121,2209,8,
        121,1,121,3,121,2212,8,121,1,121,1,121,1,121,1,121,5,121,2218,8,
        121,10,121,12,121,2221,9,121,1,122,1,122,3,122,2225,8,122,1,122,
        3,122,2228,8,122,1,122,3,122,2231,8,122,1,122,1,122,3,122,2235,8,
        122,1,122,1,122,3,122,2239,8,122,3,122,2241,8,122,1,122,1,122,3,
        122,2245,8,122,1,122,3,122,2248,8,122,1,122,1,122,1,122,1,122,5,
        122,2254,8,122,10,122,12,122,2257,9,122,1,123,1,123,3,123,2261,8,
        123,1,123,4,123,2264,8,123,11,123,12,123,2265,1,123,3,123,2269,8,
        123,1,123,3,123,2272,8,123,1,123,1,123,1,123,1,123,5,123,2278,8,
        123,10,123,12,123,2281,9,123,1,124,3,124,2284,8,124,1,124,3,124,
        2287,8,124,1,124,1,124,3,124,2291,8,124,1,124,3,124,2294,8,124,1,
        124,1,124,3,124,2298,8,124,1,125,1,125,1,126,3,126,2303,8,126,1,
        126,3,126,2306,8,126,1,126,1,126,3,126,2310,8,126,5,126,2312,8,126,
        10,126,12,126,2315,9,126,1,126,1,126,3,126,2319,8,126,1,126,1,126,
        3,126,2323,8,126,1,126,3,126,2326,8,126,5,126,2328,8,126,10,126,
        12,126,2331,9,126,1,127,3,127,2334,8,127,1,127,1,127,3,127,2338,
        8,127,1,127,3,127,2341,8,127,1,127,1,127,1,128,1,128,1,128,3,128,
        2348,8,128,1,129,1,129,3,129,2352,8,129,1,129,1,129,3,129,2356,8,
        129,1,129,1,129,3,129,2360,8,129,1,129,5,129,2363,8,129,10,129,12,
        129,2366,9,129,3,129,2368,8,129,1,129,3,129,2371,8,129,1,129,1,129,
        1,130,1,130,3,130,2377,8,130,1,130,1,130,3,130,2381,8,130,1,130,
        1,130,3,130,2385,8,130,1,130,1,130,3,130,2389,8,130,1,130,3,130,
        2392,8,130,1,130,1,130,3,130,2396,8,130,1,130,3,130,2399,8,130,1,
        130,3,130,2402,8,130,1,130,3,130,2405,8,130,1,130,3,130,2408,8,130,
        1,130,3,130,2411,8,130,1,131,1,131,3,131,2415,8,131,1,131,1,131,
        1,132,1,132,3,132,2421,8,132,1,132,1,132,3,132,2425,8,132,1,132,
        5,132,2428,8,132,10,132,12,132,2431,9,132,1,133,1,133,1,133,1,133,
        1,133,3,133,2438,8,133,1,133,3,133,2441,8,133,1,133,1,133,3,133,
        2445,8,133,1,134,1,134,4,134,2449,8,134,11,134,12,134,2450,1,135,
        1,135,3,135,2455,8,135,1,135,1,135,3,135,2459,8,135,1,135,1,135,
        3,135,2463,8,135,1,135,3,135,2466,8,135,1,136,1,136,1,136,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,3,136,2478,8,136,1,136,1,136,
        3,136,2482,8,136,1,136,3,136,2485,8,136,1,136,3,136,2488,8,136,1,
        137,1,137,1,137,5,137,2493,8,137,10,137,12,137,2496,9,137,1,137,
        1,137,1,137,4,137,2501,8,137,11,137,12,137,2502,3,137,2505,8,137,
        1,138,1,138,1,139,1,139,1,139,5,139,2512,8,139,10,139,12,139,2515,
        9,139,1,140,1,140,3,140,2519,8,140,1,140,1,140,3,140,2523,8,140,
        1,141,1,141,3,141,2527,8,141,1,141,1,141,3,141,2531,8,141,1,141,
        3,141,2534,8,141,1,142,1,142,1,142,1,143,1,143,1,144,1,144,3,144,
        2543,8,144,1,144,3,144,2546,8,144,1,144,1,144,3,144,2550,8,144,1,
        144,3,144,2553,8,144,1,145,1,145,1,146,1,146,1,147,1,147,1,148,1,
        148,1,149,1,149,1,150,3,150,2566,8,150,1,150,1,150,1,150,3,150,2571,
        8,150,1,150,3,150,2574,8,150,1,151,1,151,3,151,2578,8,151,1,151,
        1,151,3,151,2582,8,151,5,151,2584,8,151,10,151,12,151,2587,9,151,
        1,152,4,152,2590,8,152,11,152,12,152,2591,1,152,1,840,1,202,153,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
        254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,
        286,288,290,292,294,296,298,300,302,304,0,24,3,0,19,19,32,32,164,
        164,1,0,35,46,2,0,173,173,177,177,1,0,65,69,3,0,186,186,193,193,
        197,197,1,0,206,207,1,0,116,117,5,0,15,15,19,19,83,83,125,125,136,
        136,2,0,139,140,181,181,2,0,96,98,155,155,1,0,1,2,2,0,157,157,163,
        163,2,0,185,185,194,194,2,0,192,192,196,196,5,0,84,84,94,94,186,
        189,191,191,195,195,5,0,12,12,61,61,80,80,124,124,182,182,1,0,4,
        5,2,0,21,22,126,126,1,0,21,22,4,0,70,70,113,114,168,168,203,209,
        3,0,3,3,5,8,183,183,4,0,72,72,76,76,129,129,134,134,9,0,9,53,59,
        64,70,94,99,99,105,115,118,119,124,129,134,139,141,182,2,0,210,210,
        217,217,2990,0,306,1,0,0,0,2,310,1,0,0,0,4,366,1,0,0,0,6,373,1,0,
        0,0,8,393,1,0,0,0,10,418,1,0,0,0,12,422,1,0,0,0,14,449,1,0,0,0,16,
        462,1,0,0,0,18,466,1,0,0,0,20,468,1,0,0,0,22,493,1,0,0,0,24,495,
        1,0,0,0,26,519,1,0,0,0,28,598,1,0,0,0,30,600,1,0,0,0,32,613,1,0,
        0,0,34,615,1,0,0,0,36,619,1,0,0,0,38,623,1,0,0,0,40,644,1,0,0,0,
        42,662,1,0,0,0,44,679,1,0,0,0,46,692,1,0,0,0,48,732,1,0,0,0,50,748,
        1,0,0,0,52,796,1,0,0,0,54,798,1,0,0,0,56,803,1,0,0,0,58,817,1,0,
        0,0,60,830,1,0,0,0,62,843,1,0,0,0,64,850,1,0,0,0,66,860,1,0,0,0,
        68,862,1,0,0,0,70,874,1,0,0,0,72,895,1,0,0,0,74,935,1,0,0,0,76,969,
        1,0,0,0,78,991,1,0,0,0,80,995,1,0,0,0,82,1026,1,0,0,0,84,1028,1,
        0,0,0,86,1037,1,0,0,0,88,1039,1,0,0,0,90,1048,1,0,0,0,92,1053,1,
        0,0,0,94,1057,1,0,0,0,96,1072,1,0,0,0,98,1078,1,0,0,0,100,1095,1,
        0,0,0,102,1107,1,0,0,0,104,1120,1,0,0,0,106,1124,1,0,0,0,108,1143,
        1,0,0,0,110,1155,1,0,0,0,112,1169,1,0,0,0,114,1181,1,0,0,0,116,1197,
        1,0,0,0,118,1213,1,0,0,0,120,1223,1,0,0,0,122,1237,1,0,0,0,124,1241,
        1,0,0,0,126,1249,1,0,0,0,128,1259,1,0,0,0,130,1279,1,0,0,0,132,1299,
        1,0,0,0,134,1365,1,0,0,0,136,1384,1,0,0,0,138,1386,1,0,0,0,140,1402,
        1,0,0,0,142,1433,1,0,0,0,144,1457,1,0,0,0,146,1478,1,0,0,0,148,1500,
        1,0,0,0,150,1519,1,0,0,0,152,1524,1,0,0,0,154,1544,1,0,0,0,156,1561,
        1,0,0,0,158,1563,1,0,0,0,160,1571,1,0,0,0,162,1573,1,0,0,0,164,1577,
        1,0,0,0,166,1589,1,0,0,0,168,1601,1,0,0,0,170,1629,1,0,0,0,172,1641,
        1,0,0,0,174,1672,1,0,0,0,176,1674,1,0,0,0,178,1696,1,0,0,0,180,1698,
        1,0,0,0,182,1711,1,0,0,0,184,1723,1,0,0,0,186,1735,1,0,0,0,188,1740,
        1,0,0,0,190,1765,1,0,0,0,192,1778,1,0,0,0,194,1792,1,0,0,0,196,1815,
        1,0,0,0,198,1824,1,0,0,0,200,1828,1,0,0,0,202,1871,1,0,0,0,204,1941,
        1,0,0,0,206,1947,1,0,0,0,208,1953,1,0,0,0,210,1963,1,0,0,0,212,1972,
        1,0,0,0,214,1981,1,0,0,0,216,1995,1,0,0,0,218,2022,1,0,0,0,220,2031,
        1,0,0,0,222,2043,1,0,0,0,224,2057,1,0,0,0,226,2071,1,0,0,0,228,2077,
        1,0,0,0,230,2079,1,0,0,0,232,2112,1,0,0,0,234,2151,1,0,0,0,236,2154,
        1,0,0,0,238,2180,1,0,0,0,240,2201,1,0,0,0,242,2203,1,0,0,0,244,2224,
        1,0,0,0,246,2260,1,0,0,0,248,2283,1,0,0,0,250,2299,1,0,0,0,252,2313,
        1,0,0,0,254,2333,1,0,0,0,256,2344,1,0,0,0,258,2349,1,0,0,0,260,2376,
        1,0,0,0,262,2412,1,0,0,0,264,2418,1,0,0,0,266,2437,1,0,0,0,268,2448,
        1,0,0,0,270,2452,1,0,0,0,272,2487,1,0,0,0,274,2504,1,0,0,0,276,2506,
        1,0,0,0,278,2508,1,0,0,0,280,2516,1,0,0,0,282,2524,1,0,0,0,284,2535,
        1,0,0,0,286,2538,1,0,0,0,288,2542,1,0,0,0,290,2554,1,0,0,0,292,2556,
        1,0,0,0,294,2558,1,0,0,0,296,2560,1,0,0,0,298,2562,1,0,0,0,300,2565,
        1,0,0,0,302,2585,1,0,0,0,304,2589,1,0,0,0,306,307,3,2,1,0,307,308,
        5,0,0,1,308,1,1,0,0,0,309,311,5,217,0,0,310,309,1,0,0,0,310,311,
        1,0,0,0,311,315,1,0,0,0,312,314,3,300,150,0,313,312,1,0,0,0,314,
        317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,325,1,0,0,0,317,
        315,1,0,0,0,318,322,3,4,2,0,319,321,3,300,150,0,320,319,1,0,0,0,
        321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,326,1,0,0,0,
        324,322,1,0,0,0,325,318,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,
        327,329,3,6,3,0,328,327,1,0,0,0,328,329,1,0,0,0,329,333,1,0,0,0,
        330,332,3,300,150,0,331,330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,
        0,0,333,334,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,336,338,3,10,
        5,0,337,336,1,0,0,0,337,338,1,0,0,0,338,342,1,0,0,0,339,341,3,300,
        150,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,
        0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,345,347,3,12,6,0,346,345,1,
        0,0,0,346,347,1,0,0,0,347,351,1,0,0,0,348,350,3,300,150,0,349,348,
        1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,355,
        1,0,0,0,353,351,1,0,0,0,354,356,3,20,10,0,355,354,1,0,0,0,355,356,
        1,0,0,0,356,360,1,0,0,0,357,359,3,300,150,0,358,357,1,0,0,0,359,
        362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,364,1,0,0,0,362,
        360,1,0,0,0,363,365,5,217,0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,
        3,1,0,0,0,366,367,5,175,0,0,367,368,5,217,0,0,368,371,5,208,0,0,
        369,370,5,217,0,0,370,372,5,28,0,0,371,369,1,0,0,0,371,372,1,0,0,
        0,372,5,1,0,0,0,373,378,5,17,0,0,374,375,5,217,0,0,375,376,5,202,
        0,0,376,377,5,217,0,0,377,379,3,268,134,0,378,374,1,0,0,0,378,379,
        1,0,0,0,379,383,1,0,0,0,380,382,3,300,150,0,381,380,1,0,0,0,382,
        385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,387,1,0,0,0,385,
        383,1,0,0,0,386,388,3,8,4,0,387,386,1,0,0,0,388,389,1,0,0,0,389,
        387,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,392,5,59,0,0,392,
        7,1,0,0,0,393,395,3,268,134,0,394,396,5,217,0,0,395,394,1,0,0,0,
        395,396,1,0,0,0,396,397,1,0,0,0,397,399,5,186,0,0,398,400,5,217,
        0,0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,404,3,286,
        143,0,402,403,5,215,0,0,403,405,3,286,143,0,404,402,1,0,0,0,404,
        405,1,0,0,0,405,409,1,0,0,0,406,408,3,300,150,0,407,406,1,0,0,0,
        408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,9,1,0,0,0,411,
        409,1,0,0,0,412,414,3,24,12,0,413,415,3,300,150,0,414,413,1,0,0,
        0,415,416,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,
        0,418,412,1,0,0,0,419,420,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,
        0,421,11,1,0,0,0,422,432,3,16,8,0,423,425,3,300,150,0,424,423,1,
        0,0,0,425,426,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,428,1,
        0,0,0,428,429,3,16,8,0,429,431,1,0,0,0,430,424,1,0,0,0,431,434,1,
        0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,438,1,0,0,0,434,432,1,
        0,0,0,435,437,3,300,150,0,436,435,1,0,0,0,437,440,1,0,0,0,438,436,
        1,0,0,0,438,439,1,0,0,0,439,13,1,0,0,0,440,438,1,0,0,0,441,442,5,
        120,0,0,442,443,5,217,0,0,443,450,5,206,0,0,444,445,5,122,0,0,445,
        446,5,217,0,0,446,450,7,0,0,0,447,450,5,121,0,0,448,450,5,123,0,
        0,449,441,1,0,0,0,449,444,1,0,0,0,449,447,1,0,0,0,449,448,1,0,0,
        0,450,15,1,0,0,0,451,463,3,298,149,0,452,463,3,46,23,0,453,463,3,
        56,28,0,454,463,3,64,32,0,455,463,3,40,20,0,456,463,3,92,46,0,457,
        463,3,212,106,0,458,463,3,14,7,0,459,463,3,192,96,0,460,463,3,48,
        24,0,461,463,3,18,9,0,462,451,1,0,0,0,462,452,1,0,0,0,462,453,1,
        0,0,0,462,454,1,0,0,0,462,455,1,0,0,0,462,456,1,0,0,0,462,457,1,
        0,0,0,462,458,1,0,0,0,462,459,1,0,0,0,462,460,1,0,0,0,462,461,1,
        0,0,0,463,17,1,0,0,0,464,467,3,110,55,0,465,467,3,112,56,0,466,464,
        1,0,0,0,466,465,1,0,0,0,467,19,1,0,0,0,468,478,3,22,11,0,469,471,
        3,300,150,0,470,469,1,0,0,0,471,472,1,0,0,0,472,470,1,0,0,0,472,
        473,1,0,0,0,473,474,1,0,0,0,474,475,3,22,11,0,475,477,1,0,0,0,476,
        470,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,
        484,1,0,0,0,480,478,1,0,0,0,481,483,3,300,150,0,482,481,1,0,0,0,
        483,486,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,21,1,0,0,0,486,
        484,1,0,0,0,487,494,3,74,37,0,488,494,3,140,70,0,489,494,3,142,71,
        0,490,494,3,144,72,0,491,494,3,188,94,0,492,494,3,18,9,0,493,487,
        1,0,0,0,493,488,1,0,0,0,493,489,1,0,0,0,493,490,1,0,0,0,493,491,
        1,0,0,0,493,492,1,0,0,0,494,23,1,0,0,0,495,496,5,13,0,0,496,497,
        5,217,0,0,497,499,3,240,120,0,498,500,5,217,0,0,499,498,1,0,0,0,
        499,500,1,0,0,0,500,501,1,0,0,0,501,503,5,186,0,0,502,504,5,217,
        0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,505,1,0,0,0,505,516,3,286,
        143,0,506,508,5,217,0,0,507,506,1,0,0,0,507,508,1,0,0,0,508,509,
        1,0,0,0,509,511,5,1,0,0,510,512,5,217,0,0,511,510,1,0,0,0,511,512,
        1,0,0,0,512,513,1,0,0,0,513,515,3,286,143,0,514,507,1,0,0,0,515,
        518,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,25,1,0,0,0,518,516,
        1,0,0,0,519,525,3,28,14,0,520,521,3,302,151,0,521,522,3,28,14,0,
        522,524,1,0,0,0,523,520,1,0,0,0,524,527,1,0,0,0,525,523,1,0,0,0,
        525,526,1,0,0,0,526,528,1,0,0,0,527,525,1,0,0,0,528,529,3,302,151,
        0,529,27,1,0,0,0,530,599,3,284,142,0,531,599,3,30,15,0,532,599,3,
        24,12,0,533,599,3,32,16,0,534,599,3,34,17,0,535,599,3,36,18,0,536,
        599,3,38,19,0,537,599,3,40,20,0,538,599,3,44,22,0,539,599,3,50,25,
        0,540,599,3,52,26,0,541,599,3,54,27,0,542,599,3,60,30,0,543,599,
        3,62,31,0,544,599,3,66,33,0,545,599,3,228,114,0,546,599,3,68,34,
        0,547,599,3,70,35,0,548,599,3,72,36,0,549,599,3,76,38,0,550,599,
        3,78,39,0,551,599,3,80,40,0,552,599,3,82,41,0,553,599,3,92,46,0,
        554,599,3,94,47,0,555,599,3,96,48,0,556,599,3,98,49,0,557,599,3,
        100,50,0,558,599,3,102,51,0,559,599,3,104,52,0,560,599,3,106,53,
        0,561,599,3,108,54,0,562,599,3,18,9,0,563,599,3,120,60,0,564,599,
        3,122,61,0,565,599,3,124,62,0,566,599,3,126,63,0,567,599,3,128,64,
        0,568,599,3,130,65,0,569,599,3,132,66,0,570,599,3,138,69,0,571,599,
        3,146,73,0,572,599,3,148,74,0,573,599,3,150,75,0,574,599,3,152,76,
        0,575,599,3,156,78,0,576,599,3,158,79,0,577,599,3,160,80,0,578,599,
        3,162,81,0,579,599,3,164,82,0,580,599,3,166,83,0,581,599,3,168,84,
        0,582,599,3,170,85,0,583,599,3,172,86,0,584,599,3,180,90,0,585,599,
        3,182,91,0,586,599,3,184,92,0,587,599,3,186,93,0,588,599,3,190,95,
        0,589,599,3,198,99,0,590,599,3,200,100,0,591,599,3,212,106,0,592,
        599,3,218,109,0,593,599,3,220,110,0,594,599,3,222,111,0,595,599,
        3,224,112,0,596,599,3,234,117,0,597,599,3,240,120,0,598,530,1,0,
        0,0,598,531,1,0,0,0,598,532,1,0,0,0,598,533,1,0,0,0,598,534,1,0,
        0,0,598,535,1,0,0,0,598,536,1,0,0,0,598,537,1,0,0,0,598,538,1,0,
        0,0,598,539,1,0,0,0,598,540,1,0,0,0,598,541,1,0,0,0,598,542,1,0,
        0,0,598,543,1,0,0,0,598,544,1,0,0,0,598,545,1,0,0,0,598,546,1,0,
        0,0,598,547,1,0,0,0,598,548,1,0,0,0,598,549,1,0,0,0,598,550,1,0,
        0,0,598,551,1,0,0,0,598,552,1,0,0,0,598,553,1,0,0,0,598,554,1,0,
        0,0,598,555,1,0,0,0,598,556,1,0,0,0,598,557,1,0,0,0,598,558,1,0,
        0,0,598,559,1,0,0,0,598,560,1,0,0,0,598,561,1,0,0,0,598,562,1,0,
        0,0,598,563,1,0,0,0,598,564,1,0,0,0,598,565,1,0,0,0,598,566,1,0,
        0,0,598,567,1,0,0,0,598,568,1,0,0,0,598,569,1,0,0,0,598,570,1,0,
        0,0,598,571,1,0,0,0,598,572,1,0,0,0,598,573,1,0,0,0,598,574,1,0,
        0,0,598,575,1,0,0,0,598,576,1,0,0,0,598,577,1,0,0,0,598,578,1,0,
        0,0,598,579,1,0,0,0,598,580,1,0,0,0,598,581,1,0,0,0,598,582,1,0,
        0,0,598,583,1,0,0,0,598,584,1,0,0,0,598,585,1,0,0,0,598,586,1,0,
        0,0,598,587,1,0,0,0,598,588,1,0,0,0,598,589,1,0,0,0,598,590,1,0,
        0,0,598,591,1,0,0,0,598,592,1,0,0,0,598,593,1,0,0,0,598,594,1,0,
        0,0,598,595,1,0,0,0,598,596,1,0,0,0,598,597,1,0,0,0,599,29,1,0,0,
        0,600,601,5,14,0,0,601,602,5,217,0,0,602,611,3,202,101,0,603,605,
        5,217,0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,608,
        5,1,0,0,607,609,5,217,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,
        1,0,0,0,610,612,3,202,101,0,611,604,1,0,0,0,611,612,1,0,0,0,612,
        31,1,0,0,0,613,614,5,18,0,0,614,33,1,0,0,0,615,616,5,26,0,0,616,
        617,5,217,0,0,617,618,3,202,101,0,618,35,1,0,0,0,619,620,5,27,0,
        0,620,621,5,217,0,0,621,622,3,202,101,0,622,37,1,0,0,0,623,639,5,
        29,0,0,624,625,5,217,0,0,625,636,3,226,113,0,626,628,5,217,0,0,627,
        626,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,631,5,1,0,0,630,
        632,5,217,0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,
        635,3,226,113,0,634,627,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,
        636,637,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,639,624,1,0,0,0,
        639,640,1,0,0,0,640,39,1,0,0,0,641,642,3,292,146,0,642,643,5,217,
        0,0,643,645,1,0,0,0,644,641,1,0,0,0,644,645,1,0,0,0,645,646,1,0,
        0,0,646,647,5,31,0,0,647,648,5,217,0,0,648,659,3,42,21,0,649,651,
        5,217,0,0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,654,
        5,1,0,0,653,655,5,217,0,0,654,653,1,0,0,0,654,655,1,0,0,0,655,656,
        1,0,0,0,656,658,3,42,21,0,657,650,1,0,0,0,658,661,1,0,0,0,659,657,
        1,0,0,0,659,660,1,0,0,0,660,41,1,0,0,0,661,659,1,0,0,0,662,664,3,
        268,134,0,663,665,3,290,145,0,664,663,1,0,0,0,664,665,1,0,0,0,665,
        668,1,0,0,0,666,667,5,217,0,0,667,669,3,270,135,0,668,666,1,0,0,
        0,668,669,1,0,0,0,669,671,1,0,0,0,670,672,5,217,0,0,671,670,1,0,
        0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,675,5,186,0,0,674,676,5,
        217,0,0,675,674,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,678,
        3,202,101,0,678,43,1,0,0,0,679,681,5,33,0,0,680,682,5,217,0,0,681,
        680,1,0,0,0,681,682,1,0,0,0,682,683,1,0,0,0,683,685,5,186,0,0,684,
        686,5,217,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,687,
        688,3,202,101,0,688,45,1,0,0,0,689,690,3,292,146,0,690,691,5,217,
        0,0,691,693,1,0,0,0,692,689,1,0,0,0,692,693,1,0,0,0,693,694,1,0,
        0,0,694,695,5,34,0,0,695,698,5,217,0,0,696,697,5,133,0,0,697,699,
        5,217,0,0,698,696,1,0,0,0,698,699,1,0,0,0,699,705,1,0,0,0,700,702,
        5,74,0,0,701,703,3,290,145,0,702,701,1,0,0,0,702,703,1,0,0,0,703,
        706,1,0,0,0,704,706,5,162,0,0,705,700,1,0,0,0,705,704,1,0,0,0,706,
        707,1,0,0,0,707,708,5,217,0,0,708,710,3,268,134,0,709,711,3,290,
        145,0,710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,713,5,
        217,0,0,713,714,5,93,0,0,714,715,5,217,0,0,715,720,5,203,0,0,716,
        717,5,217,0,0,717,718,5,11,0,0,718,719,5,217,0,0,719,721,5,203,0,
        0,720,716,1,0,0,0,720,721,1,0,0,0,721,726,1,0,0,0,722,724,5,217,
        0,0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,727,3,258,
        129,0,726,723,1,0,0,0,726,727,1,0,0,0,727,730,1,0,0,0,728,729,5,
        217,0,0,729,731,3,270,135,0,730,728,1,0,0,0,730,731,1,0,0,0,731,
        47,1,0,0,0,732,733,7,1,0,0,733,734,5,217,0,0,734,745,3,282,141,0,
        735,737,5,217,0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,
        0,738,740,5,1,0,0,739,741,5,217,0,0,740,739,1,0,0,0,740,741,1,0,
        0,0,741,742,1,0,0,0,742,744,3,282,141,0,743,736,1,0,0,0,744,747,
        1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,49,1,0,0,0,747,745,1,
        0,0,0,748,749,5,47,0,0,749,750,5,217,0,0,750,752,3,202,101,0,751,
        753,5,217,0,0,752,751,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,
        756,5,1,0,0,755,757,5,217,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,
        758,1,0,0,0,758,767,3,202,101,0,759,761,5,217,0,0,760,759,1,0,0,
        0,760,761,1,0,0,0,761,762,1,0,0,0,762,764,5,1,0,0,763,765,5,217,
        0,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,768,3,202,
        101,0,767,760,1,0,0,0,767,768,1,0,0,0,768,51,1,0,0,0,769,770,5,49,
        0,0,770,772,3,302,151,0,771,773,3,26,13,0,772,771,1,0,0,0,772,773,
        1,0,0,0,773,774,1,0,0,0,774,775,5,90,0,0,775,797,1,0,0,0,776,777,
        5,49,0,0,777,778,5,217,0,0,778,779,7,2,0,0,779,780,5,217,0,0,780,
        781,3,202,101,0,781,783,3,302,151,0,782,784,3,26,13,0,783,782,1,
        0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,785,786,5,90,0,0,786,797,1,
        0,0,0,787,788,5,49,0,0,788,789,3,302,151,0,789,790,3,26,13,0,790,
        791,5,90,0,0,791,792,5,217,0,0,792,793,7,2,0,0,793,794,5,217,0,0,
        794,795,3,202,101,0,795,797,1,0,0,0,796,769,1,0,0,0,796,776,1,0,
        0,0,796,787,1,0,0,0,797,53,1,0,0,0,798,799,5,59,0,0,799,55,1,0,0,
        0,800,801,3,292,146,0,801,802,5,217,0,0,802,804,1,0,0,0,803,800,
        1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,806,5,60,0,0,806,807,
        5,217,0,0,807,808,3,268,134,0,808,812,3,302,151,0,809,811,3,58,29,
        0,810,809,1,0,0,0,811,814,1,0,0,0,812,810,1,0,0,0,812,813,1,0,0,
        0,813,815,1,0,0,0,814,812,1,0,0,0,815,816,5,54,0,0,816,57,1,0,0,
        0,817,826,3,268,134,0,818,820,5,217,0,0,819,818,1,0,0,0,819,820,
        1,0,0,0,820,821,1,0,0,0,821,823,5,186,0,0,822,824,5,217,0,0,823,
        822,1,0,0,0,823,824,1,0,0,0,824,825,1,0,0,0,825,827,3,202,101,0,
        826,819,1,0,0,0,826,827,1,0,0,0,827,828,1,0,0,0,828,829,3,302,151,
        0,829,59,1,0,0,0,830,831,5,62,0,0,831,832,5,217,0,0,832,840,3,202,
        101,0,833,835,5,1,0,0,834,836,5,217,0,0,835,834,1,0,0,0,835,836,
        1,0,0,0,836,837,1,0,0,0,837,839,3,202,101,0,838,833,1,0,0,0,839,
        842,1,0,0,0,840,841,1,0,0,0,840,838,1,0,0,0,841,61,1,0,0,0,842,840,
        1,0,0,0,843,844,5,63,0,0,844,845,5,217,0,0,845,846,3,202,101,0,846,
        63,1,0,0,0,847,848,3,292,146,0,848,849,5,217,0,0,849,851,1,0,0,0,
        850,847,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,853,5,64,0,0,
        853,854,5,217,0,0,854,856,3,268,134,0,855,857,5,217,0,0,856,855,
        1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,858,859,3,258,129,0,859,
        65,1,0,0,0,860,861,7,3,0,0,861,67,1,0,0,0,862,863,5,71,0,0,863,864,
        5,217,0,0,864,866,3,202,101,0,865,867,5,217,0,0,866,865,1,0,0,0,
        866,867,1,0,0,0,867,868,1,0,0,0,868,870,5,1,0,0,869,871,5,217,0,
        0,870,869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,873,3,202,
        101,0,873,69,1,0,0,0,874,875,5,73,0,0,875,876,5,217,0,0,876,877,
        5,51,0,0,877,878,5,217,0,0,878,880,3,268,134,0,879,881,3,290,145,
        0,880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,883,5,217,
        0,0,883,884,5,82,0,0,884,885,5,217,0,0,885,886,3,202,101,0,886,888,
        3,302,151,0,887,889,3,26,13,0,888,887,1,0,0,0,888,889,1,0,0,0,889,
        890,1,0,0,0,890,893,5,110,0,0,891,892,5,217,0,0,892,894,3,268,134,
        0,893,891,1,0,0,0,893,894,1,0,0,0,894,71,1,0,0,0,895,896,5,73,0,
        0,896,897,5,217,0,0,897,899,3,268,134,0,898,900,3,290,145,0,899,
        898,1,0,0,0,899,900,1,0,0,0,900,903,1,0,0,0,901,902,5,217,0,0,902,
        904,3,270,135,0,903,901,1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,
        905,907,5,217,0,0,906,905,1,0,0,0,906,907,1,0,0,0,907,908,1,0,0,
        0,908,910,5,186,0,0,909,911,5,217,0,0,910,909,1,0,0,0,910,911,1,
        0,0,0,911,912,1,0,0,0,912,913,3,202,101,0,913,914,5,217,0,0,914,
        915,5,167,0,0,915,916,5,217,0,0,916,921,3,202,101,0,917,918,5,217,
        0,0,918,919,5,159,0,0,919,920,5,217,0,0,920,922,3,202,101,0,921,
        917,1,0,0,0,921,922,1,0,0,0,922,923,1,0,0,0,923,925,3,302,151,0,
        924,926,3,26,13,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,
        0,927,930,5,110,0,0,928,929,5,217,0,0,929,931,3,268,134,0,930,928,
        1,0,0,0,930,931,1,0,0,0,931,73,1,0,0,0,932,933,3,292,146,0,933,934,
        5,217,0,0,934,936,1,0,0,0,935,932,1,0,0,0,935,936,1,0,0,0,936,939,
        1,0,0,0,937,938,5,158,0,0,938,940,5,217,0,0,939,937,1,0,0,0,939,
        940,1,0,0,0,940,941,1,0,0,0,941,943,5,74,0,0,942,944,5,217,0,0,943,
        942,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,947,3,268,134,0,
        946,948,3,290,145,0,947,946,1,0,0,0,947,948,1,0,0,0,948,953,1,0,
        0,0,949,951,5,217,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,
        0,0,0,952,954,3,258,129,0,953,950,1,0,0,0,953,954,1,0,0,0,954,959,
        1,0,0,0,955,957,5,217,0,0,956,955,1,0,0,0,956,957,1,0,0,0,957,958,
        1,0,0,0,958,960,3,270,135,0,959,956,1,0,0,0,959,960,1,0,0,0,960,
        961,1,0,0,0,961,963,3,302,151,0,962,964,3,26,13,0,963,962,1,0,0,
        0,963,964,1,0,0,0,964,965,1,0,0,0,965,966,5,59,0,0,966,967,3,304,
        152,0,967,968,5,74,0,0,968,75,1,0,0,0,969,970,5,75,0,0,970,971,5,
        217,0,0,971,973,3,226,113,0,972,974,5,217,0,0,973,972,1,0,0,0,973,
        974,1,0,0,0,974,975,1,0,0,0,975,977,5,1,0,0,976,978,5,217,0,0,977,
        976,1,0,0,0,977,978,1,0,0,0,978,980,1,0,0,0,979,981,3,202,101,0,
        980,979,1,0,0,0,980,981,1,0,0,0,981,983,1,0,0,0,982,984,5,217,0,
        0,983,982,1,0,0,0,983,984,1,0,0,0,984,985,1,0,0,0,985,987,5,1,0,
        0,986,988,5,217,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,1,0,
        0,0,989,990,3,202,101,0,990,77,1,0,0,0,991,992,5,77,0,0,992,993,
        5,217,0,0,993,994,3,202,101,0,994,79,1,0,0,0,995,996,5,78,0,0,996,
        997,5,217,0,0,997,998,3,202,101,0,998,81,1,0,0,0,999,1000,5,79,0,
        0,1000,1001,5,217,0,0,1001,1002,3,86,43,0,1002,1003,5,217,0,0,1003,
        1004,5,165,0,0,1004,1005,5,217,0,0,1005,1010,3,28,14,0,1006,1007,
        5,217,0,0,1007,1008,5,52,0,0,1008,1009,5,217,0,0,1009,1011,3,28,
        14,0,1010,1006,1,0,0,0,1010,1011,1,0,0,0,1011,1027,1,0,0,0,1012,
        1016,3,84,42,0,1013,1015,3,88,44,0,1014,1013,1,0,0,0,1015,1018,1,
        0,0,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,1020,1,0,0,0,1018,
        1016,1,0,0,0,1019,1021,3,90,45,0,1020,1019,1,0,0,0,1020,1021,1,0,
        0,0,1021,1022,1,0,0,0,1022,1023,5,59,0,0,1023,1024,3,304,152,0,1024,
        1025,5,79,0,0,1025,1027,1,0,0,0,1026,999,1,0,0,0,1026,1012,1,0,0,
        0,1027,83,1,0,0,0,1028,1029,5,79,0,0,1029,1030,5,217,0,0,1030,1031,
        3,86,43,0,1031,1032,5,217,0,0,1032,1033,5,165,0,0,1033,1035,3,302,
        151,0,1034,1036,3,26,13,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,
        85,1,0,0,0,1037,1038,3,202,101,0,1038,87,1,0,0,0,1039,1040,5,53,
        0,0,1040,1041,5,217,0,0,1041,1042,3,86,43,0,1042,1043,5,217,0,0,
        1043,1044,5,165,0,0,1044,1046,3,302,151,0,1045,1047,3,26,13,0,1046,
        1045,1,0,0,0,1046,1047,1,0,0,0,1047,89,1,0,0,0,1048,1049,5,52,0,
        0,1049,1051,3,302,151,0,1050,1052,3,26,13,0,1051,1050,1,0,0,0,1051,
        1052,1,0,0,0,1052,91,1,0,0,0,1053,1054,5,81,0,0,1054,1055,5,217,
        0,0,1055,1056,3,268,134,0,1056,93,1,0,0,0,1057,1058,5,83,0,0,1058,
        1059,5,217,0,0,1059,1068,3,226,113,0,1060,1062,5,217,0,0,1061,1060,
        1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1065,5,1,0,0,1064,
        1066,5,217,0,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,1067,1,0,
        0,0,1067,1069,3,202,101,0,1068,1061,1,0,0,0,1069,1070,1,0,0,0,1070,
        1068,1,0,0,0,1070,1071,1,0,0,0,1071,95,1,0,0,0,1072,1073,5,86,0,
        0,1073,1074,5,217,0,0,1074,1075,3,202,101,0,1075,97,1,0,0,0,1076,
        1077,5,92,0,0,1077,1079,5,217,0,0,1078,1076,1,0,0,0,1078,1079,1,
        0,0,0,1079,1080,1,0,0,0,1080,1082,3,240,120,0,1081,1083,5,217,0,
        0,1082,1081,1,0,0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,0,1084,1086,
        7,4,0,0,1085,1087,5,217,0,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,
        1087,1089,1,0,0,0,1088,1090,3,290,145,0,1089,1088,1,0,0,0,1089,1090,
        1,0,0,0,1090,1091,1,0,0,0,1091,1093,3,202,101,0,1092,1094,3,290,
        145,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,99,1,0,0,0,1095,1096,
        5,95,0,0,1096,1097,5,217,0,0,1097,1099,3,226,113,0,1098,1100,5,217,
        0,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,1100,1101,1,0,0,0,1101,1103,
        5,1,0,0,1102,1104,5,217,0,0,1103,1102,1,0,0,0,1103,1104,1,0,0,0,
        1104,1105,1,0,0,0,1105,1106,3,202,101,0,1106,101,1,0,0,0,1107,1109,
        7,5,0,0,1108,1110,5,211,0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,
        1110,1112,1,0,0,0,1111,1113,5,215,0,0,1112,1111,1,0,0,0,1112,1113,
        1,0,0,0,1113,1115,1,0,0,0,1114,1116,5,211,0,0,1115,1114,1,0,0,0,
        1115,1116,1,0,0,0,1116,1118,1,0,0,0,1117,1119,5,217,0,0,1118,1117,
        1,0,0,0,1118,1119,1,0,0,0,1119,103,1,0,0,0,1120,1121,5,87,0,0,1121,
        1122,5,217,0,0,1122,1123,3,202,101,0,1123,105,1,0,0,0,1124,1125,
        5,88,0,0,1125,1126,5,217,0,0,1126,1141,3,202,101,0,1127,1129,5,217,
        0,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,1129,1130,1,0,0,0,1130,1132,
        5,1,0,0,1131,1133,5,217,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,
        1133,1134,1,0,0,0,1134,1139,3,202,101,0,1135,1136,5,217,0,0,1136,
        1137,5,167,0,0,1137,1138,5,217,0,0,1138,1140,3,202,101,0,1139,1135,
        1,0,0,0,1139,1140,1,0,0,0,1140,1142,1,0,0,0,1141,1128,1,0,0,0,1141,
        1142,1,0,0,0,1142,107,1,0,0,0,1143,1144,5,99,0,0,1144,1145,5,217,
        0,0,1145,1147,3,240,120,0,1146,1148,5,217,0,0,1147,1146,1,0,0,0,
        1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,1151,5,186,0,0,1150,1152,
        5,217,0,0,1151,1150,1,0,0,0,1151,1152,1,0,0,0,1152,1153,1,0,0,0,
        1153,1154,3,202,101,0,1154,109,1,0,0,0,1155,1157,5,100,0,0,1156,
        1158,5,217,0,0,1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,
        0,0,1159,1161,3,268,134,0,1160,1162,5,217,0,0,1161,1160,1,0,0,0,
        1161,1162,1,0,0,0,1162,1163,1,0,0,0,1163,1165,5,186,0,0,1164,1166,
        5,217,0,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,1167,1,0,0,0,
        1167,1168,3,202,101,0,1168,111,1,0,0,0,1169,1173,3,114,57,0,1170,
        1172,3,116,58,0,1171,1170,1,0,0,0,1172,1175,1,0,0,0,1173,1171,1,
        0,0,0,1173,1174,1,0,0,0,1174,1177,1,0,0,0,1175,1173,1,0,0,0,1176,
        1178,3,118,59,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1179,1,
        0,0,0,1179,1180,5,104,0,0,1180,113,1,0,0,0,1181,1183,5,101,0,0,1182,
        1184,5,217,0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,
        0,0,1185,1186,3,86,43,0,1186,1187,5,217,0,0,1187,1188,5,165,0,0,
        1188,1194,3,302,151,0,1189,1193,3,12,6,0,1190,1193,3,20,10,0,1191,
        1193,3,26,13,0,1192,1189,1,0,0,0,1192,1190,1,0,0,0,1192,1191,1,0,
        0,0,1193,1196,1,0,0,0,1194,1192,1,0,0,0,1194,1195,1,0,0,0,1195,115,
        1,0,0,0,1196,1194,1,0,0,0,1197,1199,5,102,0,0,1198,1200,5,217,0,
        0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,1201,1,0,0,0,1201,1202,
        3,86,43,0,1202,1203,5,217,0,0,1203,1204,5,165,0,0,1204,1210,3,302,
        151,0,1205,1209,3,12,6,0,1206,1209,3,20,10,0,1207,1209,3,26,13,0,
        1208,1205,1,0,0,0,1208,1206,1,0,0,0,1208,1207,1,0,0,0,1209,1212,
        1,0,0,0,1210,1208,1,0,0,0,1210,1211,1,0,0,0,1211,117,1,0,0,0,1212,
        1210,1,0,0,0,1213,1214,5,103,0,0,1214,1220,3,302,151,0,1215,1219,
        3,12,6,0,1216,1219,3,20,10,0,1217,1219,3,26,13,0,1218,1215,1,0,0,
        0,1218,1216,1,0,0,0,1218,1217,1,0,0,0,1219,1222,1,0,0,0,1220,1218,
        1,0,0,0,1220,1221,1,0,0,0,1221,119,1,0,0,0,1222,1220,1,0,0,0,1223,
        1225,5,106,0,0,1224,1226,5,217,0,0,1225,1224,1,0,0,0,1225,1226,1,
        0,0,0,1226,1227,1,0,0,0,1227,1229,5,190,0,0,1228,1230,5,217,0,0,
        1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,1233,
        3,252,126,0,1232,1234,5,217,0,0,1233,1232,1,0,0,0,1233,1234,1,0,
        0,0,1234,1235,1,0,0,0,1235,1236,5,199,0,0,1236,121,1,0,0,0,1237,
        1238,5,107,0,0,1238,1239,5,217,0,0,1239,1240,3,202,101,0,1240,123,
        1,0,0,0,1241,1242,5,109,0,0,1242,1243,5,217,0,0,1243,1244,3,202,
        101,0,1244,1245,5,217,0,0,1245,1246,5,16,0,0,1246,1247,5,217,0,0,
        1247,1248,3,202,101,0,1248,125,1,0,0,0,1249,1250,7,6,0,0,1250,1257,
        5,217,0,0,1251,1252,5,78,0,0,1252,1253,5,217,0,0,1253,1258,3,202,
        101,0,1254,1255,5,144,0,0,1255,1256,5,217,0,0,1256,1258,5,110,0,
        0,1257,1251,1,0,0,0,1257,1254,1,0,0,0,1258,127,1,0,0,0,1259,1260,
        5,115,0,0,1260,1261,5,217,0,0,1261,1262,3,202,101,0,1262,1263,5,
        217,0,0,1263,1264,5,78,0,0,1264,1265,5,217,0,0,1265,1276,3,202,101,
        0,1266,1268,5,217,0,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,
        1,0,0,0,1269,1271,5,1,0,0,1270,1272,5,217,0,0,1271,1270,1,0,0,0,
        1271,1272,1,0,0,0,1272,1273,1,0,0,0,1273,1275,3,202,101,0,1274,1267,
        1,0,0,0,1275,1278,1,0,0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,0,1277,
        129,1,0,0,0,1278,1276,1,0,0,0,1279,1280,5,115,0,0,1280,1281,5,217,
        0,0,1281,1282,3,202,101,0,1282,1283,5,217,0,0,1283,1284,5,77,0,0,
        1284,1285,5,217,0,0,1285,1296,3,202,101,0,1286,1288,5,217,0,0,1287,
        1286,1,0,0,0,1287,1288,1,0,0,0,1288,1289,1,0,0,0,1289,1291,5,1,0,
        0,1290,1292,5,217,0,0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,1292,1293,
        1,0,0,0,1293,1295,3,202,101,0,1294,1287,1,0,0,0,1295,1298,1,0,0,
        0,1296,1294,1,0,0,0,1296,1297,1,0,0,0,1297,131,1,0,0,0,1298,1296,
        1,0,0,0,1299,1300,5,118,0,0,1300,1301,5,217,0,0,1301,1302,3,202,
        101,0,1302,1303,5,217,0,0,1303,1304,5,73,0,0,1304,1305,5,217,0,0,
        1305,1310,7,7,0,0,1306,1307,5,217,0,0,1307,1308,5,9,0,0,1308,1309,
        5,217,0,0,1309,1311,7,8,0,0,1310,1306,1,0,0,0,1310,1311,1,0,0,0,
        1311,1314,1,0,0,0,1312,1313,5,217,0,0,1313,1315,7,9,0,0,1314,1312,
        1,0,0,0,1314,1315,1,0,0,0,1315,1316,1,0,0,0,1316,1317,5,217,0,0,
        1317,1318,5,16,0,0,1318,1319,5,217,0,0,1319,1330,3,226,113,0,1320,
        1321,5,217,0,0,1321,1323,5,91,0,0,1322,1324,5,217,0,0,1323,1322,
        1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,1327,5,186,0,0,
        1326,1328,5,217,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,
        1,0,0,0,1329,1331,3,202,101,0,1330,1320,1,0,0,0,1330,1331,1,0,0,
        0,1331,133,1,0,0,0,1332,1345,3,136,68,0,1333,1335,5,217,0,0,1334,
        1333,1,0,0,0,1334,1335,1,0,0,0,1335,1336,1,0,0,0,1336,1338,7,10,
        0,0,1337,1339,5,217,0,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,
        1341,1,0,0,0,1340,1342,3,136,68,0,1341,1340,1,0,0,0,1341,1342,1,
        0,0,0,1342,1344,1,0,0,0,1343,1334,1,0,0,0,1344,1347,1,0,0,0,1345,
        1343,1,0,0,0,1345,1346,1,0,0,0,1346,1366,1,0,0,0,1347,1345,1,0,0,
        0,1348,1350,3,136,68,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,
        1361,1,0,0,0,1351,1353,5,217,0,0,1352,1351,1,0,0,0,1352,1353,1,0,
        0,0,1353,1354,1,0,0,0,1354,1356,7,10,0,0,1355,1357,5,217,0,0,1356,
        1355,1,0,0,0,1356,1357,1,0,0,0,1357,1359,1,0,0,0,1358,1360,3,136,
        68,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1362,1,0,0,0,1361,
        1352,1,0,0,0,1362,1363,1,0,0,0,1363,1361,1,0,0,0,1363,1364,1,0,0,
        0,1364,1366,1,0,0,0,1365,1332,1,0,0,0,1365,1349,1,0,0,0,1366,135,
        1,0,0,0,1367,1385,3,202,101,0,1368,1382,7,11,0,0,1369,1371,5,217,
        0,0,1370,1369,1,0,0,0,1370,1371,1,0,0,0,1371,1372,1,0,0,0,1372,1374,
        5,190,0,0,1373,1375,5,217,0,0,1374,1373,1,0,0,0,1374,1375,1,0,0,
        0,1375,1376,1,0,0,0,1376,1378,3,252,126,0,1377,1379,5,217,0,0,1378,
        1377,1,0,0,0,1378,1379,1,0,0,0,1379,1380,1,0,0,0,1380,1381,5,199,
        0,0,1381,1383,1,0,0,0,1382,1370,1,0,0,0,1382,1383,1,0,0,0,1383,1385,
        1,0,0,0,1384,1367,1,0,0,0,1384,1368,1,0,0,0,1385,137,1,0,0,0,1386,
        1387,5,128,0,0,1387,1388,5,217,0,0,1388,1390,3,226,113,0,1389,1391,
        5,217,0,0,1390,1389,1,0,0,0,1390,1391,1,0,0,0,1391,1392,1,0,0,0,
        1392,1397,5,1,0,0,1393,1395,5,217,0,0,1394,1393,1,0,0,0,1394,1395,
        1,0,0,0,1395,1396,1,0,0,0,1396,1398,3,134,67,0,1397,1394,1,0,0,0,
        1397,1398,1,0,0,0,1398,139,1,0,0,0,1399,1400,3,292,146,0,1400,1401,
        5,217,0,0,1401,1403,1,0,0,0,1402,1399,1,0,0,0,1402,1403,1,0,0,0,
        1403,1406,1,0,0,0,1404,1405,5,158,0,0,1405,1407,5,217,0,0,1406,1404,
        1,0,0,0,1406,1407,1,0,0,0,1407,1408,1,0,0,0,1408,1409,5,130,0,0,
        1409,1410,5,217,0,0,1410,1412,3,268,134,0,1411,1413,3,290,145,0,
        1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,1418,1,0,0,0,1414,1416,
        5,217,0,0,1415,1414,1,0,0,0,1415,1416,1,0,0,0,1416,1417,1,0,0,0,
        1417,1419,3,258,129,0,1418,1415,1,0,0,0,1418,1419,1,0,0,0,1419,1422,
        1,0,0,0,1420,1421,5,217,0,0,1421,1423,3,270,135,0,1422,1420,1,0,
        0,0,1422,1423,1,0,0,0,1423,1424,1,0,0,0,1424,1426,3,302,151,0,1425,
        1427,3,26,13,0,1426,1425,1,0,0,0,1426,1427,1,0,0,0,1427,1428,1,0,
        0,0,1428,1429,5,55,0,0,1429,141,1,0,0,0,1430,1431,3,292,146,0,1431,
        1432,5,217,0,0,1432,1434,1,0,0,0,1433,1430,1,0,0,0,1433,1434,1,0,
        0,0,1434,1437,1,0,0,0,1435,1436,5,158,0,0,1436,1438,5,217,0,0,1437,
        1435,1,0,0,0,1437,1438,1,0,0,0,1438,1439,1,0,0,0,1439,1440,5,132,
        0,0,1440,1441,5,217,0,0,1441,1446,3,268,134,0,1442,1444,5,217,0,
        0,1443,1442,1,0,0,0,1443,1444,1,0,0,0,1444,1445,1,0,0,0,1445,1447,
        3,258,129,0,1446,1443,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,
        0,1448,1450,3,302,151,0,1449,1451,3,26,13,0,1450,1449,1,0,0,0,1450,
        1451,1,0,0,0,1451,1452,1,0,0,0,1452,1453,5,55,0,0,1453,143,1,0,0,
        0,1454,1455,3,292,146,0,1455,1456,5,217,0,0,1456,1458,1,0,0,0,1457,
        1454,1,0,0,0,1457,1458,1,0,0,0,1458,1461,1,0,0,0,1459,1460,5,158,
        0,0,1460,1462,5,217,0,0,1461,1459,1,0,0,0,1461,1462,1,0,0,0,1462,
        1463,1,0,0,0,1463,1464,5,131,0,0,1464,1465,5,217,0,0,1465,1470,3,
        268,134,0,1466,1468,5,217,0,0,1467,1466,1,0,0,0,1467,1468,1,0,0,
        0,1468,1469,1,0,0,0,1469,1471,3,258,129,0,1470,1467,1,0,0,0,1470,
        1471,1,0,0,0,1471,1472,1,0,0,0,1472,1474,3,302,151,0,1473,1475,3,
        26,13,0,1474,1473,1,0,0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,
        1477,5,55,0,0,1477,145,1,0,0,0,1478,1479,5,135,0,0,1479,1480,5,217,
        0,0,1480,1482,3,226,113,0,1481,1483,5,217,0,0,1482,1481,1,0,0,0,
        1482,1483,1,0,0,0,1483,1484,1,0,0,0,1484,1486,5,1,0,0,1485,1487,
        5,217,0,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1489,1,0,0,0,
        1488,1490,3,202,101,0,1489,1488,1,0,0,0,1489,1490,1,0,0,0,1490,1492,
        1,0,0,0,1491,1493,5,217,0,0,1492,1491,1,0,0,0,1492,1493,1,0,0,0,
        1493,1494,1,0,0,0,1494,1496,5,1,0,0,1495,1497,5,217,0,0,1496,1495,
        1,0,0,0,1496,1497,1,0,0,0,1497,1498,1,0,0,0,1498,1499,3,202,101,
        0,1499,147,1,0,0,0,1500,1501,5,138,0,0,1501,1502,5,217,0,0,1502,
        1517,3,268,134,0,1503,1505,5,217,0,0,1504,1503,1,0,0,0,1504,1505,
        1,0,0,0,1505,1506,1,0,0,0,1506,1508,5,190,0,0,1507,1509,5,217,0,
        0,1508,1507,1,0,0,0,1508,1509,1,0,0,0,1509,1514,1,0,0,0,1510,1512,
        3,252,126,0,1511,1513,5,217,0,0,1512,1511,1,0,0,0,1512,1513,1,0,
        0,0,1513,1515,1,0,0,0,1514,1510,1,0,0,0,1514,1515,1,0,0,0,1515,1516,
        1,0,0,0,1516,1518,5,199,0,0,1517,1504,1,0,0,0,1517,1518,1,0,0,0,
        1518,149,1,0,0,0,1519,1522,5,137,0,0,1520,1521,5,217,0,0,1521,1523,
        3,202,101,0,1522,1520,1,0,0,0,1522,1523,1,0,0,0,1523,151,1,0,0,0,
        1524,1525,5,141,0,0,1525,1528,5,217,0,0,1526,1527,5,127,0,0,1527,
        1529,5,217,0,0,1528,1526,1,0,0,0,1528,1529,1,0,0,0,1529,1530,1,0,
        0,0,1530,1541,3,154,77,0,1531,1533,5,217,0,0,1532,1531,1,0,0,0,1532,
        1533,1,0,0,0,1533,1534,1,0,0,0,1534,1536,5,1,0,0,1535,1537,5,217,
        0,0,1536,1535,1,0,0,0,1536,1537,1,0,0,0,1537,1538,1,0,0,0,1538,1540,
        3,154,77,0,1539,1532,1,0,0,0,1540,1543,1,0,0,0,1541,1539,1,0,0,0,
        1541,1542,1,0,0,0,1542,153,1,0,0,0,1543,1541,1,0,0,0,1544,1546,3,
        240,120,0,1545,1547,5,217,0,0,1546,1545,1,0,0,0,1546,1547,1,0,0,
        0,1547,1548,1,0,0,0,1548,1550,5,190,0,0,1549,1551,5,217,0,0,1550,
        1549,1,0,0,0,1550,1551,1,0,0,0,1551,1552,1,0,0,0,1552,1554,3,264,
        132,0,1553,1555,5,217,0,0,1554,1553,1,0,0,0,1554,1555,1,0,0,0,1555,
        1556,1,0,0,0,1556,1559,5,199,0,0,1557,1558,5,217,0,0,1558,1560,3,
        270,135,0,1559,1557,1,0,0,0,1559,1560,1,0,0,0,1560,155,1,0,0,0,1561,
        1562,5,143,0,0,1562,157,1,0,0,0,1563,1569,5,144,0,0,1564,1567,5,
        217,0,0,1565,1568,5,110,0,0,1566,1568,3,268,134,0,1567,1565,1,0,
        0,0,1567,1566,1,0,0,0,1568,1570,1,0,0,0,1569,1564,1,0,0,0,1569,1570,
        1,0,0,0,1570,159,1,0,0,0,1571,1572,5,145,0,0,1572,161,1,0,0,0,1573,
        1574,5,146,0,0,1574,1575,5,217,0,0,1575,1576,3,202,101,0,1576,163,
        1,0,0,0,1577,1578,5,147,0,0,1578,1579,5,217,0,0,1579,1581,3,240,
        120,0,1580,1582,5,217,0,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,
        1583,1,0,0,0,1583,1585,5,186,0,0,1584,1586,5,217,0,0,1585,1584,1,
        0,0,0,1585,1586,1,0,0,0,1586,1587,1,0,0,0,1587,1588,3,202,101,0,
        1588,165,1,0,0,0,1589,1590,5,148,0,0,1590,1591,5,217,0,0,1591,1593,
        3,202,101,0,1592,1594,5,217,0,0,1593,1592,1,0,0,0,1593,1594,1,0,
        0,0,1594,1595,1,0,0,0,1595,1597,5,1,0,0,1596,1598,5,217,0,0,1597,
        1596,1,0,0,0,1597,1598,1,0,0,0,1598,1599,1,0,0,0,1599,1600,3,202,
        101,0,1600,167,1,0,0,0,1601,1602,5,149,0,0,1602,1603,5,217,0,0,1603,
        1605,3,202,101,0,1604,1606,5,217,0,0,1605,1604,1,0,0,0,1605,1606,
        1,0,0,0,1606,1607,1,0,0,0,1607,1609,5,1,0,0,1608,1610,5,217,0,0,
        1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,1611,1,0,0,0,1611,1613,
        3,202,101,0,1612,1614,5,217,0,0,1613,1612,1,0,0,0,1613,1614,1,0,
        0,0,1614,1615,1,0,0,0,1615,1617,5,1,0,0,1616,1618,5,217,0,0,1617,
        1616,1,0,0,0,1617,1618,1,0,0,0,1618,1619,1,0,0,0,1619,1621,3,202,
        101,0,1620,1622,5,217,0,0,1621,1620,1,0,0,0,1621,1622,1,0,0,0,1622,
        1623,1,0,0,0,1623,1625,5,1,0,0,1624,1626,5,217,0,0,1625,1624,1,0,
        0,0,1625,1626,1,0,0,0,1626,1627,1,0,0,0,1627,1628,3,202,101,0,1628,
        169,1,0,0,0,1629,1630,5,150,0,0,1630,1631,5,217,0,0,1631,1633,3,
        226,113,0,1632,1634,5,217,0,0,1633,1632,1,0,0,0,1633,1634,1,0,0,
        0,1634,1635,1,0,0,0,1635,1637,5,1,0,0,1636,1638,5,217,0,0,1637,1636,
        1,0,0,0,1637,1638,1,0,0,0,1638,1639,1,0,0,0,1639,1640,3,202,101,
        0,1640,171,1,0,0,0,1641,1642,5,151,0,0,1642,1643,5,217,0,0,1643,
        1644,5,25,0,0,1644,1645,5,217,0,0,1645,1646,3,202,101,0,1646,1650,
        3,302,151,0,1647,1649,3,176,88,0,1648,1647,1,0,0,0,1649,1652,1,0,
        0,0,1650,1648,1,0,0,0,1650,1651,1,0,0,0,1651,1653,1,0,0,0,1652,1650,
        1,0,0,0,1653,1654,5,56,0,0,1654,173,1,0,0,0,1655,1657,5,84,0,0,1656,
        1658,5,217,0,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1659,1,0,
        0,0,1659,1661,3,276,138,0,1660,1662,5,217,0,0,1661,1660,1,0,0,0,
        1661,1662,1,0,0,0,1662,1663,1,0,0,0,1663,1664,3,202,101,0,1664,1673,
        1,0,0,0,1665,1666,3,202,101,0,1666,1667,5,217,0,0,1667,1668,5,167,
        0,0,1668,1669,5,217,0,0,1669,1670,3,202,101,0,1670,1673,1,0,0,0,
        1671,1673,3,202,101,0,1672,1655,1,0,0,0,1672,1665,1,0,0,0,1672,1671,
        1,0,0,0,1673,175,1,0,0,0,1674,1675,5,25,0,0,1675,1676,5,217,0,0,
        1676,1677,3,178,89,0,1677,1679,3,302,151,0,1678,1680,3,26,13,0,1679,
        1678,1,0,0,0,1679,1680,1,0,0,0,1680,177,1,0,0,0,1681,1697,5,52,0,
        0,1682,1693,3,174,87,0,1683,1685,5,217,0,0,1684,1683,1,0,0,0,1684,
        1685,1,0,0,0,1685,1686,1,0,0,0,1686,1688,5,1,0,0,1687,1689,5,217,
        0,0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,1690,1,0,0,0,1690,1692,
        3,174,87,0,1691,1684,1,0,0,0,1692,1695,1,0,0,0,1693,1691,1,0,0,0,
        1693,1694,1,0,0,0,1694,1697,1,0,0,0,1695,1693,1,0,0,0,1696,1681,
        1,0,0,0,1696,1682,1,0,0,0,1697,179,1,0,0,0,1698,1699,5,152,0,0,1699,
        1700,5,217,0,0,1700,1709,3,202,101,0,1701,1703,5,217,0,0,1702,1701,
        1,0,0,0,1702,1703,1,0,0,0,1703,1704,1,0,0,0,1704,1706,5,1,0,0,1705,
        1707,5,217,0,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,1708,1,0,
        0,0,1708,1710,3,202,101,0,1709,1702,1,0,0,0,1709,1710,1,0,0,0,1710,
        181,1,0,0,0,1711,1712,5,154,0,0,1712,1713,5,217,0,0,1713,1715,3,
        202,101,0,1714,1716,5,217,0,0,1715,1714,1,0,0,0,1715,1716,1,0,0,
        0,1716,1717,1,0,0,0,1717,1719,5,1,0,0,1718,1720,5,217,0,0,1719,1718,
        1,0,0,0,1719,1720,1,0,0,0,1720,1721,1,0,0,0,1721,1722,3,202,101,
        0,1722,183,1,0,0,0,1723,1724,5,153,0,0,1724,1725,5,217,0,0,1725,
        1727,3,240,120,0,1726,1728,5,217,0,0,1727,1726,1,0,0,0,1727,1728,
        1,0,0,0,1728,1729,1,0,0,0,1729,1731,5,186,0,0,1730,1732,5,217,0,
        0,1731,1730,1,0,0,0,1731,1732,1,0,0,0,1732,1733,1,0,0,0,1733,1734,
        3,202,101,0,1734,185,1,0,0,0,1735,1736,5,160,0,0,1736,187,1,0,0,
        0,1737,1738,3,292,146,0,1738,1739,5,217,0,0,1739,1741,1,0,0,0,1740,
        1737,1,0,0,0,1740,1741,1,0,0,0,1741,1744,1,0,0,0,1742,1743,5,158,
        0,0,1743,1745,5,217,0,0,1744,1742,1,0,0,0,1744,1745,1,0,0,0,1745,
        1746,1,0,0,0,1746,1748,5,162,0,0,1747,1749,5,217,0,0,1748,1747,1,
        0,0,0,1748,1749,1,0,0,0,1749,1750,1,0,0,0,1750,1755,3,268,134,0,
        1751,1753,5,217,0,0,1752,1751,1,0,0,0,1752,1753,1,0,0,0,1753,1754,
        1,0,0,0,1754,1756,3,258,129,0,1755,1752,1,0,0,0,1755,1756,1,0,0,
        0,1756,1757,1,0,0,0,1757,1759,3,302,151,0,1758,1760,3,26,13,0,1759,
        1758,1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,1762,5,59,
        0,0,1762,1763,3,304,152,0,1763,1764,5,162,0,0,1764,189,1,0,0,0,1765,
        1767,5,166,0,0,1766,1768,5,217,0,0,1767,1766,1,0,0,0,1767,1768,1,
        0,0,0,1768,1769,1,0,0,0,1769,1771,5,186,0,0,1770,1772,5,217,0,0,
        1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,1774,
        3,202,101,0,1774,191,1,0,0,0,1775,1776,3,292,146,0,1776,1777,5,217,
        0,0,1777,1779,1,0,0,0,1778,1775,1,0,0,0,1778,1779,1,0,0,0,1779,1780,
        1,0,0,0,1780,1781,5,169,0,0,1781,1782,5,217,0,0,1782,1783,3,268,
        134,0,1783,1787,3,302,151,0,1784,1786,3,194,97,0,1785,1784,1,0,0,
        0,1786,1789,1,0,0,0,1787,1785,1,0,0,0,1787,1788,1,0,0,0,1788,1790,
        1,0,0,0,1789,1787,1,0,0,0,1790,1791,5,57,0,0,1791,193,1,0,0,0,1792,
        1807,3,268,134,0,1793,1795,5,217,0,0,1794,1793,1,0,0,0,1794,1795,
        1,0,0,0,1795,1796,1,0,0,0,1796,1801,5,190,0,0,1797,1799,5,217,0,
        0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,1800,1,0,0,0,1800,1802,
        3,264,132,0,1801,1798,1,0,0,0,1801,1802,1,0,0,0,1802,1804,1,0,0,
        0,1803,1805,5,217,0,0,1804,1803,1,0,0,0,1804,1805,1,0,0,0,1805,1806,
        1,0,0,0,1806,1808,5,199,0,0,1807,1794,1,0,0,0,1807,1808,1,0,0,0,
        1808,1811,1,0,0,0,1809,1810,5,217,0,0,1810,1812,3,270,135,0,1811,
        1809,1,0,0,0,1811,1812,1,0,0,0,1812,1813,1,0,0,0,1813,1814,3,302,
        151,0,1814,195,1,0,0,0,1815,1816,5,170,0,0,1816,1817,5,217,0,0,1817,
        1822,3,202,101,0,1818,1819,5,217,0,0,1819,1820,5,84,0,0,1820,1821,
        5,217,0,0,1821,1823,3,288,144,0,1822,1818,1,0,0,0,1822,1823,1,0,
        0,0,1823,197,1,0,0,0,1824,1825,5,171,0,0,1825,1826,5,217,0,0,1826,
        1827,3,202,101,0,1827,199,1,0,0,0,1828,1829,5,172,0,0,1829,1830,
        5,217,0,0,1830,1845,3,226,113,0,1831,1833,5,217,0,0,1832,1831,1,
        0,0,0,1832,1833,1,0,0,0,1833,1834,1,0,0,0,1834,1836,5,1,0,0,1835,
        1837,5,217,0,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,0,
        0,0,1838,1843,3,202,101,0,1839,1840,5,217,0,0,1840,1841,5,167,0,
        0,1841,1842,5,217,0,0,1842,1844,3,202,101,0,1843,1839,1,0,0,0,1843,
        1844,1,0,0,0,1844,1846,1,0,0,0,1845,1832,1,0,0,0,1845,1846,1,0,0,
        0,1846,201,1,0,0,0,1847,1848,6,101,-1,0,1848,1872,3,286,143,0,1849,
        1872,3,240,120,0,1850,1872,3,208,104,0,1851,1872,3,204,102,0,1852,
        1872,3,196,98,0,1853,1872,3,120,60,0,1854,1856,5,10,0,0,1855,1857,
        3,304,152,0,1856,1855,1,0,0,0,1856,1857,1,0,0,0,1857,1858,1,0,0,
        0,1858,1872,3,202,101,11,1859,1861,3,240,120,0,1860,1862,3,304,152,
        0,1861,1860,1,0,0,0,1861,1862,1,0,0,0,1862,1863,1,0,0,0,1863,1865,
        5,184,0,0,1864,1866,3,304,152,0,1865,1864,1,0,0,0,1865,1866,1,0,
        0,0,1866,1867,1,0,0,0,1867,1868,3,202,101,10,1868,1872,1,0,0,0,1869,
        1872,3,210,105,0,1870,1872,3,206,103,0,1871,1847,1,0,0,0,1871,1849,
        1,0,0,0,1871,1850,1,0,0,0,1871,1851,1,0,0,0,1871,1852,1,0,0,0,1871,
        1853,1,0,0,0,1871,1854,1,0,0,0,1871,1859,1,0,0,0,1871,1869,1,0,0,
        0,1871,1870,1,0,0,0,1872,1938,1,0,0,0,1873,1875,10,9,0,0,1874,1876,
        3,304,152,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1877,1,0,0,
        0,1877,1879,5,198,0,0,1878,1880,3,304,152,0,1879,1878,1,0,0,0,1879,
        1880,1,0,0,0,1880,1881,1,0,0,0,1881,1937,3,202,101,10,1882,1884,
        10,7,0,0,1883,1885,3,304,152,0,1884,1883,1,0,0,0,1884,1885,1,0,0,
        0,1885,1886,1,0,0,0,1886,1888,7,12,0,0,1887,1889,3,304,152,0,1888,
        1887,1,0,0,0,1888,1889,1,0,0,0,1889,1890,1,0,0,0,1890,1937,3,202,
        101,8,1891,1893,10,6,0,0,1892,1894,3,304,152,0,1893,1892,1,0,0,0,
        1893,1894,1,0,0,0,1894,1895,1,0,0,0,1895,1897,5,108,0,0,1896,1898,
        3,304,152,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,
        0,1899,1937,3,202,101,7,1900,1902,10,5,0,0,1901,1903,3,304,152,0,
        1902,1901,1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,1906,
        7,13,0,0,1905,1907,3,304,152,0,1906,1905,1,0,0,0,1906,1907,1,0,0,
        0,1907,1908,1,0,0,0,1908,1937,3,202,101,6,1909,1911,10,4,0,0,1910,
        1912,3,304,152,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,1913,1,
        0,0,0,1913,1915,5,183,0,0,1914,1916,3,304,152,0,1915,1914,1,0,0,
        0,1915,1916,1,0,0,0,1916,1917,1,0,0,0,1917,1937,3,202,101,5,1918,
        1920,10,3,0,0,1919,1921,3,304,152,0,1920,1919,1,0,0,0,1920,1921,
        1,0,0,0,1921,1922,1,0,0,0,1922,1924,7,14,0,0,1923,1925,3,304,152,
        0,1924,1923,1,0,0,0,1924,1925,1,0,0,0,1925,1926,1,0,0,0,1926,1937,
        3,202,101,4,1927,1929,10,1,0,0,1928,1930,3,304,152,0,1929,1928,1,
        0,0,0,1929,1930,1,0,0,0,1930,1931,1,0,0,0,1931,1933,7,15,0,0,1932,
        1934,3,304,152,0,1933,1932,1,0,0,0,1933,1934,1,0,0,0,1934,1935,1,
        0,0,0,1935,1937,3,202,101,2,1936,1873,1,0,0,0,1936,1882,1,0,0,0,
        1936,1891,1,0,0,0,1936,1900,1,0,0,0,1936,1909,1,0,0,0,1936,1918,
        1,0,0,0,1936,1927,1,0,0,0,1937,1940,1,0,0,0,1938,1936,1,0,0,0,1938,
        1939,1,0,0,0,1939,203,1,0,0,0,1940,1938,1,0,0,0,1941,1943,5,111,
        0,0,1942,1944,3,304,152,0,1943,1942,1,0,0,0,1943,1944,1,0,0,0,1944,
        1945,1,0,0,0,1945,1946,3,202,101,0,1946,205,1,0,0,0,1947,1949,5,
        112,0,0,1948,1950,3,304,152,0,1949,1948,1,0,0,0,1949,1950,1,0,0,
        0,1950,1951,1,0,0,0,1951,1952,3,202,101,0,1952,207,1,0,0,0,1953,
        1955,5,190,0,0,1954,1956,3,304,152,0,1955,1954,1,0,0,0,1955,1956,
        1,0,0,0,1956,1957,1,0,0,0,1957,1959,3,202,101,0,1958,1960,3,304,
        152,0,1959,1958,1,0,0,0,1959,1960,1,0,0,0,1960,1961,1,0,0,0,1961,
        1962,5,199,0,0,1962,209,1,0,0,0,1963,1965,5,192,0,0,1964,1966,3,
        304,152,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1967,1,0,0,0,
        1967,1968,3,202,101,0,1968,211,1,0,0,0,1969,1973,5,48,0,0,1970,1973,
        5,158,0,0,1971,1973,3,292,146,0,1972,1969,1,0,0,0,1972,1970,1,0,
        0,0,1972,1971,1,0,0,0,1973,1974,1,0,0,0,1974,1977,5,217,0,0,1975,
        1976,5,180,0,0,1976,1978,5,217,0,0,1977,1975,1,0,0,0,1977,1978,1,
        0,0,0,1978,1979,1,0,0,0,1979,1980,3,214,107,0,1980,213,1,0,0,0,1981,
        1992,3,216,108,0,1982,1984,5,217,0,0,1983,1982,1,0,0,0,1983,1984,
        1,0,0,0,1984,1985,1,0,0,0,1985,1987,5,1,0,0,1986,1988,5,217,0,0,
        1987,1986,1,0,0,0,1987,1988,1,0,0,0,1988,1989,1,0,0,0,1989,1991,
        3,216,108,0,1990,1983,1,0,0,0,1991,1994,1,0,0,0,1992,1990,1,0,0,
        0,1992,1993,1,0,0,0,1993,215,1,0,0,0,1994,1992,1,0,0,0,1995,2013,
        3,268,134,0,1996,1998,5,217,0,0,1997,1996,1,0,0,0,1997,1998,1,0,
        0,0,1998,1999,1,0,0,0,1999,2001,5,190,0,0,2000,2002,5,217,0,0,2001,
        2000,1,0,0,0,2001,2002,1,0,0,0,2002,2007,1,0,0,0,2003,2005,3,264,
        132,0,2004,2006,5,217,0,0,2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,
        2008,1,0,0,0,2007,2003,1,0,0,0,2007,2008,1,0,0,0,2008,2009,1,0,0,
        0,2009,2011,5,199,0,0,2010,2012,5,217,0,0,2011,2010,1,0,0,0,2011,
        2012,1,0,0,0,2012,2014,1,0,0,0,2013,1997,1,0,0,0,2013,2014,1,0,0,
        0,2014,2016,1,0,0,0,2015,2017,3,290,145,0,2016,2015,1,0,0,0,2016,
        2017,1,0,0,0,2017,2020,1,0,0,0,2018,2019,5,217,0,0,2019,2021,3,270,
        135,0,2020,2018,1,0,0,0,2020,2021,1,0,0,0,2021,217,1,0,0,0,2022,
        2023,5,177,0,0,2023,2024,5,217,0,0,2024,2025,3,202,101,0,2025,2027,
        3,302,151,0,2026,2028,3,26,13,0,2027,2026,1,0,0,0,2027,2028,1,0,
        0,0,2028,2029,1,0,0,0,2029,2030,5,176,0,0,2030,219,1,0,0,0,2031,
        2032,5,178,0,0,2032,2033,5,217,0,0,2033,2035,3,226,113,0,2034,2036,
        5,217,0,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,2037,1,0,0,0,
        2037,2039,5,1,0,0,2038,2040,5,217,0,0,2039,2038,1,0,0,0,2039,2040,
        1,0,0,0,2040,2041,1,0,0,0,2041,2042,3,202,101,0,2042,221,1,0,0,0,
        2043,2044,5,179,0,0,2044,2049,5,217,0,0,2045,2050,3,240,120,0,2046,
        2047,5,111,0,0,2047,2048,5,217,0,0,2048,2050,3,288,144,0,2049,2045,
        1,0,0,0,2049,2046,1,0,0,0,2050,2051,1,0,0,0,2051,2053,3,302,151,
        0,2052,2054,3,26,13,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2055,
        1,0,0,0,2055,2056,5,58,0,0,2056,223,1,0,0,0,2057,2058,5,181,0,0,
        2058,2059,5,217,0,0,2059,2061,3,226,113,0,2060,2062,5,217,0,0,2061,
        2060,1,0,0,0,2061,2062,1,0,0,0,2062,2063,1,0,0,0,2063,2068,5,1,0,
        0,2064,2066,5,217,0,0,2065,2064,1,0,0,0,2065,2066,1,0,0,0,2066,2067,
        1,0,0,0,2067,2069,3,134,67,0,2068,2065,1,0,0,0,2068,2069,1,0,0,0,
        2069,225,1,0,0,0,2070,2072,5,3,0,0,2071,2070,1,0,0,0,2071,2072,1,
        0,0,0,2072,2073,1,0,0,0,2073,2074,3,202,101,0,2074,227,1,0,0,0,2075,
        2078,3,230,115,0,2076,2078,3,232,116,0,2077,2075,1,0,0,0,2077,2076,
        1,0,0,0,2078,229,1,0,0,0,2079,2080,5,24,0,0,2080,2081,5,217,0,0,
        2081,2083,3,268,134,0,2082,2084,3,290,145,0,2083,2082,1,0,0,0,2083,
        2084,1,0,0,0,2084,2098,1,0,0,0,2085,2087,5,217,0,0,2086,2085,1,0,
        0,0,2086,2087,1,0,0,0,2087,2088,1,0,0,0,2088,2090,5,190,0,0,2089,
        2091,5,217,0,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,2092,1,0,
        0,0,2092,2094,3,252,126,0,2093,2095,5,217,0,0,2094,2093,1,0,0,0,
        2094,2095,1,0,0,0,2095,2096,1,0,0,0,2096,2097,5,199,0,0,2097,2099,
        1,0,0,0,2098,2086,1,0,0,0,2098,2099,1,0,0,0,2099,2109,1,0,0,0,2100,
        2102,5,217,0,0,2101,2100,1,0,0,0,2101,2102,1,0,0,0,2102,2103,1,0,
        0,0,2103,2104,5,190,0,0,2104,2105,3,264,132,0,2105,2106,5,199,0,
        0,2106,2108,1,0,0,0,2107,2101,1,0,0,0,2108,2111,1,0,0,0,2109,2107,
        1,0,0,0,2109,2110,1,0,0,0,2110,231,1,0,0,0,2111,2109,1,0,0,0,2112,
        2113,5,24,0,0,2113,2115,5,217,0,0,2114,2116,3,240,120,0,2115,2114,
        1,0,0,0,2115,2116,1,0,0,0,2116,2117,1,0,0,0,2117,2118,5,4,0,0,2118,
        2120,3,268,134,0,2119,2121,3,290,145,0,2120,2119,1,0,0,0,2120,2121,
        1,0,0,0,2121,2135,1,0,0,0,2122,2124,5,217,0,0,2123,2122,1,0,0,0,
        2123,2124,1,0,0,0,2124,2125,1,0,0,0,2125,2127,5,190,0,0,2126,2128,
        5,217,0,0,2127,2126,1,0,0,0,2127,2128,1,0,0,0,2128,2129,1,0,0,0,
        2129,2131,3,252,126,0,2130,2132,5,217,0,0,2131,2130,1,0,0,0,2131,
        2132,1,0,0,0,2132,2133,1,0,0,0,2133,2134,5,199,0,0,2134,2136,1,0,
        0,0,2135,2123,1,0,0,0,2135,2136,1,0,0,0,2136,2146,1,0,0,0,2137,2139,
        5,217,0,0,2138,2137,1,0,0,0,2138,2139,1,0,0,0,2139,2140,1,0,0,0,
        2140,2141,5,190,0,0,2141,2142,3,264,132,0,2142,2143,5,199,0,0,2143,
        2145,1,0,0,0,2144,2138,1,0,0,0,2145,2148,1,0,0,0,2146,2144,1,0,0,
        0,2146,2147,1,0,0,0,2147,233,1,0,0,0,2148,2146,1,0,0,0,2149,2152,
        3,236,118,0,2150,2152,3,238,119,0,2151,2149,1,0,0,0,2151,2150,1,
        0,0,0,2152,235,1,0,0,0,2153,2155,3,240,120,0,2154,2153,1,0,0,0,2154,
        2155,1,0,0,0,2155,2156,1,0,0,0,2156,2157,5,4,0,0,2157,2159,3,268,
        134,0,2158,2160,3,290,145,0,2159,2158,1,0,0,0,2159,2160,1,0,0,0,
        2160,2163,1,0,0,0,2161,2162,5,217,0,0,2162,2164,3,252,126,0,2163,
        2161,1,0,0,0,2163,2164,1,0,0,0,2164,2166,1,0,0,0,2165,2167,3,256,
        128,0,2166,2165,1,0,0,0,2166,2167,1,0,0,0,2167,2177,1,0,0,0,2168,
        2170,5,217,0,0,2169,2168,1,0,0,0,2169,2170,1,0,0,0,2170,2171,1,0,
        0,0,2171,2172,5,190,0,0,2172,2173,3,264,132,0,2173,2174,5,199,0,
        0,2174,2176,1,0,0,0,2175,2169,1,0,0,0,2176,2179,1,0,0,0,2177,2175,
        1,0,0,0,2177,2178,1,0,0,0,2178,237,1,0,0,0,2179,2177,1,0,0,0,2180,
        2183,3,274,137,0,2181,2182,5,217,0,0,2182,2184,3,252,126,0,2183,
        2181,1,0,0,0,2183,2184,1,0,0,0,2184,2194,1,0,0,0,2185,2187,5,217,
        0,0,2186,2185,1,0,0,0,2186,2187,1,0,0,0,2187,2188,1,0,0,0,2188,2189,
        5,190,0,0,2189,2190,3,264,132,0,2190,2191,5,199,0,0,2191,2193,1,
        0,0,0,2192,2186,1,0,0,0,2193,2196,1,0,0,0,2194,2192,1,0,0,0,2194,
        2195,1,0,0,0,2195,239,1,0,0,0,2196,2194,1,0,0,0,2197,2202,3,246,
        123,0,2198,2202,3,242,121,0,2199,2202,3,244,122,0,2200,2202,3,250,
        125,0,2201,2197,1,0,0,0,2201,2198,1,0,0,0,2201,2199,1,0,0,0,2201,
        2200,1,0,0,0,2202,241,1,0,0,0,2203,2205,3,268,134,0,2204,2206,3,
        290,145,0,2205,2204,1,0,0,0,2205,2206,1,0,0,0,2206,2208,1,0,0,0,
        2207,2209,3,256,128,0,2208,2207,1,0,0,0,2208,2209,1,0,0,0,2209,2219,
        1,0,0,0,2210,2212,5,217,0,0,2211,2210,1,0,0,0,2211,2212,1,0,0,0,
        2212,2213,1,0,0,0,2213,2214,5,190,0,0,2214,2215,3,264,132,0,2215,
        2216,5,199,0,0,2216,2218,1,0,0,0,2217,2211,1,0,0,0,2218,2221,1,0,
        0,0,2219,2217,1,0,0,0,2219,2220,1,0,0,0,2220,243,1,0,0,0,2221,2219,
        1,0,0,0,2222,2225,3,268,134,0,2223,2225,3,272,136,0,2224,2222,1,
        0,0,0,2224,2223,1,0,0,0,2225,2227,1,0,0,0,2226,2228,3,290,145,0,
        2227,2226,1,0,0,0,2227,2228,1,0,0,0,2228,2230,1,0,0,0,2229,2231,
        5,217,0,0,2230,2229,1,0,0,0,2230,2231,1,0,0,0,2231,2232,1,0,0,0,
        2232,2234,5,190,0,0,2233,2235,5,217,0,0,2234,2233,1,0,0,0,2234,2235,
        1,0,0,0,2235,2240,1,0,0,0,2236,2238,3,252,126,0,2237,2239,5,217,
        0,0,2238,2237,1,0,0,0,2238,2239,1,0,0,0,2239,2241,1,0,0,0,2240,2236,
        1,0,0,0,2240,2241,1,0,0,0,2241,2242,1,0,0,0,2242,2244,5,199,0,0,
        2243,2245,3,256,128,0,2244,2243,1,0,0,0,2244,2245,1,0,0,0,2245,2255,
        1,0,0,0,2246,2248,5,217,0,0,2247,2246,1,0,0,0,2247,2248,1,0,0,0,
        2248,2249,1,0,0,0,2249,2250,5,190,0,0,2250,2251,3,264,132,0,2251,
        2252,5,199,0,0,2252,2254,1,0,0,0,2253,2247,1,0,0,0,2254,2257,1,0,
        0,0,2255,2253,1,0,0,0,2255,2256,1,0,0,0,2256,245,1,0,0,0,2257,2255,
        1,0,0,0,2258,2261,3,242,121,0,2259,2261,3,244,122,0,2260,2258,1,
        0,0,0,2260,2259,1,0,0,0,2260,2261,1,0,0,0,2261,2263,1,0,0,0,2262,
        2264,3,248,124,0,2263,2262,1,0,0,0,2264,2265,1,0,0,0,2265,2263,1,
        0,0,0,2265,2266,1,0,0,0,2266,2268,1,0,0,0,2267,2269,3,256,128,0,
        2268,2267,1,0,0,0,2268,2269,1,0,0,0,2269,2279,1,0,0,0,2270,2272,
        5,217,0,0,2271,2270,1,0,0,0,2271,2272,1,0,0,0,2272,2273,1,0,0,0,
        2273,2274,5,190,0,0,2274,2275,3,264,132,0,2275,2276,5,199,0,0,2276,
        2278,1,0,0,0,2277,2271,1,0,0,0,2278,2281,1,0,0,0,2279,2277,1,0,0,
        0,2279,2280,1,0,0,0,2280,247,1,0,0,0,2281,2279,1,0,0,0,2282,2284,
        5,210,0,0,2283,2282,1,0,0,0,2283,2284,1,0,0,0,2284,2286,1,0,0,0,
        2285,2287,5,217,0,0,2286,2285,1,0,0,0,2286,2287,1,0,0,0,2287,2288,
        1,0,0,0,2288,2290,7,16,0,0,2289,2291,5,210,0,0,2290,2289,1,0,0,0,
        2290,2291,1,0,0,0,2291,2293,1,0,0,0,2292,2294,5,217,0,0,2293,2292,
        1,0,0,0,2293,2294,1,0,0,0,2294,2297,1,0,0,0,2295,2298,3,242,121,
        0,2296,2298,3,244,122,0,2297,2295,1,0,0,0,2297,2296,1,0,0,0,2298,
        249,1,0,0,0,2299,2300,3,256,128,0,2300,251,1,0,0,0,2301,2303,3,254,
        127,0,2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,2305,1,0,0,0,2304,
        2306,5,217,0,0,2305,2304,1,0,0,0,2305,2306,1,0,0,0,2306,2307,1,0,
        0,0,2307,2309,7,10,0,0,2308,2310,5,217,0,0,2309,2308,1,0,0,0,2309,
        2310,1,0,0,0,2310,2312,1,0,0,0,2311,2302,1,0,0,0,2312,2315,1,0,0,
        0,2313,2311,1,0,0,0,2313,2314,1,0,0,0,2314,2316,1,0,0,0,2315,2313,
        1,0,0,0,2316,2329,3,254,127,0,2317,2319,5,217,0,0,2318,2317,1,0,
        0,0,2318,2319,1,0,0,0,2319,2320,1,0,0,0,2320,2322,7,10,0,0,2321,
        2323,5,217,0,0,2322,2321,1,0,0,0,2322,2323,1,0,0,0,2323,2325,1,0,
        0,0,2324,2326,3,254,127,0,2325,2324,1,0,0,0,2325,2326,1,0,0,0,2326,
        2328,1,0,0,0,2327,2318,1,0,0,0,2328,2331,1,0,0,0,2329,2327,1,0,0,
        0,2329,2330,1,0,0,0,2330,253,1,0,0,0,2331,2329,1,0,0,0,2332,2334,
        5,190,0,0,2333,2332,1,0,0,0,2333,2334,1,0,0,0,2334,2337,1,0,0,0,
        2335,2336,7,17,0,0,2336,2338,5,217,0,0,2337,2335,1,0,0,0,2337,2338,
        1,0,0,0,2338,2340,1,0,0,0,2339,2341,5,199,0,0,2340,2339,1,0,0,0,
        2340,2341,1,0,0,0,2341,2342,1,0,0,0,2342,2343,3,202,101,0,2343,255,
        1,0,0,0,2344,2345,5,5,0,0,2345,2347,3,268,134,0,2346,2348,3,290,
        145,0,2347,2346,1,0,0,0,2347,2348,1,0,0,0,2348,257,1,0,0,0,2349,
        2367,5,190,0,0,2350,2352,5,217,0,0,2351,2350,1,0,0,0,2351,2352,1,
        0,0,0,2352,2353,1,0,0,0,2353,2364,3,260,130,0,2354,2356,5,217,0,
        0,2355,2354,1,0,0,0,2355,2356,1,0,0,0,2356,2357,1,0,0,0,2357,2359,
        5,1,0,0,2358,2360,5,217,0,0,2359,2358,1,0,0,0,2359,2360,1,0,0,0,
        2360,2361,1,0,0,0,2361,2363,3,260,130,0,2362,2355,1,0,0,0,2363,2366,
        1,0,0,0,2364,2362,1,0,0,0,2364,2365,1,0,0,0,2365,2368,1,0,0,0,2366,
        2364,1,0,0,0,2367,2351,1,0,0,0,2367,2368,1,0,0,0,2368,2370,1,0,0,
        0,2369,2371,5,217,0,0,2370,2369,1,0,0,0,2370,2371,1,0,0,0,2371,2372,
        1,0,0,0,2372,2373,5,199,0,0,2373,259,1,0,0,0,2374,2375,5,119,0,0,
        2375,2377,5,217,0,0,2376,2374,1,0,0,0,2376,2377,1,0,0,0,2377,2380,
        1,0,0,0,2378,2379,7,18,0,0,2379,2381,5,217,0,0,2380,2378,1,0,0,0,
        2380,2381,1,0,0,0,2381,2384,1,0,0,0,2382,2383,5,126,0,0,2383,2385,
        5,217,0,0,2384,2382,1,0,0,0,2384,2385,1,0,0,0,2385,2386,1,0,0,0,
        2386,2388,3,268,134,0,2387,2389,3,290,145,0,2388,2387,1,0,0,0,2388,
        2389,1,0,0,0,2389,2398,1,0,0,0,2390,2392,5,217,0,0,2391,2390,1,0,
        0,0,2391,2392,1,0,0,0,2392,2393,1,0,0,0,2393,2395,5,190,0,0,2394,
        2396,5,217,0,0,2395,2394,1,0,0,0,2395,2396,1,0,0,0,2396,2397,1,0,
        0,0,2397,2399,5,199,0,0,2398,2391,1,0,0,0,2398,2399,1,0,0,0,2399,
        2404,1,0,0,0,2400,2402,5,217,0,0,2401,2400,1,0,0,0,2401,2402,1,0,
        0,0,2402,2403,1,0,0,0,2403,2405,3,270,135,0,2404,2401,1,0,0,0,2404,
        2405,1,0,0,0,2405,2410,1,0,0,0,2406,2408,5,217,0,0,2407,2406,1,0,
        0,0,2407,2408,1,0,0,0,2408,2409,1,0,0,0,2409,2411,3,262,131,0,2410,
        2407,1,0,0,0,2410,2411,1,0,0,0,2411,261,1,0,0,0,2412,2414,5,186,
        0,0,2413,2415,5,217,0,0,2414,2413,1,0,0,0,2414,2415,1,0,0,0,2415,
        2416,1,0,0,0,2416,2417,3,202,101,0,2417,263,1,0,0,0,2418,2429,3,
        266,133,0,2419,2421,5,217,0,0,2420,2419,1,0,0,0,2420,2421,1,0,0,
        0,2421,2422,1,0,0,0,2422,2424,5,1,0,0,2423,2425,5,217,0,0,2424,2423,
        1,0,0,0,2424,2425,1,0,0,0,2425,2426,1,0,0,0,2426,2428,3,266,133,
        0,2427,2420,1,0,0,0,2428,2431,1,0,0,0,2429,2427,1,0,0,0,2429,2430,
        1,0,0,0,2430,265,1,0,0,0,2431,2429,1,0,0,0,2432,2433,3,202,101,0,
        2433,2434,5,217,0,0,2434,2435,5,167,0,0,2435,2436,5,217,0,0,2436,
        2438,1,0,0,0,2437,2432,1,0,0,0,2437,2438,1,0,0,0,2438,2440,1,0,0,
        0,2439,2441,3,290,145,0,2440,2439,1,0,0,0,2440,2441,1,0,0,0,2441,
        2442,1,0,0,0,2442,2444,3,202,101,0,2443,2445,3,290,145,0,2444,2443,
        1,0,0,0,2444,2445,1,0,0,0,2445,267,1,0,0,0,2446,2449,5,218,0,0,2447,
        2449,3,294,147,0,2448,2446,1,0,0,0,2448,2447,1,0,0,0,2449,2450,1,
        0,0,0,2450,2448,1,0,0,0,2450,2451,1,0,0,0,2451,269,1,0,0,0,2452,
        2454,5,16,0,0,2453,2455,5,217,0,0,2454,2453,1,0,0,0,2454,2455,1,
        0,0,0,2455,2458,1,0,0,0,2456,2457,5,111,0,0,2457,2459,5,217,0,0,
        2458,2456,1,0,0,0,2458,2459,1,0,0,0,2459,2460,1,0,0,0,2460,2465,
        3,288,144,0,2461,2463,5,217,0,0,2462,2461,1,0,0,0,2462,2463,1,0,
        0,0,2463,2464,1,0,0,0,2464,2466,3,280,140,0,2465,2462,1,0,0,0,2465,
        2466,1,0,0,0,2466,271,1,0,0,0,2467,2488,5,20,0,0,2468,2488,5,23,
        0,0,2469,2488,5,30,0,0,2470,2488,5,33,0,0,2471,2488,5,50,0,0,2472,
        2488,5,85,0,0,2473,2488,5,89,0,0,2474,2488,5,156,0,0,2475,2484,5,
        161,0,0,2476,2478,5,217,0,0,2477,2476,1,0,0,0,2477,2478,1,0,0,0,
        2478,2479,1,0,0,0,2479,2481,5,194,0,0,2480,2482,5,217,0,0,2481,2480,
        1,0,0,0,2481,2482,1,0,0,0,2482,2483,1,0,0,0,2483,2485,3,202,101,
        0,2484,2477,1,0,0,0,2484,2485,1,0,0,0,2485,2488,1,0,0,0,2486,2488,
        5,174,0,0,2487,2467,1,0,0,0,2487,2468,1,0,0,0,2487,2469,1,0,0,0,
        2487,2470,1,0,0,0,2487,2471,1,0,0,0,2487,2472,1,0,0,0,2487,2473,
        1,0,0,0,2487,2474,1,0,0,0,2487,2475,1,0,0,0,2487,2486,1,0,0,0,2488,
        273,1,0,0,0,2489,2494,5,218,0,0,2490,2493,3,294,147,0,2491,2493,
        5,218,0,0,2492,2490,1,0,0,0,2492,2491,1,0,0,0,2493,2496,1,0,0,0,
        2494,2492,1,0,0,0,2494,2495,1,0,0,0,2495,2505,1,0,0,0,2496,2494,
        1,0,0,0,2497,2500,3,294,147,0,2498,2501,3,294,147,0,2499,2501,5,
        218,0,0,2500,2498,1,0,0,0,2500,2499,1,0,0,0,2501,2502,1,0,0,0,2502,
        2500,1,0,0,0,2502,2503,1,0,0,0,2503,2505,1,0,0,0,2504,2489,1,0,0,
        0,2504,2497,1,0,0,0,2505,275,1,0,0,0,2506,2507,7,14,0,0,2507,277,
        1,0,0,0,2508,2513,3,268,134,0,2509,2510,7,16,0,0,2510,2512,3,268,
        134,0,2511,2509,1,0,0,0,2512,2515,1,0,0,0,2513,2511,1,0,0,0,2513,
        2514,1,0,0,0,2514,279,1,0,0,0,2515,2513,1,0,0,0,2516,2518,5,194,
        0,0,2517,2519,5,217,0,0,2518,2517,1,0,0,0,2518,2519,1,0,0,0,2519,
        2522,1,0,0,0,2520,2523,5,207,0,0,2521,2523,3,268,134,0,2522,2520,
        1,0,0,0,2522,2521,1,0,0,0,2523,281,1,0,0,0,2524,2533,3,274,137,0,
        2525,2527,5,217,0,0,2526,2525,1,0,0,0,2526,2527,1,0,0,0,2527,2528,
        1,0,0,0,2528,2530,5,192,0,0,2529,2531,5,217,0,0,2530,2529,1,0,0,
        0,2530,2531,1,0,0,0,2531,2532,1,0,0,0,2532,2534,3,274,137,0,2533,
        2526,1,0,0,0,2533,2534,1,0,0,0,2534,283,1,0,0,0,2535,2536,3,268,
        134,0,2536,2537,5,215,0,0,2537,285,1,0,0,0,2538,2539,7,19,0,0,2539,
        287,1,0,0,0,2540,2543,3,272,136,0,2541,2543,3,278,139,0,2542,2540,
        1,0,0,0,2542,2541,1,0,0,0,2543,2552,1,0,0,0,2544,2546,5,217,0,0,
        2545,2544,1,0,0,0,2545,2546,1,0,0,0,2546,2547,1,0,0,0,2547,2549,
        5,190,0,0,2548,2550,5,217,0,0,2549,2548,1,0,0,0,2549,2550,1,0,0,
        0,2550,2551,1,0,0,0,2551,2553,5,199,0,0,2552,2545,1,0,0,0,2552,2553,
        1,0,0,0,2553,289,1,0,0,0,2554,2555,7,20,0,0,2555,291,1,0,0,0,2556,
        2557,7,21,0,0,2557,293,1,0,0,0,2558,2559,7,22,0,0,2559,295,1,0,0,
        0,2560,2561,5,212,0,0,2561,297,1,0,0,0,2562,2563,5,213,0,0,2563,
        299,1,0,0,0,2564,2566,5,217,0,0,2565,2564,1,0,0,0,2565,2566,1,0,
        0,0,2566,2570,1,0,0,0,2567,2571,5,211,0,0,2568,2571,3,298,149,0,
        2569,2571,3,296,148,0,2570,2567,1,0,0,0,2570,2568,1,0,0,0,2570,2569,
        1,0,0,0,2571,2573,1,0,0,0,2572,2574,5,217,0,0,2573,2572,1,0,0,0,
        2573,2574,1,0,0,0,2574,301,1,0,0,0,2575,2584,3,300,150,0,2576,2578,
        5,217,0,0,2577,2576,1,0,0,0,2577,2578,1,0,0,0,2578,2579,1,0,0,0,
        2579,2581,5,215,0,0,2580,2582,5,217,0,0,2581,2580,1,0,0,0,2581,2582,
        1,0,0,0,2582,2584,1,0,0,0,2583,2575,1,0,0,0,2583,2577,1,0,0,0,2584,
        2587,1,0,0,0,2585,2583,1,0,0,0,2585,2586,1,0,0,0,2586,303,1,0,0,
        0,2587,2585,1,0,0,0,2588,2590,7,23,0,0,2589,2588,1,0,0,0,2590,2591,
        1,0,0,0,2591,2589,1,0,0,0,2591,2592,1,0,0,0,2592,305,1,0,0,0,438,
        310,315,322,325,328,333,337,342,346,351,355,360,364,371,378,383,
        389,395,399,404,409,416,420,426,432,438,449,462,466,472,478,484,
        493,499,503,507,511,516,525,598,604,608,611,627,631,636,639,644,
        650,654,659,664,668,671,675,681,685,692,698,702,705,710,720,723,
        726,730,736,740,745,752,756,760,764,767,772,783,796,803,812,819,
        823,826,835,840,850,856,866,870,880,888,893,899,903,906,910,921,
        925,930,935,939,943,947,950,953,956,959,963,973,977,980,983,987,
        1010,1016,1020,1026,1035,1046,1051,1061,1065,1070,1078,1082,1086,
        1089,1093,1099,1103,1109,1112,1115,1118,1128,1132,1139,1141,1147,
        1151,1157,1161,1165,1173,1177,1183,1192,1194,1199,1208,1210,1218,
        1220,1225,1229,1233,1257,1267,1271,1276,1287,1291,1296,1310,1314,
        1323,1327,1330,1334,1338,1341,1345,1349,1352,1356,1359,1363,1365,
        1370,1374,1378,1382,1384,1390,1394,1397,1402,1406,1412,1415,1418,
        1422,1426,1433,1437,1443,1446,1450,1457,1461,1467,1470,1474,1482,
        1486,1489,1492,1496,1504,1508,1512,1514,1517,1522,1528,1532,1536,
        1541,1546,1550,1554,1559,1567,1569,1581,1585,1593,1597,1605,1609,
        1613,1617,1621,1625,1633,1637,1650,1657,1661,1672,1679,1684,1688,
        1693,1696,1702,1706,1709,1715,1719,1727,1731,1740,1744,1748,1752,
        1755,1759,1767,1771,1778,1787,1794,1798,1801,1804,1807,1811,1822,
        1832,1836,1843,1845,1856,1861,1865,1871,1875,1879,1884,1888,1893,
        1897,1902,1906,1911,1915,1920,1924,1929,1933,1936,1938,1943,1949,
        1955,1959,1965,1972,1977,1983,1987,1992,1997,2001,2005,2007,2011,
        2013,2016,2020,2027,2035,2039,2049,2053,2061,2065,2068,2071,2077,
        2083,2086,2090,2094,2098,2101,2109,2115,2120,2123,2127,2131,2135,
        2138,2146,2151,2154,2159,2163,2166,2169,2177,2183,2186,2194,2201,
        2205,2208,2211,2219,2224,2227,2230,2234,2238,2240,2244,2247,2255,
        2260,2265,2268,2271,2279,2283,2286,2290,2293,2297,2302,2305,2309,
        2313,2318,2322,2325,2329,2333,2337,2340,2347,2351,2355,2359,2364,
        2367,2370,2376,2380,2384,2388,2391,2395,2398,2401,2404,2407,2410,
        2414,2420,2424,2429,2437,2440,2444,2448,2450,2454,2458,2462,2465,
        2477,2481,2484,2487,2492,2494,2500,2502,2504,2513,2518,2522,2526,
        2530,2533,2542,2545,2549,2552,2565,2570,2573,2577,2581,2583,2585,
        2591
    ]

class vbaParser ( Parser ):

    grammarFileName = "vba.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "';'", "'#'", "'.'", "'!'", "'%'", 
                     "'@'", "'$'", "'ACCESS'", "'ADDRESSOF'", "'ALIAS'", 
                     "'AND'", "'ATTRIBUTE'", "'APPACTIVATE'", "'APPEND'", 
                     "'AS'", "'BEGIN'", "'BEEP'", "'BINARY'", "'BOOLEAN'", 
                     "'BYVAL'", "'BYREF'", "'BYTE'", "'CALL'", "'CASE'", 
                     "'CHDIR'", "'CHDRIVE'", "'CLASS'", "'CLOSE'", "'COLLECTION'", 
                     "'CONST'", "'DATABASE'", "'DATE'", "'DECLARE'", "'DEFBOOL'", 
                     "'DEFBYTE'", "'DEFDATE'", "'DEFDBL'", "'DEFDEC'", "'DEFCUR'", 
                     "'DEFINT'", "'DEFLNG'", "'DEFOBJ'", "'DEFSNG'", "'DEFSTR'", 
                     "'DEFVAR'", "'DELETESETTING'", "'DIM'", "'DO'", "'DOUBLE'", 
                     "'EACH'", "'ELSE'", "'ELSEIF'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'END'", "'ENUM'", 
                     "'EQV'", "'ERASE'", "'ERROR'", "'EVENT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'FALSE'", "'FILECOPY'", "'FRIEND'", "'FOR'", "'FUNCTION'", 
                     "'GET'", "'GLOBAL'", "'GOSUB'", "'GOTO'", "'IF'", "'IMP'", 
                     "'IMPLEMENTS'", "'IN'", "'INPUT'", "'IS'", "'INTEGER'", 
                     "'KILL'", "'LOAD'", "'LOCK'", "'LONG'", "'LOOP'", "'LEN'", 
                     "'LET'", "'LIB'", "'LIKE'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'LSET'", "'#CONST'", "'#IF'", 
                     "'#ELSEIF'", "'#ELSE'", "<INVALID>", "'ME'", "'MID'", 
                     "'MKDIR'", "'MOD'", "'NAME'", "'NEXT'", "'NEW'", "'NOT'", 
                     "'NOTHING'", "'NULL'", "'ON'", "<INVALID>", "<INVALID>", 
                     "'OPEN'", "'OPTIONAL'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'OR'", "'OUTPUT'", "'PARAMARRAY'", "'PRESERVE'", 
                     "'PRINT'", "'PRIVATE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'PTRSAFE'", "'PUBLIC'", "'PUT'", "'RANDOM'", "'RANDOMIZE'", 
                     "'RAISEEVENT'", "'READ'", "<INVALID>", "'REDIM'", "'REM'", 
                     "'RESET'", "'RESUME'", "'RETURN'", "'RMDIR'", "'RSET'", 
                     "'SAVEPICTURE'", "'SAVESETTING'", "'SEEK'", "'SELECT'", 
                     "'SENDKEYS'", "'SET'", "'SETATTR'", "'SHARED'", "'SINGLE'", 
                     "'SPC'", "'STATIC'", "'STEP'", "'STOP'", "'STRING'", 
                     "'SUB'", "'TAB'", "'TEXT'", "'THEN'", "'TIME'", "'TO'", 
                     "'TRUE'", "'TYPE'", "'TYPEOF'", "'UNLOAD'", "'UNLOCK'", 
                     "'UNTIL'", "'VARIANT'", "'VERSION'", "'WEND'", "'WHILE'", 
                     "'WIDTH'", "'WITH'", "'WITHEVENTS'", "'WRITE'", "'XOR'", 
                     "'&'", "':='", "<INVALID>", "'='", "'>='", "'>'", "'<='", 
                     "'('", "'<'", "'-'", "'-='", "'*'", "'<>'", "'+'", 
                     "'+='", "'^'", "')'", "'['", "']'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'''", "':'", "'_'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "ACCESS", "ADDRESSOF", "ALIAS", "AND", 
                      "ATTRIBUTE", "APPACTIVATE", "APPEND", "AS", "BEGIN", 
                      "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", 
                      "CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", 
                      "COLLECTION", "CONST", "DATABASE", "DATE", "DECLARE", 
                      "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFDEC", 
                      "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", 
                      "DEFSTR", "DEFVAR", "DELETESETTING", "DIM", "DO", 
                      "DOUBLE", "EACH", "ELSE", "ELSEIF", "END_ENUM", "END_PROPERTY", 
                      "END_SELECT", "END_TYPE", "END_WITH", "END", "ENUM", 
                      "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", 
                      "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", 
                      "FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", 
                      "GOSUB", "GOTO", "IF", "IMP", "IMPLEMENTS", "IN", 
                      "INPUT", "IS", "INTEGER", "KILL", "LOAD", "LOCK", 
                      "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", 
                      "LOCK_READ", "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", 
                      "MACRO_CONST", "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", 
                      "MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", 
                      "NEXT", "NEW", "NOT", "NOTHING", "NULL_", "ON", "ON_ERROR", 
                      "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
                      "OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", 
                      "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", 
                      "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", "PROPERTY_SET", 
                      "PTRSAFE", "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", 
                      "RAISEEVENT", "READ", "READ_WRITE", "REDIM", "REM", 
                      "RESET", "RESUME", "RETURN", "RMDIR", "RSET", "SAVEPICTURE", 
                      "SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", 
                      "SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", 
                      "STOP", "STRING", "SUB", "TAB", "TEXT", "THEN", "TIME", 
                      "TO", "TRUE", "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", 
                      "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", 
                      "WITH", "WITHEVENTS", "WRITE", "XOR", "AMPERSAND", 
                      "ASSIGN", "DIV", "EQ", "GEQ", "GT", "LEQ", "LPAREN", 
                      "LT", "MINUS", "MINUS_EQ", "MULT", "NEQ", "PLUS", 
                      "PLUS_EQ", "POW", "RPAREN", "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", 
                      "GUID", "STRINGLITERAL", "OCTLITERAL", "HEXLITERAL", 
                      "SHORTLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", 
                      "DATELITERAL", "LINE_CONTINUATION", "NEWLINE", "REMCOMMENT", 
                      "COMMENT", "SINGLEQUOTE", "COLON", "UNDERSCORE", "WS", 
                      "IDENTIFIER" ]

    RULE_startRule = 0
    RULE_module = 1
    RULE_moduleHeader = 2
    RULE_moduleConfig = 3
    RULE_moduleConfigElement = 4
    RULE_moduleAttributes = 5
    RULE_moduleDeclarations = 6
    RULE_moduleOption = 7
    RULE_moduleDeclarationsElement = 8
    RULE_macroStmt = 9
    RULE_moduleBody = 10
    RULE_moduleBodyElement = 11
    RULE_attributeStmt = 12
    RULE_block = 13
    RULE_blockStmt = 14
    RULE_appactivateStmt = 15
    RULE_beepStmt = 16
    RULE_chdirStmt = 17
    RULE_chdriveStmt = 18
    RULE_closeStmt = 19
    RULE_constStmt = 20
    RULE_constSubStmt = 21
    RULE_dateStmt = 22
    RULE_declareStmt = 23
    RULE_deftypeStmt = 24
    RULE_deleteSettingStmt = 25
    RULE_doLoopStmt = 26
    RULE_endStmt = 27
    RULE_enumerationStmt = 28
    RULE_enumerationStmt_Constant = 29
    RULE_eraseStmt = 30
    RULE_errorStmt = 31
    RULE_eventStmt = 32
    RULE_exitStmt = 33
    RULE_filecopyStmt = 34
    RULE_forEachStmt = 35
    RULE_forNextStmt = 36
    RULE_functionStmt = 37
    RULE_getStmt = 38
    RULE_goSubStmt = 39
    RULE_goToStmt = 40
    RULE_ifThenElseStmt = 41
    RULE_ifBlockStmt = 42
    RULE_ifConditionStmt = 43
    RULE_ifElseIfBlockStmt = 44
    RULE_ifElseBlockStmt = 45
    RULE_implementsStmt = 46
    RULE_inputStmt = 47
    RULE_killStmt = 48
    RULE_letStmt = 49
    RULE_lineInputStmt = 50
    RULE_lineNumber = 51
    RULE_loadStmt = 52
    RULE_lockStmt = 53
    RULE_lsetStmt = 54
    RULE_macroConstStmt = 55
    RULE_macroIfThenElseStmt = 56
    RULE_macroIfBlockStmt = 57
    RULE_macroElseIfBlockStmt = 58
    RULE_macroElseBlockStmt = 59
    RULE_midStmt = 60
    RULE_mkdirStmt = 61
    RULE_nameStmt = 62
    RULE_onErrorStmt = 63
    RULE_onGoToStmt = 64
    RULE_onGoSubStmt = 65
    RULE_openStmt = 66
    RULE_outputList = 67
    RULE_outputList_Expression = 68
    RULE_printStmt = 69
    RULE_propertyGetStmt = 70
    RULE_propertySetStmt = 71
    RULE_propertyLetStmt = 72
    RULE_putStmt = 73
    RULE_raiseEventStmt = 74
    RULE_randomizeStmt = 75
    RULE_redimStmt = 76
    RULE_redimSubStmt = 77
    RULE_resetStmt = 78
    RULE_resumeStmt = 79
    RULE_returnStmt = 80
    RULE_rmdirStmt = 81
    RULE_rsetStmt = 82
    RULE_savepictureStmt = 83
    RULE_saveSettingStmt = 84
    RULE_seekStmt = 85
    RULE_selectCaseStmt = 86
    RULE_sC_Selection = 87
    RULE_sC_Case = 88
    RULE_sC_Cond = 89
    RULE_sendkeysStmt = 90
    RULE_setattrStmt = 91
    RULE_setStmt = 92
    RULE_stopStmt = 93
    RULE_subStmt = 94
    RULE_timeStmt = 95
    RULE_typeStmt = 96
    RULE_typeStmt_Element = 97
    RULE_typeOfStmt = 98
    RULE_unloadStmt = 99
    RULE_unlockStmt = 100
    RULE_expression = 101
    RULE_newExpress = 102
    RULE_notOperatorExpression = 103
    RULE_parenthesizedExpression = 104
    RULE_unaryMinusExpression = 105
    RULE_variableStmt = 106
    RULE_variableListStmt = 107
    RULE_variableSubStmt = 108
    RULE_whileWendStmt = 109
    RULE_widthStmt = 110
    RULE_withStmt = 111
    RULE_writeStmt = 112
    RULE_fileNumber = 113
    RULE_explicitCallStmt = 114
    RULE_eCS_ProcedureCall = 115
    RULE_eCS_MemberProcedureCall = 116
    RULE_implicitCallStmt_InBlock = 117
    RULE_iCS_B_MemberProcedureCall = 118
    RULE_iCS_B_ProcedureCall = 119
    RULE_implicitCallStmt_InStmt = 120
    RULE_iCS_S_VariableOrProcedureCall = 121
    RULE_iCS_S_ProcedureOrArrayCall = 122
    RULE_iCS_S_MembersCall = 123
    RULE_iCS_S_MemberCall = 124
    RULE_iCS_S_DictionaryCall = 125
    RULE_argsCall = 126
    RULE_argCall = 127
    RULE_dictionaryCallStmt = 128
    RULE_argList = 129
    RULE_arg = 130
    RULE_argDefaultValue = 131
    RULE_subscripts = 132
    RULE_subscript_ = 133
    RULE_ambiguousIdentifier = 134
    RULE_asTypeClause = 135
    RULE_baseType = 136
    RULE_certainIdentifier = 137
    RULE_comparisonOperator = 138
    RULE_complexType = 139
    RULE_fieldLength = 140
    RULE_letterrange = 141
    RULE_lineLabel = 142
    RULE_literal = 143
    RULE_type_ = 144
    RULE_typeHint = 145
    RULE_visibility = 146
    RULE_ambiguousKeyword = 147
    RULE_remComment = 148
    RULE_comment = 149
    RULE_endOfLine = 150
    RULE_endOfStatement = 151
    RULE_wsc = 152

    ruleNames =  [ "startRule", "module", "moduleHeader", "moduleConfig", 
                   "moduleConfigElement", "moduleAttributes", "moduleDeclarations", 
                   "moduleOption", "moduleDeclarationsElement", "macroStmt", 
                   "moduleBody", "moduleBodyElement", "attributeStmt", "block", 
                   "blockStmt", "appactivateStmt", "beepStmt", "chdirStmt", 
                   "chdriveStmt", "closeStmt", "constStmt", "constSubStmt", 
                   "dateStmt", "declareStmt", "deftypeStmt", "deleteSettingStmt", 
                   "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant", 
                   "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", 
                   "forEachStmt", "forNextStmt", "functionStmt", "getStmt", 
                   "goSubStmt", "goToStmt", "ifThenElseStmt", "ifBlockStmt", 
                   "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
                   "implementsStmt", "inputStmt", "killStmt", "letStmt", 
                   "lineInputStmt", "lineNumber", "loadStmt", "lockStmt", 
                   "lsetStmt", "macroConstStmt", "macroIfThenElseStmt", 
                   "macroIfBlockStmt", "macroElseIfBlockStmt", "macroElseBlockStmt", 
                   "midStmt", "mkdirStmt", "nameStmt", "onErrorStmt", "onGoToStmt", 
                   "onGoSubStmt", "openStmt", "outputList", "outputList_Expression", 
                   "printStmt", "propertyGetStmt", "propertySetStmt", "propertyLetStmt", 
                   "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
                   "redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", 
                   "rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", 
                   "seekStmt", "selectCaseStmt", "sC_Selection", "sC_Case", 
                   "sC_Cond", "sendkeysStmt", "setattrStmt", "setStmt", 
                   "stopStmt", "subStmt", "timeStmt", "typeStmt", "typeStmt_Element", 
                   "typeOfStmt", "unloadStmt", "unlockStmt", "expression", 
                   "newExpress", "notOperatorExpression", "parenthesizedExpression", 
                   "unaryMinusExpression", "variableStmt", "variableListStmt", 
                   "variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", 
                   "writeStmt", "fileNumber", "explicitCallStmt", "eCS_ProcedureCall", 
                   "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
                   "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", "implicitCallStmt_InStmt", 
                   "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
                   "iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", 
                   "argsCall", "argCall", "dictionaryCallStmt", "argList", 
                   "arg", "argDefaultValue", "subscripts", "subscript_", 
                   "ambiguousIdentifier", "asTypeClause", "baseType", "certainIdentifier", 
                   "comparisonOperator", "complexType", "fieldLength", "letterrange", 
                   "lineLabel", "literal", "type_", "typeHint", "visibility", 
                   "ambiguousKeyword", "remComment", "comment", "endOfLine", 
                   "endOfStatement", "wsc" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    ACCESS=9
    ADDRESSOF=10
    ALIAS=11
    AND=12
    ATTRIBUTE=13
    APPACTIVATE=14
    APPEND=15
    AS=16
    BEGIN=17
    BEEP=18
    BINARY=19
    BOOLEAN=20
    BYVAL=21
    BYREF=22
    BYTE=23
    CALL=24
    CASE=25
    CHDIR=26
    CHDRIVE=27
    CLASS=28
    CLOSE=29
    COLLECTION=30
    CONST=31
    DATABASE=32
    DATE=33
    DECLARE=34
    DEFBOOL=35
    DEFBYTE=36
    DEFDATE=37
    DEFDBL=38
    DEFDEC=39
    DEFCUR=40
    DEFINT=41
    DEFLNG=42
    DEFOBJ=43
    DEFSNG=44
    DEFSTR=45
    DEFVAR=46
    DELETESETTING=47
    DIM=48
    DO=49
    DOUBLE=50
    EACH=51
    ELSE=52
    ELSEIF=53
    END_ENUM=54
    END_PROPERTY=55
    END_SELECT=56
    END_TYPE=57
    END_WITH=58
    END=59
    ENUM=60
    EQV=61
    ERASE=62
    ERROR=63
    EVENT=64
    EXIT_DO=65
    EXIT_FOR=66
    EXIT_FUNCTION=67
    EXIT_PROPERTY=68
    EXIT_SUB=69
    FALSE=70
    FILECOPY=71
    FRIEND=72
    FOR=73
    FUNCTION=74
    GET=75
    GLOBAL=76
    GOSUB=77
    GOTO=78
    IF=79
    IMP=80
    IMPLEMENTS=81
    IN=82
    INPUT=83
    IS=84
    INTEGER=85
    KILL=86
    LOAD=87
    LOCK=88
    LONG=89
    LOOP=90
    LEN=91
    LET=92
    LIB=93
    LIKE=94
    LINE_INPUT=95
    LOCK_READ=96
    LOCK_WRITE=97
    LOCK_READ_WRITE=98
    LSET=99
    MACRO_CONST=100
    MACRO_IF=101
    MACRO_ELSEIF=102
    MACRO_ELSE=103
    MACRO_END_IF=104
    ME=105
    MID=106
    MKDIR=107
    MOD=108
    NAME=109
    NEXT=110
    NEW=111
    NOT=112
    NOTHING=113
    NULL_=114
    ON=115
    ON_ERROR=116
    ON_LOCAL_ERROR=117
    OPEN=118
    OPTIONAL=119
    OPTION_BASE=120
    OPTION_EXPLICIT=121
    OPTION_COMPARE=122
    OPTION_PRIVATE_MODULE=123
    OR=124
    OUTPUT=125
    PARAMARRAY=126
    PRESERVE=127
    PRINT=128
    PRIVATE=129
    PROPERTY_GET=130
    PROPERTY_LET=131
    PROPERTY_SET=132
    PTRSAFE=133
    PUBLIC=134
    PUT=135
    RANDOM=136
    RANDOMIZE=137
    RAISEEVENT=138
    READ=139
    READ_WRITE=140
    REDIM=141
    REM=142
    RESET=143
    RESUME=144
    RETURN=145
    RMDIR=146
    RSET=147
    SAVEPICTURE=148
    SAVESETTING=149
    SEEK=150
    SELECT=151
    SENDKEYS=152
    SET=153
    SETATTR=154
    SHARED=155
    SINGLE=156
    SPC=157
    STATIC=158
    STEP=159
    STOP=160
    STRING=161
    SUB=162
    TAB=163
    TEXT=164
    THEN=165
    TIME=166
    TO=167
    TRUE=168
    TYPE=169
    TYPEOF=170
    UNLOAD=171
    UNLOCK=172
    UNTIL=173
    VARIANT=174
    VERSION=175
    WEND=176
    WHILE=177
    WIDTH=178
    WITH=179
    WITHEVENTS=180
    WRITE=181
    XOR=182
    AMPERSAND=183
    ASSIGN=184
    DIV=185
    EQ=186
    GEQ=187
    GT=188
    LEQ=189
    LPAREN=190
    LT=191
    MINUS=192
    MINUS_EQ=193
    MULT=194
    NEQ=195
    PLUS=196
    PLUS_EQ=197
    POW=198
    RPAREN=199
    L_SQUARE_BRACKET=200
    R_SQUARE_BRACKET=201
    GUID=202
    STRINGLITERAL=203
    OCTLITERAL=204
    HEXLITERAL=205
    SHORTLITERAL=206
    INTEGERLITERAL=207
    DOUBLELITERAL=208
    DATELITERAL=209
    LINE_CONTINUATION=210
    NEWLINE=211
    REMCOMMENT=212
    COMMENT=213
    SINGLEQUOTE=214
    COLON=215
    UNDERSCORE=216
    WS=217
    IDENTIFIER=218

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(vbaParser.ModuleContext,0)


        def EOF(self):
            return self.getToken(vbaParser.EOF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRule" ):
                return visitor.visitStartRule(self)
            else:
                return visitor.visitChildren(self)




    def startRule(self):

        localctx = vbaParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.module()
            self.state = 307
            self.match(vbaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def moduleHeader(self):
            return self.getTypedRuleContext(vbaParser.ModuleHeaderContext,0)


        def moduleConfig(self):
            return self.getTypedRuleContext(vbaParser.ModuleConfigContext,0)


        def moduleAttributes(self):
            return self.getTypedRuleContext(vbaParser.ModuleAttributesContext,0)


        def moduleDeclarations(self):
            return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,0)


        def moduleBody(self):
            return self.getTypedRuleContext(vbaParser.ModuleBodyContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule" ):
                return visitor.visitModule(self)
            else:
                return visitor.visitChildren(self)




    def module(self):

        localctx = vbaParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 309
                self.match(vbaParser.WS)


            self.state = 315
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 312
                    self.endOfLine() 
                self.state = 317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==175:
                self.state = 318
                self.moduleHeader()
                self.state = 322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 319
                        self.endOfLine() 
                    self.state = 324
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)



            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 327
                self.moduleConfig()


            self.state = 333
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 330
                    self.endOfLine() 
                self.state = 335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 336
                self.moduleAttributes()


            self.state = 342
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 339
                    self.endOfLine() 
                self.state = 344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 345
                self.moduleDeclarations()


            self.state = 351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 348
                    self.endOfLine() 
                self.state = 353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 6773413840370532373) != 0) or _la==158 or _la==162:
                self.state = 354
                self.moduleBody()


            self.state = 360
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 357
                    self.endOfLine() 
                self.state = 362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 363
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def DOUBLELITERAL(self):
            return self.getToken(vbaParser.DOUBLELITERAL, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_moduleHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleHeader" ):
                listener.enterModuleHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleHeader" ):
                listener.exitModuleHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleHeader" ):
                return visitor.visitModuleHeader(self)
            else:
                return visitor.visitChildren(self)




    def moduleHeader(self):

        localctx = vbaParser.ModuleHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_moduleHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(vbaParser.VERSION)
            self.state = 367
            self.match(vbaParser.WS)
            self.state = 368
            self.match(vbaParser.DOUBLELITERAL)
            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 369
                self.match(vbaParser.WS)
                self.state = 370
                self.match(vbaParser.CLASS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleConfigContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def GUID(self):
            return self.getToken(vbaParser.GUID, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def moduleConfigElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleConfigElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleConfigElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleConfig

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConfig" ):
                listener.enterModuleConfig(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConfig" ):
                listener.exitModuleConfig(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleConfig" ):
                return visitor.visitModuleConfig(self)
            else:
                return visitor.visitChildren(self)




    def moduleConfig(self):

        localctx = vbaParser.ModuleConfigContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_moduleConfig)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(vbaParser.BEGIN)
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 374
                self.match(vbaParser.WS)
                self.state = 375
                self.match(vbaParser.GUID)
                self.state = 376
                self.match(vbaParser.WS)
                self.state = 377
                self.ambiguousIdentifier()


            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & 71) != 0):
                self.state = 380
                self.endOfLine()
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 387 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 386
                    self.moduleConfigElement()

                else:
                    raise NoViableAltException(self)
                self.state = 389 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

            self.state = 391
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleConfigElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LiteralContext)
            else:
                return self.getTypedRuleContext(vbaParser.LiteralContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleConfigElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConfigElement" ):
                listener.enterModuleConfigElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConfigElement" ):
                listener.exitModuleConfigElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleConfigElement" ):
                return visitor.visitModuleConfigElement(self)
            else:
                return visitor.visitChildren(self)




    def moduleConfigElement(self):

        localctx = vbaParser.ModuleConfigElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_moduleConfigElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.ambiguousIdentifier()
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 394
                self.match(vbaParser.WS)


            self.state = 397
            self.match(vbaParser.EQ)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 398
                self.match(vbaParser.WS)


            self.state = 401
            self.literal()
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==215:
                self.state = 402
                self.match(vbaParser.COLON)
                self.state = 403
                self.literal()


            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & 71) != 0):
                self.state = 406
                self.endOfLine()
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleAttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AttributeStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.AttributeStmtContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleAttributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAttributes" ):
                listener.enterModuleAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAttributes" ):
                listener.exitModuleAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleAttributes" ):
                return visitor.visitModuleAttributes(self)
            else:
                return visitor.visitChildren(self)




    def moduleAttributes(self):

        localctx = vbaParser.ModuleAttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleAttributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 412
                self.attributeStmt()
                self.state = 414 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 413
                        self.endOfLine()

                    else:
                        raise NoViableAltException(self)
                    self.state = 416 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 420 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==13):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleDeclarationsElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclarations" ):
                listener.enterModuleDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclarations" ):
                listener.exitModuleDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleDeclarations" ):
                return visitor.visitModuleDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def moduleDeclarations(self):

        localctx = vbaParser.ModuleDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleDeclarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.moduleDeclarationsElement()
            self.state = 432
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 424 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 423
                            self.endOfLine()

                        else:
                            raise NoViableAltException(self)
                        self.state = 426 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                    self.state = 428
                    self.moduleDeclarationsElement() 
                self.state = 434
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

            self.state = 438
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 435
                    self.endOfLine() 
                self.state = 440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_moduleOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OptionExplicitStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_EXPLICIT(self):
            return self.getToken(vbaParser.OPTION_EXPLICIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionExplicitStmt" ):
                listener.enterOptionExplicitStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionExplicitStmt" ):
                listener.exitOptionExplicitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionExplicitStmt" ):
                return visitor.visitOptionExplicitStmt(self)
            else:
                return visitor.visitChildren(self)


    class OptionBaseStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_BASE(self):
            return self.getToken(vbaParser.OPTION_BASE, 0)
        def WS(self):
            return self.getToken(vbaParser.WS, 0)
        def SHORTLITERAL(self):
            return self.getToken(vbaParser.SHORTLITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionBaseStmt" ):
                listener.enterOptionBaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionBaseStmt" ):
                listener.exitOptionBaseStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionBaseStmt" ):
                return visitor.visitOptionBaseStmt(self)
            else:
                return visitor.visitChildren(self)


    class OptionPrivateModuleStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_PRIVATE_MODULE(self):
            return self.getToken(vbaParser.OPTION_PRIVATE_MODULE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionPrivateModuleStmt" ):
                listener.enterOptionPrivateModuleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionPrivateModuleStmt" ):
                listener.exitOptionPrivateModuleStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionPrivateModuleStmt" ):
                return visitor.visitOptionPrivateModuleStmt(self)
            else:
                return visitor.visitChildren(self)


    class OptionCompareStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_COMPARE(self):
            return self.getToken(vbaParser.OPTION_COMPARE, 0)
        def WS(self):
            return self.getToken(vbaParser.WS, 0)
        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)
        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)
        def DATABASE(self):
            return self.getToken(vbaParser.DATABASE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionCompareStmt" ):
                listener.enterOptionCompareStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionCompareStmt" ):
                listener.exitOptionCompareStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionCompareStmt" ):
                return visitor.visitOptionCompareStmt(self)
            else:
                return visitor.visitChildren(self)



    def moduleOption(self):

        localctx = vbaParser.ModuleOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleOption)
        self._la = 0 # Token type
        try:
            self.state = 449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [120]:
                localctx = vbaParser.OptionBaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 441
                self.match(vbaParser.OPTION_BASE)
                self.state = 442
                self.match(vbaParser.WS)
                self.state = 443
                self.match(vbaParser.SHORTLITERAL)
                pass
            elif token in [122]:
                localctx = vbaParser.OptionCompareStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 444
                self.match(vbaParser.OPTION_COMPARE)
                self.state = 445
                self.match(vbaParser.WS)
                self.state = 446
                _la = self._input.LA(1)
                if not(_la==19 or _la==32 or _la==164):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [121]:
                localctx = vbaParser.OptionExplicitStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 447
                self.match(vbaParser.OPTION_EXPLICIT)
                pass
            elif token in [123]:
                localctx = vbaParser.OptionPrivateModuleStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 448
                self.match(vbaParser.OPTION_PRIVATE_MODULE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDeclarationsElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comment(self):
            return self.getTypedRuleContext(vbaParser.CommentContext,0)


        def declareStmt(self):
            return self.getTypedRuleContext(vbaParser.DeclareStmtContext,0)


        def enumerationStmt(self):
            return self.getTypedRuleContext(vbaParser.EnumerationStmtContext,0)


        def eventStmt(self):
            return self.getTypedRuleContext(vbaParser.EventStmtContext,0)


        def constStmt(self):
            return self.getTypedRuleContext(vbaParser.ConstStmtContext,0)


        def implementsStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplementsStmtContext,0)


        def variableStmt(self):
            return self.getTypedRuleContext(vbaParser.VariableStmtContext,0)


        def moduleOption(self):
            return self.getTypedRuleContext(vbaParser.ModuleOptionContext,0)


        def typeStmt(self):
            return self.getTypedRuleContext(vbaParser.TypeStmtContext,0)


        def deftypeStmt(self):
            return self.getTypedRuleContext(vbaParser.DeftypeStmtContext,0)


        def macroStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleDeclarationsElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclarationsElement" ):
                listener.enterModuleDeclarationsElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclarationsElement" ):
                listener.exitModuleDeclarationsElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleDeclarationsElement" ):
                return visitor.visitModuleDeclarationsElement(self)
            else:
                return visitor.visitChildren(self)




    def moduleDeclarationsElement(self):

        localctx = vbaParser.ModuleDeclarationsElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_moduleDeclarationsElement)
        try:
            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.comment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.declareStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 453
                self.enumerationStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 454
                self.eventStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 455
                self.constStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 456
                self.implementsStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 457
                self.variableStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 458
                self.moduleOption()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 459
                self.typeStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 460
                self.deftypeStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 461
                self.macroStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroConstStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroConstStmtContext,0)


        def macroIfThenElseStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroIfThenElseStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_macroStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroStmt" ):
                listener.enterMacroStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroStmt" ):
                listener.exitMacroStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroStmt" ):
                return visitor.visitMacroStmt(self)
            else:
                return visitor.visitChildren(self)




    def macroStmt(self):

        localctx = vbaParser.MacroStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_macroStmt)
        try:
            self.state = 466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 464
                self.macroConstStmt()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 2)
                self.state = 465
                self.macroIfThenElseStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBody" ):
                listener.enterModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBody" ):
                listener.exitModuleBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleBody" ):
                return visitor.visitModuleBody(self)
            else:
                return visitor.visitChildren(self)




    def moduleBody(self):

        localctx = vbaParser.ModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_moduleBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.moduleBodyElement()
            self.state = 478
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 470 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 469
                        self.endOfLine()
                        self.state = 472 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & 71) != 0)):
                            break

                    self.state = 474
                    self.moduleBodyElement() 
                self.state = 480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 484
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 481
                    self.endOfLine() 
                self.state = 486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleBodyElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionStmt(self):
            return self.getTypedRuleContext(vbaParser.FunctionStmtContext,0)


        def propertyGetStmt(self):
            return self.getTypedRuleContext(vbaParser.PropertyGetStmtContext,0)


        def propertySetStmt(self):
            return self.getTypedRuleContext(vbaParser.PropertySetStmtContext,0)


        def propertyLetStmt(self):
            return self.getTypedRuleContext(vbaParser.PropertyLetStmtContext,0)


        def subStmt(self):
            return self.getTypedRuleContext(vbaParser.SubStmtContext,0)


        def macroStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleBodyElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBodyElement" ):
                listener.enterModuleBodyElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBodyElement" ):
                listener.exitModuleBodyElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleBodyElement" ):
                return visitor.visitModuleBodyElement(self)
            else:
                return visitor.visitChildren(self)




    def moduleBodyElement(self):

        localctx = vbaParser.ModuleBodyElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_moduleBodyElement)
        try:
            self.state = 493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.functionStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.propertyGetStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 489
                self.propertySetStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 490
                self.propertyLetStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 491
                self.subStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 492
                self.macroStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LiteralContext)
            else:
                return self.getTypedRuleContext(vbaParser.LiteralContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_attributeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeStmt" ):
                listener.enterAttributeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeStmt" ):
                listener.exitAttributeStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeStmt" ):
                return visitor.visitAttributeStmt(self)
            else:
                return visitor.visitChildren(self)




    def attributeStmt(self):

        localctx = vbaParser.AttributeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attributeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(vbaParser.ATTRIBUTE)
            self.state = 496
            self.match(vbaParser.WS)
            self.state = 497
            self.implicitCallStmt_InStmt()
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 498
                self.match(vbaParser.WS)


            self.state = 501
            self.match(vbaParser.EQ)
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 502
                self.match(vbaParser.WS)


            self.state = 505
            self.literal()
            self.state = 516
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 506
                        self.match(vbaParser.WS)


                    self.state = 509
                    self.match(vbaParser.T__0)
                    self.state = 511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 510
                        self.match(vbaParser.WS)


                    self.state = 513
                    self.literal() 
                self.state = 518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockStmtContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = vbaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.blockStmt()
            self.state = 525
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 520
                    self.endOfStatement()
                    self.state = 521
                    self.blockStmt() 
                self.state = 527
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

            self.state = 528
            self.endOfStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineLabel(self):
            return self.getTypedRuleContext(vbaParser.LineLabelContext,0)


        def appactivateStmt(self):
            return self.getTypedRuleContext(vbaParser.AppactivateStmtContext,0)


        def attributeStmt(self):
            return self.getTypedRuleContext(vbaParser.AttributeStmtContext,0)


        def beepStmt(self):
            return self.getTypedRuleContext(vbaParser.BeepStmtContext,0)


        def chdirStmt(self):
            return self.getTypedRuleContext(vbaParser.ChdirStmtContext,0)


        def chdriveStmt(self):
            return self.getTypedRuleContext(vbaParser.ChdriveStmtContext,0)


        def closeStmt(self):
            return self.getTypedRuleContext(vbaParser.CloseStmtContext,0)


        def constStmt(self):
            return self.getTypedRuleContext(vbaParser.ConstStmtContext,0)


        def dateStmt(self):
            return self.getTypedRuleContext(vbaParser.DateStmtContext,0)


        def deleteSettingStmt(self):
            return self.getTypedRuleContext(vbaParser.DeleteSettingStmtContext,0)


        def doLoopStmt(self):
            return self.getTypedRuleContext(vbaParser.DoLoopStmtContext,0)


        def endStmt(self):
            return self.getTypedRuleContext(vbaParser.EndStmtContext,0)


        def eraseStmt(self):
            return self.getTypedRuleContext(vbaParser.EraseStmtContext,0)


        def errorStmt(self):
            return self.getTypedRuleContext(vbaParser.ErrorStmtContext,0)


        def exitStmt(self):
            return self.getTypedRuleContext(vbaParser.ExitStmtContext,0)


        def explicitCallStmt(self):
            return self.getTypedRuleContext(vbaParser.ExplicitCallStmtContext,0)


        def filecopyStmt(self):
            return self.getTypedRuleContext(vbaParser.FilecopyStmtContext,0)


        def forEachStmt(self):
            return self.getTypedRuleContext(vbaParser.ForEachStmtContext,0)


        def forNextStmt(self):
            return self.getTypedRuleContext(vbaParser.ForNextStmtContext,0)


        def getStmt(self):
            return self.getTypedRuleContext(vbaParser.GetStmtContext,0)


        def goSubStmt(self):
            return self.getTypedRuleContext(vbaParser.GoSubStmtContext,0)


        def goToStmt(self):
            return self.getTypedRuleContext(vbaParser.GoToStmtContext,0)


        def ifThenElseStmt(self):
            return self.getTypedRuleContext(vbaParser.IfThenElseStmtContext,0)


        def implementsStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplementsStmtContext,0)


        def inputStmt(self):
            return self.getTypedRuleContext(vbaParser.InputStmtContext,0)


        def killStmt(self):
            return self.getTypedRuleContext(vbaParser.KillStmtContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(vbaParser.LetStmtContext,0)


        def lineInputStmt(self):
            return self.getTypedRuleContext(vbaParser.LineInputStmtContext,0)


        def lineNumber(self):
            return self.getTypedRuleContext(vbaParser.LineNumberContext,0)


        def loadStmt(self):
            return self.getTypedRuleContext(vbaParser.LoadStmtContext,0)


        def lockStmt(self):
            return self.getTypedRuleContext(vbaParser.LockStmtContext,0)


        def lsetStmt(self):
            return self.getTypedRuleContext(vbaParser.LsetStmtContext,0)


        def macroStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroStmtContext,0)


        def midStmt(self):
            return self.getTypedRuleContext(vbaParser.MidStmtContext,0)


        def mkdirStmt(self):
            return self.getTypedRuleContext(vbaParser.MkdirStmtContext,0)


        def nameStmt(self):
            return self.getTypedRuleContext(vbaParser.NameStmtContext,0)


        def onErrorStmt(self):
            return self.getTypedRuleContext(vbaParser.OnErrorStmtContext,0)


        def onGoToStmt(self):
            return self.getTypedRuleContext(vbaParser.OnGoToStmtContext,0)


        def onGoSubStmt(self):
            return self.getTypedRuleContext(vbaParser.OnGoSubStmtContext,0)


        def openStmt(self):
            return self.getTypedRuleContext(vbaParser.OpenStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(vbaParser.PrintStmtContext,0)


        def putStmt(self):
            return self.getTypedRuleContext(vbaParser.PutStmtContext,0)


        def raiseEventStmt(self):
            return self.getTypedRuleContext(vbaParser.RaiseEventStmtContext,0)


        def randomizeStmt(self):
            return self.getTypedRuleContext(vbaParser.RandomizeStmtContext,0)


        def redimStmt(self):
            return self.getTypedRuleContext(vbaParser.RedimStmtContext,0)


        def resetStmt(self):
            return self.getTypedRuleContext(vbaParser.ResetStmtContext,0)


        def resumeStmt(self):
            return self.getTypedRuleContext(vbaParser.ResumeStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(vbaParser.ReturnStmtContext,0)


        def rmdirStmt(self):
            return self.getTypedRuleContext(vbaParser.RmdirStmtContext,0)


        def rsetStmt(self):
            return self.getTypedRuleContext(vbaParser.RsetStmtContext,0)


        def savepictureStmt(self):
            return self.getTypedRuleContext(vbaParser.SavepictureStmtContext,0)


        def saveSettingStmt(self):
            return self.getTypedRuleContext(vbaParser.SaveSettingStmtContext,0)


        def seekStmt(self):
            return self.getTypedRuleContext(vbaParser.SeekStmtContext,0)


        def selectCaseStmt(self):
            return self.getTypedRuleContext(vbaParser.SelectCaseStmtContext,0)


        def sendkeysStmt(self):
            return self.getTypedRuleContext(vbaParser.SendkeysStmtContext,0)


        def setattrStmt(self):
            return self.getTypedRuleContext(vbaParser.SetattrStmtContext,0)


        def setStmt(self):
            return self.getTypedRuleContext(vbaParser.SetStmtContext,0)


        def stopStmt(self):
            return self.getTypedRuleContext(vbaParser.StopStmtContext,0)


        def timeStmt(self):
            return self.getTypedRuleContext(vbaParser.TimeStmtContext,0)


        def unloadStmt(self):
            return self.getTypedRuleContext(vbaParser.UnloadStmtContext,0)


        def unlockStmt(self):
            return self.getTypedRuleContext(vbaParser.UnlockStmtContext,0)


        def variableStmt(self):
            return self.getTypedRuleContext(vbaParser.VariableStmtContext,0)


        def whileWendStmt(self):
            return self.getTypedRuleContext(vbaParser.WhileWendStmtContext,0)


        def widthStmt(self):
            return self.getTypedRuleContext(vbaParser.WidthStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(vbaParser.WithStmtContext,0)


        def writeStmt(self):
            return self.getTypedRuleContext(vbaParser.WriteStmtContext,0)


        def implicitCallStmt_InBlock(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InBlockContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStmt" ):
                return visitor.visitBlockStmt(self)
            else:
                return visitor.visitChildren(self)




    def blockStmt(self):

        localctx = vbaParser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_blockStmt)
        try:
            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 530
                self.lineLabel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.appactivateStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 532
                self.attributeStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 533
                self.beepStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 534
                self.chdirStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 535
                self.chdriveStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 536
                self.closeStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 537
                self.constStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 538
                self.dateStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 539
                self.deleteSettingStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 540
                self.doLoopStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 541
                self.endStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 542
                self.eraseStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 543
                self.errorStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 544
                self.exitStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 545
                self.explicitCallStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 546
                self.filecopyStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 547
                self.forEachStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 548
                self.forNextStmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 549
                self.getStmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 550
                self.goSubStmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 551
                self.goToStmt()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 552
                self.ifThenElseStmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 553
                self.implementsStmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 554
                self.inputStmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 555
                self.killStmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 556
                self.letStmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 557
                self.lineInputStmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 558
                self.lineNumber()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 559
                self.loadStmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 560
                self.lockStmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 561
                self.lsetStmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 562
                self.macroStmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 563
                self.midStmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 564
                self.mkdirStmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 565
                self.nameStmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 566
                self.onErrorStmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 567
                self.onGoToStmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 568
                self.onGoSubStmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 569
                self.openStmt()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 570
                self.printStmt()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 571
                self.putStmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 572
                self.raiseEventStmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 573
                self.randomizeStmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 574
                self.redimStmt()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 575
                self.resetStmt()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 576
                self.resumeStmt()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 577
                self.returnStmt()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 578
                self.rmdirStmt()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 579
                self.rsetStmt()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 580
                self.savepictureStmt()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 581
                self.saveSettingStmt()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 582
                self.seekStmt()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 583
                self.selectCaseStmt()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 584
                self.sendkeysStmt()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 585
                self.setattrStmt()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 586
                self.setStmt()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 587
                self.stopStmt()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 588
                self.timeStmt()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 589
                self.unloadStmt()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 590
                self.unlockStmt()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 591
                self.variableStmt()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 592
                self.whileWendStmt()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 593
                self.widthStmt()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 594
                self.withStmt()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 595
                self.writeStmt()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 596
                self.implicitCallStmt_InBlock()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 597
                self.implicitCallStmt_InStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppactivateStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPACTIVATE(self):
            return self.getToken(vbaParser.APPACTIVATE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_appactivateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppactivateStmt" ):
                listener.enterAppactivateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppactivateStmt" ):
                listener.exitAppactivateStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAppactivateStmt" ):
                return visitor.visitAppactivateStmt(self)
            else:
                return visitor.visitChildren(self)




    def appactivateStmt(self):

        localctx = vbaParser.AppactivateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_appactivateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(vbaParser.APPACTIVATE)
            self.state = 601
            self.match(vbaParser.WS)
            self.state = 602
            self.expression(0)
            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 603
                    self.match(vbaParser.WS)


                self.state = 606
                self.match(vbaParser.T__0)
                self.state = 608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 607
                    self.match(vbaParser.WS)


                self.state = 610
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeepStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEEP(self):
            return self.getToken(vbaParser.BEEP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_beepStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeepStmt" ):
                listener.enterBeepStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeepStmt" ):
                listener.exitBeepStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeepStmt" ):
                return visitor.visitBeepStmt(self)
            else:
                return visitor.visitChildren(self)




    def beepStmt(self):

        localctx = vbaParser.BeepStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_beepStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(vbaParser.BEEP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChdirStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHDIR(self):
            return self.getToken(vbaParser.CHDIR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_chdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChdirStmt" ):
                listener.enterChdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChdirStmt" ):
                listener.exitChdirStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChdirStmt" ):
                return visitor.visitChdirStmt(self)
            else:
                return visitor.visitChildren(self)




    def chdirStmt(self):

        localctx = vbaParser.ChdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_chdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(vbaParser.CHDIR)
            self.state = 616
            self.match(vbaParser.WS)
            self.state = 617
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChdriveStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHDRIVE(self):
            return self.getToken(vbaParser.CHDRIVE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_chdriveStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChdriveStmt" ):
                listener.enterChdriveStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChdriveStmt" ):
                listener.exitChdriveStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChdriveStmt" ):
                return visitor.visitChdriveStmt(self)
            else:
                return visitor.visitChildren(self)




    def chdriveStmt(self):

        localctx = vbaParser.ChdriveStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_chdriveStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(vbaParser.CHDRIVE)
            self.state = 620
            self.match(vbaParser.WS)
            self.state = 621
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.FileNumberContext)
            else:
                return self.getTypedRuleContext(vbaParser.FileNumberContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_closeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseStmt" ):
                listener.enterCloseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseStmt" ):
                listener.exitCloseStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseStmt" ):
                return visitor.visitCloseStmt(self)
            else:
                return visitor.visitChildren(self)




    def closeStmt(self):

        localctx = vbaParser.CloseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_closeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(vbaParser.CLOSE)
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 624
                self.match(vbaParser.WS)
                self.state = 625
                self.fileNumber()
                self.state = 636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 627
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==217:
                            self.state = 626
                            self.match(vbaParser.WS)


                        self.state = 629
                        self.match(vbaParser.T__0)
                        self.state = 631
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                        if la_ == 1:
                            self.state = 630
                            self.match(vbaParser.WS)


                        self.state = 633
                        self.fileNumber() 
                    self.state = 638
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def constSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ConstSubStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ConstSubStmtContext,i)


        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstStmt" ):
                listener.enterConstStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstStmt" ):
                listener.exitConstStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstStmt" ):
                return visitor.visitConstStmt(self)
            else:
                return visitor.visitChildren(self)




    def constStmt(self):

        localctx = vbaParser.ConstStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_constStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 4755801206503243793) != 0):
                self.state = 641
                self.visibility()
                self.state = 642
                self.match(vbaParser.WS)


            self.state = 646
            self.match(vbaParser.CONST)
            self.state = 647
            self.match(vbaParser.WS)
            self.state = 648
            self.constSubStmt()
            self.state = 659
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 649
                        self.match(vbaParser.WS)


                    self.state = 652
                    self.match(vbaParser.T__0)
                    self.state = 654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 653
                        self.match(vbaParser.WS)


                    self.state = 656
                    self.constSubStmt() 
                self.state = 661
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstSubStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstSubStmt" ):
                listener.enterConstSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstSubStmt" ):
                listener.exitConstSubStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstSubStmt" ):
                return visitor.visitConstSubStmt(self)
            else:
                return visitor.visitChildren(self)




    def constSubStmt(self):

        localctx = vbaParser.ConstSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.ambiguousIdentifier()
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 488) != 0) or _la==183:
                self.state = 663
                self.typeHint()


            self.state = 668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 666
                self.match(vbaParser.WS)
                self.state = 667
                self.asTypeClause()


            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 670
                self.match(vbaParser.WS)


            self.state = 673
            self.match(vbaParser.EQ)
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 674
                self.match(vbaParser.WS)


            self.state = 677
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_dateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateStmt" ):
                listener.enterDateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateStmt" ):
                listener.exitDateStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateStmt" ):
                return visitor.visitDateStmt(self)
            else:
                return visitor.visitChildren(self)




    def dateStmt(self):

        localctx = vbaParser.DateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_dateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(vbaParser.DATE)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 680
                self.match(vbaParser.WS)


            self.state = 683
            self.match(vbaParser.EQ)
            self.state = 685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 684
                self.match(vbaParser.WS)


            self.state = 687
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def STRINGLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.STRINGLITERAL)
            else:
                return self.getToken(vbaParser.STRINGLITERAL, i)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def PTRSAFE(self):
            return self.getToken(vbaParser.PTRSAFE, 0)

        def typeHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.TypeHintContext)
            else:
                return self.getTypedRuleContext(vbaParser.TypeHintContext,i)


        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_declareStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareStmt" ):
                listener.enterDeclareStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareStmt" ):
                listener.exitDeclareStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareStmt" ):
                return visitor.visitDeclareStmt(self)
            else:
                return visitor.visitChildren(self)




    def declareStmt(self):

        localctx = vbaParser.DeclareStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_declareStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 4755801206503243793) != 0):
                self.state = 689
                self.visibility()
                self.state = 690
                self.match(vbaParser.WS)


            self.state = 694
            self.match(vbaParser.DECLARE)
            self.state = 695
            self.match(vbaParser.WS)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 696
                self.match(vbaParser.PTRSAFE)
                self.state = 697
                self.match(vbaParser.WS)


            self.state = 705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.state = 700
                self.match(vbaParser.FUNCTION)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 488) != 0) or _la==183:
                    self.state = 701
                    self.typeHint()


                pass
            elif token in [162]:
                self.state = 704
                self.match(vbaParser.SUB)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 707
            self.match(vbaParser.WS)
            self.state = 708
            self.ambiguousIdentifier()
            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 488) != 0) or _la==183:
                self.state = 709
                self.typeHint()


            self.state = 712
            self.match(vbaParser.WS)
            self.state = 713
            self.match(vbaParser.LIB)
            self.state = 714
            self.match(vbaParser.WS)
            self.state = 715
            self.match(vbaParser.STRINGLITERAL)
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 716
                self.match(vbaParser.WS)
                self.state = 717
                self.match(vbaParser.ALIAS)
                self.state = 718
                self.match(vbaParser.WS)
                self.state = 719
                self.match(vbaParser.STRINGLITERAL)


            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 722
                    self.match(vbaParser.WS)


                self.state = 725
                self.argList()


            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 728
                self.match(vbaParser.WS)
                self.state = 729
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeftypeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def letterrange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LetterrangeContext)
            else:
                return self.getTypedRuleContext(vbaParser.LetterrangeContext,i)


        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFDEC(self):
            return self.getToken(vbaParser.DEFDEC, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_deftypeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeftypeStmt" ):
                listener.enterDeftypeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeftypeStmt" ):
                listener.exitDeftypeStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeftypeStmt" ):
                return visitor.visitDeftypeStmt(self)
            else:
                return visitor.visitChildren(self)




    def deftypeStmt(self):

        localctx = vbaParser.DeftypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_deftypeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 140703128616960) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 733
            self.match(vbaParser.WS)
            self.state = 734
            self.letterrange()
            self.state = 745
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 736
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 735
                        self.match(vbaParser.WS)


                    self.state = 738
                    self.match(vbaParser.T__0)
                    self.state = 740
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 739
                        self.match(vbaParser.WS)


                    self.state = 742
                    self.letterrange() 
                self.state = 747
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteSettingStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETESETTING(self):
            return self.getToken(vbaParser.DELETESETTING, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_deleteSettingStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteSettingStmt" ):
                listener.enterDeleteSettingStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteSettingStmt" ):
                listener.exitDeleteSettingStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteSettingStmt" ):
                return visitor.visitDeleteSettingStmt(self)
            else:
                return visitor.visitChildren(self)




    def deleteSettingStmt(self):

        localctx = vbaParser.DeleteSettingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_deleteSettingStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(vbaParser.DELETESETTING)
            self.state = 749
            self.match(vbaParser.WS)
            self.state = 750
            self.expression(0)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 751
                self.match(vbaParser.WS)


            self.state = 754
            self.match(vbaParser.T__0)
            self.state = 756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 755
                self.match(vbaParser.WS)


            self.state = 758
            self.expression(0)
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 759
                    self.match(vbaParser.WS)


                self.state = 762
                self.match(vbaParser.T__0)
                self.state = 764
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 763
                    self.match(vbaParser.WS)


                self.state = 766
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoLoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_doLoopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoLoopStmt" ):
                listener.enterDoLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoLoopStmt" ):
                listener.exitDoLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoLoopStmt" ):
                return visitor.visitDoLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def doLoopStmt(self):

        localctx = vbaParser.DoLoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_doLoopStmt)
        self._la = 0 # Token type
        try:
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.match(vbaParser.DO)
                self.state = 770
                self.endOfStatement()
                self.state = 772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 771
                    self.block()


                self.state = 774
                self.match(vbaParser.LOOP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.match(vbaParser.DO)
                self.state = 777
                self.match(vbaParser.WS)
                self.state = 778
                _la = self._input.LA(1)
                if not(_la==173 or _la==177):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 779
                self.match(vbaParser.WS)
                self.state = 780
                self.expression(0)
                self.state = 781
                self.endOfStatement()
                self.state = 783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 782
                    self.block()


                self.state = 785
                self.match(vbaParser.LOOP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 787
                self.match(vbaParser.DO)
                self.state = 788
                self.endOfStatement()
                self.state = 789
                self.block()
                self.state = 790
                self.match(vbaParser.LOOP)
                self.state = 791
                self.match(vbaParser.WS)
                self.state = 792
                _la = self._input.LA(1)
                if not(_la==173 or _la==177):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 793
                self.match(vbaParser.WS)
                self.state = 794
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_endStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStmt" ):
                listener.enterEndStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStmt" ):
                listener.exitEndStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndStmt" ):
                return visitor.visitEndStmt(self)
            else:
                return visitor.visitChildren(self)




    def endStmt(self):

        localctx = vbaParser.EndStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_endStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(vbaParser.ENUM, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_ENUM(self):
            return self.getToken(vbaParser.END_ENUM, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def enumerationStmt_Constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EnumerationStmt_ConstantContext)
            else:
                return self.getTypedRuleContext(vbaParser.EnumerationStmt_ConstantContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumerationStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationStmt" ):
                listener.enterEnumerationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationStmt" ):
                listener.exitEnumerationStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerationStmt" ):
                return visitor.visitEnumerationStmt(self)
            else:
                return visitor.visitChildren(self)




    def enumerationStmt(self):

        localctx = vbaParser.EnumerationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_enumerationStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 4755801206503243793) != 0):
                self.state = 800
                self.visibility()
                self.state = 801
                self.match(vbaParser.WS)


            self.state = 805
            self.match(vbaParser.ENUM)
            self.state = 806
            self.match(vbaParser.WS)
            self.state = 807
            self.ambiguousIdentifier()
            self.state = 808
            self.endOfStatement()
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -558446353793942016) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1094376871967064127) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 36028797018959811) != 0) or _la==218:
                self.state = 809
                self.enumerationStmt_Constant()
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 815
            self.match(vbaParser.END_ENUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationStmt_ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_enumerationStmt_Constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationStmt_Constant" ):
                listener.enterEnumerationStmt_Constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationStmt_Constant" ):
                listener.exitEnumerationStmt_Constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerationStmt_Constant" ):
                return visitor.visitEnumerationStmt_Constant(self)
            else:
                return visitor.visitChildren(self)




    def enumerationStmt_Constant(self):

        localctx = vbaParser.EnumerationStmt_ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_enumerationStmt_Constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.ambiguousIdentifier()
            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 818
                    self.match(vbaParser.WS)


                self.state = 821
                self.match(vbaParser.EQ)
                self.state = 823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 822
                    self.match(vbaParser.WS)


                self.state = 825
                self.expression(0)


            self.state = 828
            self.endOfStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EraseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseStmt" ):
                listener.enterEraseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseStmt" ):
                listener.exitEraseStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEraseStmt" ):
                return visitor.visitEraseStmt(self)
            else:
                return visitor.visitChildren(self)




    def eraseStmt(self):

        localctx = vbaParser.EraseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_eraseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(vbaParser.ERASE)
            self.state = 831
            self.match(vbaParser.WS)
            self.state = 832
            self.expression(0)
            self.state = 840
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 833
                    self.match(vbaParser.T__0)
                    self.state = 835
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                    if la_ == 1:
                        self.state = 834
                        self.match(vbaParser.WS)


                    self.state = 837
                    self.expression(0) 
                self.state = 842
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorStmt" ):
                listener.enterErrorStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorStmt" ):
                listener.exitErrorStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorStmt" ):
                return visitor.visitErrorStmt(self)
            else:
                return visitor.visitChildren(self)




    def errorStmt(self):

        localctx = vbaParser.ErrorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_errorStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(vbaParser.ERROR)
            self.state = 844
            self.match(vbaParser.WS)
            self.state = 845
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventStmt" ):
                listener.enterEventStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventStmt" ):
                listener.exitEventStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventStmt" ):
                return visitor.visitEventStmt(self)
            else:
                return visitor.visitChildren(self)




    def eventStmt(self):

        localctx = vbaParser.EventStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_eventStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 4755801206503243793) != 0):
                self.state = 847
                self.visibility()
                self.state = 848
                self.match(vbaParser.WS)


            self.state = 852
            self.match(vbaParser.EVENT)
            self.state = 853
            self.match(vbaParser.WS)
            self.state = 854
            self.ambiguousIdentifier()
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 855
                self.match(vbaParser.WS)


            self.state = 858
            self.argList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT_DO(self):
            return self.getToken(vbaParser.EXIT_DO, 0)

        def EXIT_FOR(self):
            return self.getToken(vbaParser.EXIT_FOR, 0)

        def EXIT_FUNCTION(self):
            return self.getToken(vbaParser.EXIT_FUNCTION, 0)

        def EXIT_PROPERTY(self):
            return self.getToken(vbaParser.EXIT_PROPERTY, 0)

        def EXIT_SUB(self):
            return self.getToken(vbaParser.EXIT_SUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitStmt" ):
                listener.enterExitStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitStmt" ):
                listener.exitExitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitStmt" ):
                return visitor.visitExitStmt(self)
            else:
                return visitor.visitChildren(self)




    def exitStmt(self):

        localctx = vbaParser.ExitStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_exitStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilecopyStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILECOPY(self):
            return self.getToken(vbaParser.FILECOPY, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_filecopyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilecopyStmt" ):
                listener.enterFilecopyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilecopyStmt" ):
                listener.exitFilecopyStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilecopyStmt" ):
                return visitor.visitFilecopyStmt(self)
            else:
                return visitor.visitChildren(self)




    def filecopyStmt(self):

        localctx = vbaParser.FilecopyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_filecopyStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(vbaParser.FILECOPY)
            self.state = 863
            self.match(vbaParser.WS)
            self.state = 864
            self.expression(0)
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 865
                self.match(vbaParser.WS)


            self.state = 868
            self.match(vbaParser.T__0)
            self.state = 870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 869
                self.match(vbaParser.WS)


            self.state = 872
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,i)


        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forEachStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStmt" ):
                listener.enterForEachStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStmt" ):
                listener.exitForEachStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForEachStmt" ):
                return visitor.visitForEachStmt(self)
            else:
                return visitor.visitChildren(self)




    def forEachStmt(self):

        localctx = vbaParser.ForEachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_forEachStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(vbaParser.FOR)
            self.state = 875
            self.match(vbaParser.WS)
            self.state = 876
            self.match(vbaParser.EACH)
            self.state = 877
            self.match(vbaParser.WS)
            self.state = 878
            self.ambiguousIdentifier()
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 488) != 0) or _la==183:
                self.state = 879
                self.typeHint()


            self.state = 882
            self.match(vbaParser.WS)
            self.state = 883
            self.match(vbaParser.IN)
            self.state = 884
            self.match(vbaParser.WS)
            self.state = 885
            self.expression(0)
            self.state = 886
            self.endOfStatement()
            self.state = 888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 887
                self.block()


            self.state = 890
            self.match(vbaParser.NEXT)
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 891
                self.match(vbaParser.WS)
                self.state = 892
                self.ambiguousIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForNextStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,i)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forNextStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForNextStmt" ):
                listener.enterForNextStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForNextStmt" ):
                listener.exitForNextStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForNextStmt" ):
                return visitor.visitForNextStmt(self)
            else:
                return visitor.visitChildren(self)




    def forNextStmt(self):

        localctx = vbaParser.ForNextStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_forNextStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(vbaParser.FOR)
            self.state = 896
            self.match(vbaParser.WS)
            self.state = 897
            self.ambiguousIdentifier()
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 488) != 0) or _la==183:
                self.state = 898
                self.typeHint()


            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 901
                self.match(vbaParser.WS)
                self.state = 902
                self.asTypeClause()


            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 905
                self.match(vbaParser.WS)


            self.state = 908
            self.match(vbaParser.EQ)
            self.state = 910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 909
                self.match(vbaParser.WS)


            self.state = 912
            self.expression(0)
            self.state = 913
            self.match(vbaParser.WS)
            self.state = 914
            self.match(vbaParser.TO)
            self.state = 915
            self.match(vbaParser.WS)
            self.state = 916
            self.expression(0)
            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 917
                self.match(vbaParser.WS)
                self.state = 918
                self.match(vbaParser.STEP)
                self.state = 919
                self.match(vbaParser.WS)
                self.state = 920
                self.expression(0)


            self.state = 923
            self.endOfStatement()
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 924
                self.block()


            self.state = 927
            self.match(vbaParser.NEXT)
            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 928
                self.match(vbaParser.WS)
                self.state = 929
                self.ambiguousIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.FUNCTION)
            else:
                return self.getToken(vbaParser.FUNCTION, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionStmt" ):
                listener.enterFunctionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionStmt" ):
                listener.exitFunctionStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionStmt" ):
                return visitor.visitFunctionStmt(self)
            else:
                return visitor.visitChildren(self)




    def functionStmt(self):

        localctx = vbaParser.FunctionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_functionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 4755801206503243793) != 0):
                self.state = 932
                self.visibility()
                self.state = 933
                self.match(vbaParser.WS)


            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 937
                self.match(vbaParser.STATIC)
                self.state = 938
                self.match(vbaParser.WS)


            self.state = 941
            self.match(vbaParser.FUNCTION)
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 942
                self.match(vbaParser.WS)


            self.state = 945
            self.ambiguousIdentifier()
            self.state = 947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 946
                self.typeHint()


            self.state = 953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 949
                    self.match(vbaParser.WS)


                self.state = 952
                self.argList()


            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 955
                    self.match(vbaParser.WS)


                self.state = 958
                self.asTypeClause()


            self.state = 961
            self.endOfStatement()
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 962
                self.block()


            self.state = 965
            self.match(vbaParser.END)
            self.state = 966
            self.wsc()
            self.state = 967
            self.match(vbaParser.FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_getStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetStmt" ):
                listener.enterGetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetStmt" ):
                listener.exitGetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetStmt" ):
                return visitor.visitGetStmt(self)
            else:
                return visitor.visitChildren(self)




    def getStmt(self):

        localctx = vbaParser.GetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_getStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(vbaParser.GET)
            self.state = 970
            self.match(vbaParser.WS)
            self.state = 971
            self.fileNumber()
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 972
                self.match(vbaParser.WS)


            self.state = 975
            self.match(vbaParser.T__0)
            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 976
                self.match(vbaParser.WS)


            self.state = 980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 979
                self.expression(0)


            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 982
                self.match(vbaParser.WS)


            self.state = 985
            self.match(vbaParser.T__0)
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 986
                self.match(vbaParser.WS)


            self.state = 989
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoSubStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_goSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoSubStmt" ):
                listener.enterGoSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoSubStmt" ):
                listener.exitGoSubStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoSubStmt" ):
                return visitor.visitGoSubStmt(self)
            else:
                return visitor.visitChildren(self)




    def goSubStmt(self):

        localctx = vbaParser.GoSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_goSubStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(vbaParser.GOSUB)
            self.state = 992
            self.match(vbaParser.WS)
            self.state = 993
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoToStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_goToStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoToStmt" ):
                listener.enterGoToStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoToStmt" ):
                listener.exitGoToStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoToStmt" ):
                return visitor.visitGoToStmt(self)
            else:
                return visitor.visitChildren(self)




    def goToStmt(self):

        localctx = vbaParser.GoToStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_goToStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(vbaParser.GOTO)
            self.state = 996
            self.match(vbaParser.WS)
            self.state = 997
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfThenElseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_ifThenElseStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BlockIfThenElseContext(IfThenElseStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.IfThenElseStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ifBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.IfBlockStmtContext,0)

        def END(self):
            return self.getToken(vbaParser.END, 0)
        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)

        def IF(self):
            return self.getToken(vbaParser.IF, 0)
        def ifElseIfBlockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.IfElseIfBlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.IfElseIfBlockStmtContext,i)

        def ifElseBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.IfElseBlockStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockIfThenElse" ):
                listener.enterBlockIfThenElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockIfThenElse" ):
                listener.exitBlockIfThenElse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockIfThenElse" ):
                return visitor.visitBlockIfThenElse(self)
            else:
                return visitor.visitChildren(self)


    class InlineIfThenElseContext(IfThenElseStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.IfThenElseStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(vbaParser.IF, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)
        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)
        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockStmtContext,i)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineIfThenElse" ):
                listener.enterInlineIfThenElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineIfThenElse" ):
                listener.exitInlineIfThenElse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineIfThenElse" ):
                return visitor.visitInlineIfThenElse(self)
            else:
                return visitor.visitChildren(self)



    def ifThenElseStmt(self):

        localctx = vbaParser.IfThenElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ifThenElseStmt)
        self._la = 0 # Token type
        try:
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                localctx = vbaParser.InlineIfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.match(vbaParser.IF)
                self.state = 1000
                self.match(vbaParser.WS)
                self.state = 1001
                self.ifConditionStmt()
                self.state = 1002
                self.match(vbaParser.WS)
                self.state = 1003
                self.match(vbaParser.THEN)
                self.state = 1004
                self.match(vbaParser.WS)
                self.state = 1005
                self.blockStmt()
                self.state = 1010
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1006
                    self.match(vbaParser.WS)
                    self.state = 1007
                    self.match(vbaParser.ELSE)
                    self.state = 1008
                    self.match(vbaParser.WS)
                    self.state = 1009
                    self.blockStmt()


                pass

            elif la_ == 2:
                localctx = vbaParser.BlockIfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1012
                self.ifBlockStmt()
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==53:
                    self.state = 1013
                    self.ifElseIfBlockStmt()
                    self.state = 1018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 1019
                    self.ifElseBlockStmt()


                self.state = 1022
                self.match(vbaParser.END)
                self.state = 1023
                self.wsc()
                self.state = 1024
                self.match(vbaParser.IF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfBlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBlockStmt" ):
                listener.enterIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBlockStmt" ):
                listener.exitIfBlockStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfBlockStmt" ):
                return visitor.visitIfBlockStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifBlockStmt(self):

        localctx = vbaParser.IfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_ifBlockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(vbaParser.IF)
            self.state = 1029
            self.match(vbaParser.WS)
            self.state = 1030
            self.ifConditionStmt()
            self.state = 1031
            self.match(vbaParser.WS)
            self.state = 1032
            self.match(vbaParser.THEN)
            self.state = 1033
            self.endOfStatement()
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1034
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfConditionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifConditionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfConditionStmt" ):
                listener.enterIfConditionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfConditionStmt" ):
                listener.exitIfConditionStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfConditionStmt" ):
                return visitor.visitIfConditionStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifConditionStmt(self):

        localctx = vbaParser.IfConditionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_ifConditionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfElseIfBlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifElseIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseIfBlockStmt" ):
                listener.enterIfElseIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseIfBlockStmt" ):
                listener.exitIfElseIfBlockStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfElseIfBlockStmt" ):
                return visitor.visitIfElseIfBlockStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifElseIfBlockStmt(self):

        localctx = vbaParser.IfElseIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ifElseIfBlockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(vbaParser.ELSEIF)
            self.state = 1040
            self.match(vbaParser.WS)
            self.state = 1041
            self.ifConditionStmt()
            self.state = 1042
            self.match(vbaParser.WS)
            self.state = 1043
            self.match(vbaParser.THEN)
            self.state = 1044
            self.endOfStatement()
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1045
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfElseBlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifElseBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseBlockStmt" ):
                listener.enterIfElseBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseBlockStmt" ):
                listener.exitIfElseBlockStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfElseBlockStmt" ):
                return visitor.visitIfElseBlockStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifElseBlockStmt(self):

        localctx = vbaParser.IfElseBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_ifElseBlockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(vbaParser.ELSE)
            self.state = 1049
            self.endOfStatement()
            self.state = 1051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1050
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementsStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implementsStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementsStmt" ):
                listener.enterImplementsStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementsStmt" ):
                listener.exitImplementsStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementsStmt" ):
                return visitor.visitImplementsStmt(self)
            else:
                return visitor.visitChildren(self)




    def implementsStmt(self):

        localctx = vbaParser.ImplementsStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_implementsStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(vbaParser.IMPLEMENTS)
            self.state = 1054
            self.match(vbaParser.WS)
            self.state = 1055
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_inputStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputStmt" ):
                listener.enterInputStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputStmt" ):
                listener.exitInputStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputStmt" ):
                return visitor.visitInputStmt(self)
            else:
                return visitor.visitChildren(self)




    def inputStmt(self):

        localctx = vbaParser.InputStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_inputStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(vbaParser.INPUT)
            self.state = 1058
            self.match(vbaParser.WS)
            self.state = 1059
            self.fileNumber()
            self.state = 1068 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1061
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 1060
                        self.match(vbaParser.WS)


                    self.state = 1063
                    self.match(vbaParser.T__0)
                    self.state = 1065
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                    if la_ == 1:
                        self.state = 1064
                        self.match(vbaParser.WS)


                    self.state = 1067
                    self.expression(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1070 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KILL(self):
            return self.getToken(vbaParser.KILL, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_killStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillStmt" ):
                listener.enterKillStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillStmt" ):
                listener.exitKillStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKillStmt" ):
                return visitor.visitKillStmt(self)
            else:
                return visitor.visitChildren(self)




    def killStmt(self):

        localctx = vbaParser.KillStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_killStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(vbaParser.KILL)
            self.state = 1073
            self.match(vbaParser.WS)
            self.state = 1074
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def PLUS_EQ(self):
            return self.getToken(vbaParser.PLUS_EQ, 0)

        def MINUS_EQ(self):
            return self.getToken(vbaParser.MINUS_EQ, 0)

        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def typeHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.TypeHintContext)
            else:
                return self.getTypedRuleContext(vbaParser.TypeHintContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = vbaParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1076
                self.match(vbaParser.LET)
                self.state = 1077
                self.match(vbaParser.WS)


            self.state = 1080
            self.implicitCallStmt_InStmt()
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1081
                self.match(vbaParser.WS)


            self.state = 1084
            _la = self._input.LA(1)
            if not(((((_la - 186)) & ~0x3f) == 0 and ((1 << (_la - 186)) & 2177) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1085
                self.match(vbaParser.WS)


            self.state = 1089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1088
                self.typeHint()


            self.state = 1091
            self.expression(0)
            self.state = 1093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1092
                self.typeHint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineInputStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_INPUT(self):
            return self.getToken(vbaParser.LINE_INPUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lineInputStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineInputStmt" ):
                listener.enterLineInputStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineInputStmt" ):
                listener.exitLineInputStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineInputStmt" ):
                return visitor.visitLineInputStmt(self)
            else:
                return visitor.visitChildren(self)




    def lineInputStmt(self):

        localctx = vbaParser.LineInputStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lineInputStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(vbaParser.LINE_INPUT)
            self.state = 1096
            self.match(vbaParser.WS)
            self.state = 1097
            self.fileNumber()
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1098
                self.match(vbaParser.WS)


            self.state = 1101
            self.match(vbaParser.T__0)
            self.state = 1103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1102
                self.match(vbaParser.WS)


            self.state = 1105
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def SHORTLITERAL(self):
            return self.getToken(vbaParser.SHORTLITERAL, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.NEWLINE)
            else:
                return self.getToken(vbaParser.NEWLINE, i)

        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lineNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineNumber" ):
                listener.enterLineNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineNumber" ):
                listener.exitLineNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineNumber" ):
                return visitor.visitLineNumber(self)
            else:
                return visitor.visitChildren(self)




    def lineNumber(self):

        localctx = vbaParser.LineNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_lineNumber)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            _la = self._input.LA(1)
            if not(_la==206 or _la==207):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1108
                self.match(vbaParser.NEWLINE)


            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1111
                self.match(vbaParser.COLON)


            self.state = 1115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1114
                self.match(vbaParser.NEWLINE)


            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1117
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(vbaParser.LOAD, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_loadStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStmt" ):
                listener.enterLoadStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStmt" ):
                listener.exitLoadStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadStmt" ):
                return visitor.visitLoadStmt(self)
            else:
                return visitor.visitChildren(self)




    def loadStmt(self):

        localctx = vbaParser.LoadStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_loadStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(vbaParser.LOAD)
            self.state = 1121
            self.match(vbaParser.WS)
            self.state = 1122
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStmt" ):
                listener.enterLockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStmt" ):
                listener.exitLockStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockStmt" ):
                return visitor.visitLockStmt(self)
            else:
                return visitor.visitChildren(self)




    def lockStmt(self):

        localctx = vbaParser.LockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_lockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self.match(vbaParser.LOCK)
            self.state = 1125
            self.match(vbaParser.WS)
            self.state = 1126
            self.expression(0)
            self.state = 1141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1127
                    self.match(vbaParser.WS)


                self.state = 1130
                self.match(vbaParser.T__0)
                self.state = 1132
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1131
                    self.match(vbaParser.WS)


                self.state = 1134
                self.expression(0)
                self.state = 1139
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1135
                    self.match(vbaParser.WS)
                    self.state = 1136
                    self.match(vbaParser.TO)
                    self.state = 1137
                    self.match(vbaParser.WS)
                    self.state = 1138
                    self.expression(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LsetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lsetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLsetStmt" ):
                listener.enterLsetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLsetStmt" ):
                listener.exitLsetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLsetStmt" ):
                return visitor.visitLsetStmt(self)
            else:
                return visitor.visitChildren(self)




    def lsetStmt(self):

        localctx = vbaParser.LsetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_lsetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.match(vbaParser.LSET)
            self.state = 1144
            self.match(vbaParser.WS)
            self.state = 1145
            self.implicitCallStmt_InStmt()
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1146
                self.match(vbaParser.WS)


            self.state = 1149
            self.match(vbaParser.EQ)
            self.state = 1151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1150
                self.match(vbaParser.WS)


            self.state = 1153
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroConstStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_CONST(self):
            return self.getToken(vbaParser.MACRO_CONST, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_macroConstStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroConstStmt" ):
                listener.enterMacroConstStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroConstStmt" ):
                listener.exitMacroConstStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroConstStmt" ):
                return visitor.visitMacroConstStmt(self)
            else:
                return visitor.visitChildren(self)




    def macroConstStmt(self):

        localctx = vbaParser.MacroConstStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_macroConstStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.match(vbaParser.MACRO_CONST)
            self.state = 1157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1156
                self.match(vbaParser.WS)


            self.state = 1159
            self.ambiguousIdentifier()
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1160
                self.match(vbaParser.WS)


            self.state = 1163
            self.match(vbaParser.EQ)
            self.state = 1165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1164
                self.match(vbaParser.WS)


            self.state = 1167
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroIfThenElseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroIfBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroIfBlockStmtContext,0)


        def MACRO_END_IF(self):
            return self.getToken(vbaParser.MACRO_END_IF, 0)

        def macroElseIfBlockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.MacroElseIfBlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.MacroElseIfBlockStmtContext,i)


        def macroElseBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroElseBlockStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_macroIfThenElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroIfThenElseStmt" ):
                listener.enterMacroIfThenElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroIfThenElseStmt" ):
                listener.exitMacroIfThenElseStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroIfThenElseStmt" ):
                return visitor.visitMacroIfThenElseStmt(self)
            else:
                return visitor.visitChildren(self)




    def macroIfThenElseStmt(self):

        localctx = vbaParser.MacroIfThenElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_macroIfThenElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.macroIfBlockStmt()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==102:
                self.state = 1170
                self.macroElseIfBlockStmt()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 1176
                self.macroElseBlockStmt()


            self.state = 1179
            self.match(vbaParser.MACRO_END_IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroIfBlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_IF(self):
            return self.getToken(vbaParser.MACRO_IF, 0)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def moduleDeclarations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,i)


        def moduleBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_macroIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroIfBlockStmt" ):
                listener.enterMacroIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroIfBlockStmt" ):
                listener.exitMacroIfBlockStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroIfBlockStmt" ):
                return visitor.visitMacroIfBlockStmt(self)
            else:
                return visitor.visitChildren(self)




    def macroIfBlockStmt(self):

        localctx = vbaParser.MacroIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_macroIfBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(vbaParser.MACRO_IF)
            self.state = 1183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1182
                self.match(vbaParser.WS)


            self.state = 1185
            self.ifConditionStmt()
            self.state = 1186
            self.match(vbaParser.WS)
            self.state = 1187
            self.match(vbaParser.THEN)
            self.state = 1188
            self.endOfStatement()
            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -558446353793941968) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1954210119681) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 36028797018959839) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & 6291) != 0):
                self.state = 1192
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1189
                    self.moduleDeclarations()
                    pass

                elif la_ == 2:
                    self.state = 1190
                    self.moduleBody()
                    pass

                elif la_ == 3:
                    self.state = 1191
                    self.block()
                    pass


                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroElseIfBlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_ELSEIF(self):
            return self.getToken(vbaParser.MACRO_ELSEIF, 0)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def moduleDeclarations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,i)


        def moduleBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_macroElseIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroElseIfBlockStmt" ):
                listener.enterMacroElseIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroElseIfBlockStmt" ):
                listener.exitMacroElseIfBlockStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroElseIfBlockStmt" ):
                return visitor.visitMacroElseIfBlockStmt(self)
            else:
                return visitor.visitChildren(self)




    def macroElseIfBlockStmt(self):

        localctx = vbaParser.MacroElseIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_macroElseIfBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.match(vbaParser.MACRO_ELSEIF)
            self.state = 1199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1198
                self.match(vbaParser.WS)


            self.state = 1201
            self.ifConditionStmt()
            self.state = 1202
            self.match(vbaParser.WS)
            self.state = 1203
            self.match(vbaParser.THEN)
            self.state = 1204
            self.endOfStatement()
            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -558446353793941968) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1954210119681) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 36028797018959839) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & 6291) != 0):
                self.state = 1208
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1205
                    self.moduleDeclarations()
                    pass

                elif la_ == 2:
                    self.state = 1206
                    self.moduleBody()
                    pass

                elif la_ == 3:
                    self.state = 1207
                    self.block()
                    pass


                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroElseBlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_ELSE(self):
            return self.getToken(vbaParser.MACRO_ELSE, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def moduleDeclarations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,i)


        def moduleBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_macroElseBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroElseBlockStmt" ):
                listener.enterMacroElseBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroElseBlockStmt" ):
                listener.exitMacroElseBlockStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroElseBlockStmt" ):
                return visitor.visitMacroElseBlockStmt(self)
            else:
                return visitor.visitChildren(self)




    def macroElseBlockStmt(self):

        localctx = vbaParser.MacroElseBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_macroElseBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.match(vbaParser.MACRO_ELSE)
            self.state = 1214
            self.endOfStatement()
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -558446353793941968) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1954210119681) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 36028797018959839) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & 6291) != 0):
                self.state = 1218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1215
                    self.moduleDeclarations()
                    pass

                elif la_ == 2:
                    self.state = 1216
                    self.moduleBody()
                    pass

                elif la_ == 3:
                    self.state = 1217
                    self.block()
                    pass


                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MidStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_midStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMidStmt" ):
                listener.enterMidStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMidStmt" ):
                listener.exitMidStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMidStmt" ):
                return visitor.visitMidStmt(self)
            else:
                return visitor.visitChildren(self)




    def midStmt(self):

        localctx = vbaParser.MidStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_midStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(vbaParser.MID)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1224
                self.match(vbaParser.WS)


            self.state = 1227
            self.match(vbaParser.LPAREN)
            self.state = 1229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1228
                self.match(vbaParser.WS)


            self.state = 1231
            self.argsCall()
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1232
                self.match(vbaParser.WS)


            self.state = 1235
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MkdirStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MKDIR(self):
            return self.getToken(vbaParser.MKDIR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_mkdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMkdirStmt" ):
                listener.enterMkdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMkdirStmt" ):
                listener.exitMkdirStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMkdirStmt" ):
                return visitor.visitMkdirStmt(self)
            else:
                return visitor.visitChildren(self)




    def mkdirStmt(self):

        localctx = vbaParser.MkdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_mkdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.match(vbaParser.MKDIR)
            self.state = 1238
            self.match(vbaParser.WS)
            self.state = 1239
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(vbaParser.NAME, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_nameStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameStmt" ):
                listener.enterNameStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameStmt" ):
                listener.exitNameStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameStmt" ):
                return visitor.visitNameStmt(self)
            else:
                return visitor.visitChildren(self)




    def nameStmt(self):

        localctx = vbaParser.NameStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_nameStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self.match(vbaParser.NAME)
            self.state = 1242
            self.match(vbaParser.WS)
            self.state = 1243
            self.expression(0)
            self.state = 1244
            self.match(vbaParser.WS)
            self.state = 1245
            self.match(vbaParser.AS)
            self.state = 1246
            self.match(vbaParser.WS)
            self.state = 1247
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnErrorStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ON_ERROR(self):
            return self.getToken(vbaParser.ON_ERROR, 0)

        def ON_LOCAL_ERROR(self):
            return self.getToken(vbaParser.ON_LOCAL_ERROR, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_onErrorStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnErrorStmt" ):
                listener.enterOnErrorStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnErrorStmt" ):
                listener.exitOnErrorStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnErrorStmt" ):
                return visitor.visitOnErrorStmt(self)
            else:
                return visitor.visitChildren(self)




    def onErrorStmt(self):

        localctx = vbaParser.OnErrorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_onErrorStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            _la = self._input.LA(1)
            if not(_la==116 or _la==117):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1250
            self.match(vbaParser.WS)
            self.state = 1257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.state = 1251
                self.match(vbaParser.GOTO)
                self.state = 1252
                self.match(vbaParser.WS)
                self.state = 1253
                self.expression(0)
                pass
            elif token in [144]:
                self.state = 1254
                self.match(vbaParser.RESUME)
                self.state = 1255
                self.match(vbaParser.WS)
                self.state = 1256
                self.match(vbaParser.NEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnGoToStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_onGoToStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGoToStmt" ):
                listener.enterOnGoToStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGoToStmt" ):
                listener.exitOnGoToStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnGoToStmt" ):
                return visitor.visitOnGoToStmt(self)
            else:
                return visitor.visitChildren(self)




    def onGoToStmt(self):

        localctx = vbaParser.OnGoToStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_onGoToStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(vbaParser.ON)
            self.state = 1260
            self.match(vbaParser.WS)
            self.state = 1261
            self.expression(0)
            self.state = 1262
            self.match(vbaParser.WS)
            self.state = 1263
            self.match(vbaParser.GOTO)
            self.state = 1264
            self.match(vbaParser.WS)
            self.state = 1265
            self.expression(0)
            self.state = 1276
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 1266
                        self.match(vbaParser.WS)


                    self.state = 1269
                    self.match(vbaParser.T__0)
                    self.state = 1271
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                    if la_ == 1:
                        self.state = 1270
                        self.match(vbaParser.WS)


                    self.state = 1273
                    self.expression(0) 
                self.state = 1278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnGoSubStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_onGoSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGoSubStmt" ):
                listener.enterOnGoSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGoSubStmt" ):
                listener.exitOnGoSubStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnGoSubStmt" ):
                return visitor.visitOnGoSubStmt(self)
            else:
                return visitor.visitChildren(self)




    def onGoSubStmt(self):

        localctx = vbaParser.OnGoSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_onGoSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.match(vbaParser.ON)
            self.state = 1280
            self.match(vbaParser.WS)
            self.state = 1281
            self.expression(0)
            self.state = 1282
            self.match(vbaParser.WS)
            self.state = 1283
            self.match(vbaParser.GOSUB)
            self.state = 1284
            self.match(vbaParser.WS)
            self.state = 1285
            self.expression(0)
            self.state = 1296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 1286
                        self.match(vbaParser.WS)


                    self.state = 1289
                    self.match(vbaParser.T__0)
                    self.state = 1291
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        self.state = 1290
                        self.match(vbaParser.WS)


                    self.state = 1293
                    self.expression(0) 
                self.state = 1298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def READ_WRITE(self):
            return self.getToken(vbaParser.READ_WRITE, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def LOCK_READ(self):
            return self.getToken(vbaParser.LOCK_READ, 0)

        def LOCK_WRITE(self):
            return self.getToken(vbaParser.LOCK_WRITE, 0)

        def LOCK_READ_WRITE(self):
            return self.getToken(vbaParser.LOCK_READ_WRITE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_openStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenStmt" ):
                listener.enterOpenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenStmt" ):
                listener.exitOpenStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenStmt" ):
                return visitor.visitOpenStmt(self)
            else:
                return visitor.visitChildren(self)




    def openStmt(self):

        localctx = vbaParser.OpenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_openStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.match(vbaParser.OPEN)
            self.state = 1300
            self.match(vbaParser.WS)
            self.state = 1301
            self.expression(0)
            self.state = 1302
            self.match(vbaParser.WS)
            self.state = 1303
            self.match(vbaParser.FOR)
            self.state = 1304
            self.match(vbaParser.WS)
            self.state = 1305
            _la = self._input.LA(1)
            if not(_la==15 or _la==19 or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 9011597301252097) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 1306
                self.match(vbaParser.WS)
                self.state = 1307
                self.match(vbaParser.ACCESS)
                self.state = 1308
                self.match(vbaParser.WS)
                self.state = 1309
                _la = self._input.LA(1)
                if not(((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 4398046511107) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1312
                self.match(vbaParser.WS)
                self.state = 1313
                _la = self._input.LA(1)
                if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 576460752303423495) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1316
            self.match(vbaParser.WS)
            self.state = 1317
            self.match(vbaParser.AS)
            self.state = 1318
            self.match(vbaParser.WS)
            self.state = 1319
            self.fileNumber()
            self.state = 1330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1320
                self.match(vbaParser.WS)
                self.state = 1321
                self.match(vbaParser.LEN)
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1322
                    self.match(vbaParser.WS)


                self.state = 1325
                self.match(vbaParser.EQ)
                self.state = 1327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1326
                    self.match(vbaParser.WS)


                self.state = 1329
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outputList_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.OutputList_ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.OutputList_ExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_outputList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList" ):
                listener.enterOutputList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList" ):
                listener.exitOutputList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputList" ):
                return visitor.visitOutputList(self)
            else:
                return visitor.visitChildren(self)




    def outputList(self):

        localctx = vbaParser.OutputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_outputList)
        self._la = 0 # Token type
        try:
            self.state = 1365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1332
                self.outputList_Expression()
                self.state = 1345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1334
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==217:
                            self.state = 1333
                            self.match(vbaParser.WS)


                        self.state = 1336
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==2):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1338
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                        if la_ == 1:
                            self.state = 1337
                            self.match(vbaParser.WS)


                        self.state = 1341
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                        if la_ == 1:
                            self.state = 1340
                            self.outputList_Expression()

                 
                    self.state = 1347
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1348
                    self.outputList_Expression()


                self.state = 1361 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1352
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==217:
                            self.state = 1351
                            self.match(vbaParser.WS)


                        self.state = 1354
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==2):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1356
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                        if la_ == 1:
                            self.state = 1355
                            self.match(vbaParser.WS)


                        self.state = 1359
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                        if la_ == 1:
                            self.state = 1358
                            self.outputList_Expression()



                    else:
                        raise NoViableAltException(self)
                    self.state = 1363 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputList_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_outputList_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList_Expression" ):
                listener.enterOutputList_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList_Expression" ):
                listener.exitOutputList_Expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputList_Expression" ):
                return visitor.visitOutputList_Expression(self)
            else:
                return visitor.visitChildren(self)




    def outputList_Expression(self):

        localctx = vbaParser.OutputList_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_outputList_Expression)
        self._la = 0 # Token type
        try:
            self.state = 1384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1367
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1368
                _la = self._input.LA(1)
                if not(_la==157 or _la==163):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1382
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 1369
                        self.match(vbaParser.WS)


                    self.state = 1372
                    self.match(vbaParser.LPAREN)
                    self.state = 1374
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                    if la_ == 1:
                        self.state = 1373
                        self.match(vbaParser.WS)


                    self.state = 1376
                    self.argsCall()
                    self.state = 1378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 1377
                        self.match(vbaParser.WS)


                    self.state = 1380
                    self.match(vbaParser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintStmt" ):
                return visitor.visitPrintStmt(self)
            else:
                return visitor.visitChildren(self)




    def printStmt(self):

        localctx = vbaParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1386
            self.match(vbaParser.PRINT)
            self.state = 1387
            self.match(vbaParser.WS)
            self.state = 1388
            self.fileNumber()
            self.state = 1390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1389
                self.match(vbaParser.WS)


            self.state = 1392
            self.match(vbaParser.T__0)
            self.state = 1397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1393
                    self.match(vbaParser.WS)


                self.state = 1396
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyGetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_GET(self):
            return self.getToken(vbaParser.PROPERTY_GET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_PROPERTY(self):
            return self.getToken(vbaParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyGetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetStmt" ):
                listener.enterPropertyGetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetStmt" ):
                listener.exitPropertyGetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyGetStmt" ):
                return visitor.visitPropertyGetStmt(self)
            else:
                return visitor.visitChildren(self)




    def propertyGetStmt(self):

        localctx = vbaParser.PropertyGetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_propertyGetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 4755801206503243793) != 0):
                self.state = 1399
                self.visibility()
                self.state = 1400
                self.match(vbaParser.WS)


            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 1404
                self.match(vbaParser.STATIC)
                self.state = 1405
                self.match(vbaParser.WS)


            self.state = 1408
            self.match(vbaParser.PROPERTY_GET)
            self.state = 1409
            self.match(vbaParser.WS)
            self.state = 1410
            self.ambiguousIdentifier()
            self.state = 1412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1411
                self.typeHint()


            self.state = 1418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1414
                    self.match(vbaParser.WS)


                self.state = 1417
                self.argList()


            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1420
                self.match(vbaParser.WS)
                self.state = 1421
                self.asTypeClause()


            self.state = 1424
            self.endOfStatement()
            self.state = 1426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -558446353793941968) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1080865864779038721) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 36028797018959811) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & 6163) != 0):
                self.state = 1425
                self.block()


            self.state = 1428
            self.match(vbaParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertySetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_SET(self):
            return self.getToken(vbaParser.PROPERTY_SET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_PROPERTY(self):
            return self.getToken(vbaParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertySetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySetStmt" ):
                listener.enterPropertySetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySetStmt" ):
                listener.exitPropertySetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertySetStmt" ):
                return visitor.visitPropertySetStmt(self)
            else:
                return visitor.visitChildren(self)




    def propertySetStmt(self):

        localctx = vbaParser.PropertySetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_propertySetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 4755801206503243793) != 0):
                self.state = 1430
                self.visibility()
                self.state = 1431
                self.match(vbaParser.WS)


            self.state = 1437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 1435
                self.match(vbaParser.STATIC)
                self.state = 1436
                self.match(vbaParser.WS)


            self.state = 1439
            self.match(vbaParser.PROPERTY_SET)
            self.state = 1440
            self.match(vbaParser.WS)
            self.state = 1441
            self.ambiguousIdentifier()
            self.state = 1446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1442
                    self.match(vbaParser.WS)


                self.state = 1445
                self.argList()


            self.state = 1448
            self.endOfStatement()
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -558446353793941968) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1080865864779038721) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 36028797018959811) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & 6163) != 0):
                self.state = 1449
                self.block()


            self.state = 1452
            self.match(vbaParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyLetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_LET(self):
            return self.getToken(vbaParser.PROPERTY_LET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_PROPERTY(self):
            return self.getToken(vbaParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyLetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyLetStmt" ):
                listener.enterPropertyLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyLetStmt" ):
                listener.exitPropertyLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyLetStmt" ):
                return visitor.visitPropertyLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def propertyLetStmt(self):

        localctx = vbaParser.PropertyLetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_propertyLetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 4755801206503243793) != 0):
                self.state = 1454
                self.visibility()
                self.state = 1455
                self.match(vbaParser.WS)


            self.state = 1461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 1459
                self.match(vbaParser.STATIC)
                self.state = 1460
                self.match(vbaParser.WS)


            self.state = 1463
            self.match(vbaParser.PROPERTY_LET)
            self.state = 1464
            self.match(vbaParser.WS)
            self.state = 1465
            self.ambiguousIdentifier()
            self.state = 1470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1466
                    self.match(vbaParser.WS)


                self.state = 1469
                self.argList()


            self.state = 1472
            self.endOfStatement()
            self.state = 1474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -558446353793941968) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1080865864779038721) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 36028797018959811) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & 6163) != 0):
                self.state = 1473
                self.block()


            self.state = 1476
            self.match(vbaParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PutStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_putStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutStmt" ):
                listener.enterPutStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutStmt" ):
                listener.exitPutStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPutStmt" ):
                return visitor.visitPutStmt(self)
            else:
                return visitor.visitChildren(self)




    def putStmt(self):

        localctx = vbaParser.PutStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_putStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.match(vbaParser.PUT)
            self.state = 1479
            self.match(vbaParser.WS)
            self.state = 1480
            self.fileNumber()
            self.state = 1482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1481
                self.match(vbaParser.WS)


            self.state = 1484
            self.match(vbaParser.T__0)
            self.state = 1486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1485
                self.match(vbaParser.WS)


            self.state = 1489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1488
                self.expression(0)


            self.state = 1492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1491
                self.match(vbaParser.WS)


            self.state = 1494
            self.match(vbaParser.T__0)
            self.state = 1496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1495
                self.match(vbaParser.WS)


            self.state = 1498
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaiseEventStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_raiseEventStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseEventStmt" ):
                listener.enterRaiseEventStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseEventStmt" ):
                listener.exitRaiseEventStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaiseEventStmt" ):
                return visitor.visitRaiseEventStmt(self)
            else:
                return visitor.visitChildren(self)




    def raiseEventStmt(self):

        localctx = vbaParser.RaiseEventStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_raiseEventStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self.match(vbaParser.RAISEEVENT)
            self.state = 1501
            self.match(vbaParser.WS)
            self.state = 1502
            self.ambiguousIdentifier()
            self.state = 1517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1503
                    self.match(vbaParser.WS)


                self.state = 1506
                self.match(vbaParser.LPAREN)
                self.state = 1508
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 1507
                    self.match(vbaParser.WS)


                self.state = 1514
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1510
                    self.argsCall()
                    self.state = 1512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 1511
                        self.match(vbaParser.WS)




                self.state = 1516
                self.match(vbaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RandomizeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANDOMIZE(self):
            return self.getToken(vbaParser.RANDOMIZE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_randomizeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRandomizeStmt" ):
                listener.enterRandomizeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRandomizeStmt" ):
                listener.exitRandomizeStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRandomizeStmt" ):
                return visitor.visitRandomizeStmt(self)
            else:
                return visitor.visitChildren(self)




    def randomizeStmt(self):

        localctx = vbaParser.RandomizeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_randomizeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self.match(vbaParser.RANDOMIZE)
            self.state = 1522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1520
                self.match(vbaParser.WS)
                self.state = 1521
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def redimSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.RedimSubStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.RedimSubStmtContext,i)


        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_redimStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimStmt" ):
                listener.enterRedimStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimStmt" ):
                listener.exitRedimStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimStmt" ):
                return visitor.visitRedimStmt(self)
            else:
                return visitor.visitChildren(self)




    def redimStmt(self):

        localctx = vbaParser.RedimStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_redimStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.match(vbaParser.REDIM)
            self.state = 1525
            self.match(vbaParser.WS)
            self.state = 1528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1526
                self.match(vbaParser.PRESERVE)
                self.state = 1527
                self.match(vbaParser.WS)


            self.state = 1530
            self.redimSubStmt()
            self.state = 1541
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 1531
                        self.match(vbaParser.WS)


                    self.state = 1534
                    self.match(vbaParser.T__0)
                    self.state = 1536
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                    if la_ == 1:
                        self.state = 1535
                        self.match(vbaParser.WS)


                    self.state = 1538
                    self.redimSubStmt() 
                self.state = 1543
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimSubStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def subscripts(self):
            return self.getTypedRuleContext(vbaParser.SubscriptsContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimSubStmt" ):
                listener.enterRedimSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimSubStmt" ):
                listener.exitRedimSubStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedimSubStmt" ):
                return visitor.visitRedimSubStmt(self)
            else:
                return visitor.visitChildren(self)




    def redimSubStmt(self):

        localctx = vbaParser.RedimSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_redimSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            self.implicitCallStmt_InStmt()
            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1545
                self.match(vbaParser.WS)


            self.state = 1548
            self.match(vbaParser.LPAREN)
            self.state = 1550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1549
                self.match(vbaParser.WS)


            self.state = 1552
            self.subscripts()
            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1553
                self.match(vbaParser.WS)


            self.state = 1556
            self.match(vbaParser.RPAREN)
            self.state = 1559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1557
                self.match(vbaParser.WS)
                self.state = 1558
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_resetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStmt" ):
                listener.enterResetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStmt" ):
                listener.exitResetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetStmt" ):
                return visitor.visitResetStmt(self)
            else:
                return visitor.visitChildren(self)




    def resetStmt(self):

        localctx = vbaParser.ResetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_resetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self.match(vbaParser.RESET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResumeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_resumeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumeStmt" ):
                listener.enterResumeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumeStmt" ):
                listener.exitResumeStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResumeStmt" ):
                return visitor.visitResumeStmt(self)
            else:
                return visitor.visitChildren(self)




    def resumeStmt(self):

        localctx = vbaParser.ResumeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_resumeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.match(vbaParser.RESUME)
            self.state = 1569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1564
                self.match(vbaParser.WS)
                self.state = 1567
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1565
                    self.match(vbaParser.NEXT)
                    pass

                elif la_ == 2:
                    self.state = 1566
                    self.ambiguousIdentifier()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = vbaParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            self.match(vbaParser.RETURN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RmdirStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RMDIR(self):
            return self.getToken(vbaParser.RMDIR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_rmdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRmdirStmt" ):
                listener.enterRmdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRmdirStmt" ):
                listener.exitRmdirStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRmdirStmt" ):
                return visitor.visitRmdirStmt(self)
            else:
                return visitor.visitChildren(self)




    def rmdirStmt(self):

        localctx = vbaParser.RmdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_rmdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self.match(vbaParser.RMDIR)
            self.state = 1574
            self.match(vbaParser.WS)
            self.state = 1575
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RsetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_rsetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRsetStmt" ):
                listener.enterRsetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRsetStmt" ):
                listener.exitRsetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRsetStmt" ):
                return visitor.visitRsetStmt(self)
            else:
                return visitor.visitChildren(self)




    def rsetStmt(self):

        localctx = vbaParser.RsetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_rsetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self.match(vbaParser.RSET)
            self.state = 1578
            self.match(vbaParser.WS)
            self.state = 1579
            self.implicitCallStmt_InStmt()
            self.state = 1581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1580
                self.match(vbaParser.WS)


            self.state = 1583
            self.match(vbaParser.EQ)
            self.state = 1585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 1584
                self.match(vbaParser.WS)


            self.state = 1587
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SavepictureStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPICTURE(self):
            return self.getToken(vbaParser.SAVEPICTURE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_savepictureStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepictureStmt" ):
                listener.enterSavepictureStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepictureStmt" ):
                listener.exitSavepictureStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepictureStmt" ):
                return visitor.visitSavepictureStmt(self)
            else:
                return visitor.visitChildren(self)




    def savepictureStmt(self):

        localctx = vbaParser.SavepictureStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_savepictureStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.match(vbaParser.SAVEPICTURE)
            self.state = 1590
            self.match(vbaParser.WS)
            self.state = 1591
            self.expression(0)
            self.state = 1593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1592
                self.match(vbaParser.WS)


            self.state = 1595
            self.match(vbaParser.T__0)
            self.state = 1597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1596
                self.match(vbaParser.WS)


            self.state = 1599
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SaveSettingStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVESETTING(self):
            return self.getToken(vbaParser.SAVESETTING, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_saveSettingStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSaveSettingStmt" ):
                listener.enterSaveSettingStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSaveSettingStmt" ):
                listener.exitSaveSettingStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSaveSettingStmt" ):
                return visitor.visitSaveSettingStmt(self)
            else:
                return visitor.visitChildren(self)




    def saveSettingStmt(self):

        localctx = vbaParser.SaveSettingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_saveSettingStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self.match(vbaParser.SAVESETTING)
            self.state = 1602
            self.match(vbaParser.WS)
            self.state = 1603
            self.expression(0)
            self.state = 1605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1604
                self.match(vbaParser.WS)


            self.state = 1607
            self.match(vbaParser.T__0)
            self.state = 1609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1608
                self.match(vbaParser.WS)


            self.state = 1611
            self.expression(0)
            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1612
                self.match(vbaParser.WS)


            self.state = 1615
            self.match(vbaParser.T__0)
            self.state = 1617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 1616
                self.match(vbaParser.WS)


            self.state = 1619
            self.expression(0)
            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1620
                self.match(vbaParser.WS)


            self.state = 1623
            self.match(vbaParser.T__0)
            self.state = 1625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1624
                self.match(vbaParser.WS)


            self.state = 1627
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeekStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_seekStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeekStmt" ):
                listener.enterSeekStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeekStmt" ):
                listener.exitSeekStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeekStmt" ):
                return visitor.visitSeekStmt(self)
            else:
                return visitor.visitChildren(self)




    def seekStmt(self):

        localctx = vbaParser.SeekStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_seekStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.match(vbaParser.SEEK)
            self.state = 1630
            self.match(vbaParser.WS)
            self.state = 1631
            self.fileNumber()
            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1632
                self.match(vbaParser.WS)


            self.state = 1635
            self.match(vbaParser.T__0)
            self.state = 1637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.state = 1636
                self.match(vbaParser.WS)


            self.state = 1639
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectCaseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(vbaParser.SELECT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_SELECT(self):
            return self.getToken(vbaParser.END_SELECT, 0)

        def sC_Case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SC_CaseContext)
            else:
                return self.getTypedRuleContext(vbaParser.SC_CaseContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_selectCaseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectCaseStmt" ):
                listener.enterSelectCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectCaseStmt" ):
                listener.exitSelectCaseStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectCaseStmt" ):
                return visitor.visitSelectCaseStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectCaseStmt(self):

        localctx = vbaParser.SelectCaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_selectCaseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(vbaParser.SELECT)
            self.state = 1642
            self.match(vbaParser.WS)
            self.state = 1643
            self.match(vbaParser.CASE)
            self.state = 1644
            self.match(vbaParser.WS)
            self.state = 1645
            self.expression(0)
            self.state = 1646
            self.endOfStatement()
            self.state = 1650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25:
                self.state = 1647
                self.sC_Case()
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1653
            self.match(vbaParser.END_SELECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SC_SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_sC_Selection

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CaseCondValueContext(SC_SelectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_SelectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondValue" ):
                listener.enterCaseCondValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondValue" ):
                listener.exitCaseCondValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseCondValue" ):
                return visitor.visitCaseCondValue(self)
            else:
                return visitor.visitChildren(self)


    class CaseCondToContext(SC_SelectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_SelectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)
        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondTo" ):
                listener.enterCaseCondTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondTo" ):
                listener.exitCaseCondTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseCondTo" ):
                return visitor.visitCaseCondTo(self)
            else:
                return visitor.visitChildren(self)


    class CaseCondIsContext(SC_SelectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_SelectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)
        def comparisonOperator(self):
            return self.getTypedRuleContext(vbaParser.ComparisonOperatorContext,0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondIs" ):
                listener.enterCaseCondIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondIs" ):
                listener.exitCaseCondIs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseCondIs" ):
                return visitor.visitCaseCondIs(self)
            else:
                return visitor.visitChildren(self)



    def sC_Selection(self):

        localctx = vbaParser.SC_SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_sC_Selection)
        self._la = 0 # Token type
        try:
            self.state = 1672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                localctx = vbaParser.CaseCondIsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1655
                self.match(vbaParser.IS)
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1656
                    self.match(vbaParser.WS)


                self.state = 1659
                self.comparisonOperator()
                self.state = 1661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 1660
                    self.match(vbaParser.WS)


                self.state = 1663
                self.expression(0)
                pass

            elif la_ == 2:
                localctx = vbaParser.CaseCondToContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1665
                self.expression(0)
                self.state = 1666
                self.match(vbaParser.WS)
                self.state = 1667
                self.match(vbaParser.TO)
                self.state = 1668
                self.match(vbaParser.WS)
                self.state = 1669
                self.expression(0)
                pass

            elif la_ == 3:
                localctx = vbaParser.CaseCondValueContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1671
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SC_CaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def sC_Cond(self):
            return self.getTypedRuleContext(vbaParser.SC_CondContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_sC_Case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSC_Case" ):
                listener.enterSC_Case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSC_Case" ):
                listener.exitSC_Case(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSC_Case" ):
                return visitor.visitSC_Case(self)
            else:
                return visitor.visitChildren(self)




    def sC_Case(self):

        localctx = vbaParser.SC_CaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_sC_Case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.match(vbaParser.CASE)
            self.state = 1675
            self.match(vbaParser.WS)
            self.state = 1676
            self.sC_Cond()
            self.state = 1677
            self.endOfStatement()
            self.state = 1679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 1678
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SC_CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_sC_Cond

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CaseCondSelectionContext(SC_CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sC_Selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SC_SelectionContext)
            else:
                return self.getTypedRuleContext(vbaParser.SC_SelectionContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondSelection" ):
                listener.enterCaseCondSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondSelection" ):
                listener.exitCaseCondSelection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseCondSelection" ):
                return visitor.visitCaseCondSelection(self)
            else:
                return visitor.visitChildren(self)


    class CaseCondElseContext(SC_CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondElse" ):
                listener.enterCaseCondElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondElse" ):
                listener.exitCaseCondElse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseCondElse" ):
                return visitor.visitCaseCondElse(self)
            else:
                return visitor.visitChildren(self)



    def sC_Cond(self):

        localctx = vbaParser.SC_CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_sC_Cond)
        self._la = 0 # Token type
        try:
            self.state = 1696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                localctx = vbaParser.CaseCondElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1681
                self.match(vbaParser.ELSE)
                pass

            elif la_ == 2:
                localctx = vbaParser.CaseCondSelectionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1682
                self.sC_Selection()
                self.state = 1693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1684
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==217:
                            self.state = 1683
                            self.match(vbaParser.WS)


                        self.state = 1686
                        self.match(vbaParser.T__0)
                        self.state = 1688
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                        if la_ == 1:
                            self.state = 1687
                            self.match(vbaParser.WS)


                        self.state = 1690
                        self.sC_Selection() 
                    self.state = 1695
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendkeysStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SENDKEYS(self):
            return self.getToken(vbaParser.SENDKEYS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_sendkeysStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendkeysStmt" ):
                listener.enterSendkeysStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendkeysStmt" ):
                listener.exitSendkeysStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendkeysStmt" ):
                return visitor.visitSendkeysStmt(self)
            else:
                return visitor.visitChildren(self)




    def sendkeysStmt(self):

        localctx = vbaParser.SendkeysStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_sendkeysStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.match(vbaParser.SENDKEYS)
            self.state = 1699
            self.match(vbaParser.WS)
            self.state = 1700
            self.expression(0)
            self.state = 1709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1701
                    self.match(vbaParser.WS)


                self.state = 1704
                self.match(vbaParser.T__0)
                self.state = 1706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 1705
                    self.match(vbaParser.WS)


                self.state = 1708
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetattrStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETATTR(self):
            return self.getToken(vbaParser.SETATTR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_setattrStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetattrStmt" ):
                listener.enterSetattrStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetattrStmt" ):
                listener.exitSetattrStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetattrStmt" ):
                return visitor.visitSetattrStmt(self)
            else:
                return visitor.visitChildren(self)




    def setattrStmt(self):

        localctx = vbaParser.SetattrStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_setattrStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            self.match(vbaParser.SETATTR)
            self.state = 1712
            self.match(vbaParser.WS)
            self.state = 1713
            self.expression(0)
            self.state = 1715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1714
                self.match(vbaParser.WS)


            self.state = 1717
            self.match(vbaParser.T__0)
            self.state = 1719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.state = 1718
                self.match(vbaParser.WS)


            self.state = 1721
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_setStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStmt" ):
                listener.enterSetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStmt" ):
                listener.exitSetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStmt" ):
                return visitor.visitSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def setStmt(self):

        localctx = vbaParser.SetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_setStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self.match(vbaParser.SET)
            self.state = 1724
            self.match(vbaParser.WS)
            self.state = 1725
            self.implicitCallStmt_InStmt()
            self.state = 1727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1726
                self.match(vbaParser.WS)


            self.state = 1729
            self.match(vbaParser.EQ)
            self.state = 1731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 1730
                self.match(vbaParser.WS)


            self.state = 1733
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_stopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopStmt" ):
                listener.enterStopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopStmt" ):
                listener.exitStopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStopStmt" ):
                return visitor.visitStopStmt(self)
            else:
                return visitor.visitChildren(self)




    def stopStmt(self):

        localctx = vbaParser.StopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_stopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.match(vbaParser.STOP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.SUB)
            else:
                return self.getToken(vbaParser.SUB, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END(self):
            return self.getToken(vbaParser.END, 0)

        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_subStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubStmt" ):
                listener.enterSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubStmt" ):
                listener.exitSubStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubStmt" ):
                return visitor.visitSubStmt(self)
            else:
                return visitor.visitChildren(self)




    def subStmt(self):

        localctx = vbaParser.SubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_subStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 4755801206503243793) != 0):
                self.state = 1737
                self.visibility()
                self.state = 1738
                self.match(vbaParser.WS)


            self.state = 1744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 1742
                self.match(vbaParser.STATIC)
                self.state = 1743
                self.match(vbaParser.WS)


            self.state = 1746
            self.match(vbaParser.SUB)
            self.state = 1748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1747
                self.match(vbaParser.WS)


            self.state = 1750
            self.ambiguousIdentifier()
            self.state = 1755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1751
                    self.match(vbaParser.WS)


                self.state = 1754
                self.argList()


            self.state = 1757
            self.endOfStatement()
            self.state = 1759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 1758
                self.block()


            self.state = 1761
            self.match(vbaParser.END)
            self.state = 1762
            self.wsc()
            self.state = 1763
            self.match(vbaParser.SUB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(vbaParser.TIME, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_timeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeStmt" ):
                listener.enterTimeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeStmt" ):
                listener.exitTimeStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeStmt" ):
                return visitor.visitTimeStmt(self)
            else:
                return visitor.visitChildren(self)




    def timeStmt(self):

        localctx = vbaParser.TimeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_timeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            self.match(vbaParser.TIME)
            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 1766
                self.match(vbaParser.WS)


            self.state = 1769
            self.match(vbaParser.EQ)
            self.state = 1771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.state = 1770
                self.match(vbaParser.WS)


            self.state = 1773
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(vbaParser.TYPE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_TYPE(self):
            return self.getToken(vbaParser.END_TYPE, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def typeStmt_Element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.TypeStmt_ElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.TypeStmt_ElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_typeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStmt" ):
                listener.enterTypeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStmt" ):
                listener.exitTypeStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeStmt" ):
                return visitor.visitTypeStmt(self)
            else:
                return visitor.visitChildren(self)




    def typeStmt(self):

        localctx = vbaParser.TypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_typeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 4755801206503243793) != 0):
                self.state = 1775
                self.visibility()
                self.state = 1776
                self.match(vbaParser.WS)


            self.state = 1780
            self.match(vbaParser.TYPE)
            self.state = 1781
            self.match(vbaParser.WS)
            self.state = 1782
            self.ambiguousIdentifier()
            self.state = 1783
            self.endOfStatement()
            self.state = 1787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -558446353793942016) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1094376871967064127) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 36028797018959811) != 0) or _la==218:
                self.state = 1784
                self.typeStmt_Element()
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1790
            self.match(vbaParser.END_TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStmt_ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def subscripts(self):
            return self.getTypedRuleContext(vbaParser.SubscriptsContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeStmt_Element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStmt_Element" ):
                listener.enterTypeStmt_Element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStmt_Element" ):
                listener.exitTypeStmt_Element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeStmt_Element" ):
                return visitor.visitTypeStmt_Element(self)
            else:
                return visitor.visitChildren(self)




    def typeStmt_Element(self):

        localctx = vbaParser.TypeStmt_ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_typeStmt_Element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            self.ambiguousIdentifier()
            self.state = 1807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1793
                    self.match(vbaParser.WS)


                self.state = 1796
                self.match(vbaParser.LPAREN)
                self.state = 1801
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                if la_ == 1:
                    self.state = 1798
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                    if la_ == 1:
                        self.state = 1797
                        self.match(vbaParser.WS)


                    self.state = 1800
                    self.subscripts()


                self.state = 1804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1803
                    self.match(vbaParser.WS)


                self.state = 1806
                self.match(vbaParser.RPAREN)


            self.state = 1811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 1809
                self.match(vbaParser.WS)
                self.state = 1810
                self.asTypeClause()


            self.state = 1813
            self.endOfStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeOfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def type_(self):
            return self.getTypedRuleContext(vbaParser.Type_Context,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOfStmt" ):
                listener.enterTypeOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOfStmt" ):
                listener.exitTypeOfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeOfStmt" ):
                return visitor.visitTypeOfStmt(self)
            else:
                return visitor.visitChildren(self)




    def typeOfStmt(self):

        localctx = vbaParser.TypeOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_typeOfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self.match(vbaParser.TYPEOF)
            self.state = 1816
            self.match(vbaParser.WS)
            self.state = 1817
            self.expression(0)
            self.state = 1822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.state = 1818
                self.match(vbaParser.WS)
                self.state = 1819
                self.match(vbaParser.IS)
                self.state = 1820
                self.match(vbaParser.WS)
                self.state = 1821
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnloadStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOAD(self):
            return self.getToken(vbaParser.UNLOAD, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unloadStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnloadStmt" ):
                listener.enterUnloadStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnloadStmt" ):
                listener.exitUnloadStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnloadStmt" ):
                return visitor.visitUnloadStmt(self)
            else:
                return visitor.visitChildren(self)




    def unloadStmt(self):

        localctx = vbaParser.UnloadStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_unloadStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.match(vbaParser.UNLOAD)
            self.state = 1825
            self.match(vbaParser.WS)
            self.state = 1826
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_unlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockStmt" ):
                listener.enterUnlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockStmt" ):
                listener.exitUnlockStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnlockStmt" ):
                return visitor.visitUnlockStmt(self)
            else:
                return visitor.visitChildren(self)




    def unlockStmt(self):

        localctx = vbaParser.UnlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_unlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.match(vbaParser.UNLOCK)
            self.state = 1829
            self.match(vbaParser.WS)
            self.state = 1830
            self.fileNumber()
            self.state = 1845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 1832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1831
                    self.match(vbaParser.WS)


                self.state = 1834
                self.match(vbaParser.T__0)
                self.state = 1836
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                if la_ == 1:
                    self.state = 1835
                    self.match(vbaParser.WS)


                self.state = 1838
                self.expression(0)
                self.state = 1843
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 1839
                    self.match(vbaParser.WS)
                    self.state = 1840
                    self.match(vbaParser.TO)
                    self.state = 1841
                    self.match(vbaParser.WS)
                    self.state = 1842
                    self.expression(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(vbaParser.LiteralContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(vbaParser.ParenthesizedExpressionContext,0)


        def newExpress(self):
            return self.getTypedRuleContext(vbaParser.NewExpressContext,0)


        def typeOfStmt(self):
            return self.getTypedRuleContext(vbaParser.TypeOfStmtContext,0)


        def midStmt(self):
            return self.getTypedRuleContext(vbaParser.MidStmtContext,0)


        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def ASSIGN(self):
            return self.getToken(vbaParser.ASSIGN, 0)

        def unaryMinusExpression(self):
            return self.getTypedRuleContext(vbaParser.UnaryMinusExpressionContext,0)


        def notOperatorExpression(self):
            return self.getTypedRuleContext(vbaParser.NotOperatorExpressionContext,0)


        def POW(self):
            return self.getToken(vbaParser.POW, 0)

        def DIV(self):
            return self.getToken(vbaParser.DIV, 0)

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)

        def PLUS(self):
            return self.getToken(vbaParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def AMPERSAND(self):
            return self.getToken(vbaParser.AMPERSAND, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)

        def LT(self):
            return self.getToken(vbaParser.LT, 0)

        def NEQ(self):
            return self.getToken(vbaParser.NEQ, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = vbaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 202
        self.enterRecursionRule(localctx, 202, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 1848
                self.literal()
                pass

            elif la_ == 2:
                self.state = 1849
                self.implicitCallStmt_InStmt()
                pass

            elif la_ == 3:
                self.state = 1850
                self.parenthesizedExpression()
                pass

            elif la_ == 4:
                self.state = 1851
                self.newExpress()
                pass

            elif la_ == 5:
                self.state = 1852
                self.typeOfStmt()
                pass

            elif la_ == 6:
                self.state = 1853
                self.midStmt()
                pass

            elif la_ == 7:
                self.state = 1854
                self.match(vbaParser.ADDRESSOF)
                self.state = 1856
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 1855
                    self.wsc()


                self.state = 1858
                self.expression(11)
                pass

            elif la_ == 8:
                self.state = 1859
                self.implicitCallStmt_InStmt()
                self.state = 1861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==210 or _la==217:
                    self.state = 1860
                    self.wsc()


                self.state = 1863
                self.match(vbaParser.ASSIGN)
                self.state = 1865
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 1864
                    self.wsc()


                self.state = 1867
                self.expression(10)
                pass

            elif la_ == 9:
                self.state = 1869
                self.unaryMinusExpression()
                pass

            elif la_ == 10:
                self.state = 1870
                self.notOperatorExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1938
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1936
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                    if la_ == 1:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1873
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1875
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==210 or _la==217:
                            self.state = 1874
                            self.wsc()


                        self.state = 1877
                        self.match(vbaParser.POW)
                        self.state = 1879
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                        if la_ == 1:
                            self.state = 1878
                            self.wsc()


                        self.state = 1881
                        self.expression(10)
                        pass

                    elif la_ == 2:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1882
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1884
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==210 or _la==217:
                            self.state = 1883
                            self.wsc()


                        self.state = 1886
                        _la = self._input.LA(1)
                        if not(_la==185 or _la==194):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1888
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                        if la_ == 1:
                            self.state = 1887
                            self.wsc()


                        self.state = 1890
                        self.expression(8)
                        pass

                    elif la_ == 3:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1891
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1893
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==210 or _la==217:
                            self.state = 1892
                            self.wsc()


                        self.state = 1895
                        self.match(vbaParser.MOD)
                        self.state = 1897
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                        if la_ == 1:
                            self.state = 1896
                            self.wsc()


                        self.state = 1899
                        self.expression(7)
                        pass

                    elif la_ == 4:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1900
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1902
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==210 or _la==217:
                            self.state = 1901
                            self.wsc()


                        self.state = 1904
                        _la = self._input.LA(1)
                        if not(_la==192 or _la==196):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1906
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                        if la_ == 1:
                            self.state = 1905
                            self.wsc()


                        self.state = 1908
                        self.expression(6)
                        pass

                    elif la_ == 5:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1909
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1911
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==210 or _la==217:
                            self.state = 1910
                            self.wsc()


                        self.state = 1913
                        self.match(vbaParser.AMPERSAND)
                        self.state = 1915
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                        if la_ == 1:
                            self.state = 1914
                            self.wsc()


                        self.state = 1917
                        self.expression(5)
                        pass

                    elif la_ == 6:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1918
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1920
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==210 or _la==217:
                            self.state = 1919
                            self.wsc()


                        self.state = 1922
                        _la = self._input.LA(1)
                        if not(_la==84 or _la==94 or ((((_la - 186)) & ~0x3f) == 0 and ((1 << (_la - 186)) & 559) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1924
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                        if la_ == 1:
                            self.state = 1923
                            self.wsc()


                        self.state = 1926
                        self.expression(4)
                        pass

                    elif la_ == 7:
                        localctx = vbaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1927
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1929
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==210 or _la==217:
                            self.state = 1928
                            self.wsc()


                        self.state = 1931
                        _la = self._input.LA(1)
                        if not(_la==12 or _la==61 or _la==80 or _la==124 or _la==182):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1933
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                        if la_ == 1:
                            self.state = 1932
                            self.wsc()


                        self.state = 1935
                        self.expression(2)
                        pass

             
                self.state = 1940
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NewExpressContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_newExpress

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpress" ):
                listener.enterNewExpress(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpress" ):
                listener.exitNewExpress(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExpress" ):
                return visitor.visitNewExpress(self)
            else:
                return visitor.visitChildren(self)




    def newExpress(self):

        localctx = vbaParser.NewExpressContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_newExpress)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1941
            self.match(vbaParser.NEW)
            self.state = 1943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 1942
                self.wsc()


            self.state = 1945
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_notOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotOperatorExpression" ):
                listener.enterNotOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotOperatorExpression" ):
                listener.exitNotOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotOperatorExpression" ):
                return visitor.visitNotOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def notOperatorExpression(self):

        localctx = vbaParser.NotOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_notOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(vbaParser.NOT)
            self.state = 1949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 1948
                self.wsc()


            self.state = 1951
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def wsc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.WscContext)
            else:
                return self.getTypedRuleContext(vbaParser.WscContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedExpression(self):

        localctx = vbaParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_parenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.match(vbaParser.LPAREN)
            self.state = 1955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 1954
                self.wsc()


            self.state = 1957
            self.expression(0)
            self.state = 1959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==210 or _la==217:
                self.state = 1958
                self.wsc()


            self.state = 1961
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryMinusExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def wsc(self):
            return self.getTypedRuleContext(vbaParser.WscContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unaryMinusExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryMinusExpression" ):
                listener.enterUnaryMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryMinusExpression" ):
                listener.exitUnaryMinusExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryMinusExpression" ):
                return visitor.visitUnaryMinusExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryMinusExpression(self):

        localctx = vbaParser.UnaryMinusExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_unaryMinusExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1963
            self.match(vbaParser.MINUS)
            self.state = 1965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 1964
                self.wsc()


            self.state = 1967
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def variableListStmt(self):
            return self.getTypedRuleContext(vbaParser.VariableListStmtContext,0)


        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_variableStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableStmt" ):
                listener.enterVariableStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableStmt" ):
                listener.exitVariableStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableStmt" ):
                return visitor.visitVariableStmt(self)
            else:
                return visitor.visitChildren(self)




    def variableStmt(self):

        localctx = vbaParser.VariableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_variableStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.state = 1969
                self.match(vbaParser.DIM)
                pass
            elif token in [158]:
                self.state = 1970
                self.match(vbaParser.STATIC)
                pass
            elif token in [72, 76, 129, 134]:
                self.state = 1971
                self.visibility()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1974
            self.match(vbaParser.WS)
            self.state = 1977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 1975
                self.match(vbaParser.WITHEVENTS)
                self.state = 1976
                self.match(vbaParser.WS)


            self.state = 1979
            self.variableListStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableListStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.VariableSubStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.VariableSubStmtContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_variableListStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableListStmt" ):
                listener.enterVariableListStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableListStmt" ):
                listener.exitVariableListStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableListStmt" ):
                return visitor.visitVariableListStmt(self)
            else:
                return visitor.visitChildren(self)




    def variableListStmt(self):

        localctx = vbaParser.VariableListStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_variableListStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1981
            self.variableSubStmt()
            self.state = 1992
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,301,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1983
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 1982
                        self.match(vbaParser.WS)


                    self.state = 1985
                    self.match(vbaParser.T__0)
                    self.state = 1987
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 1986
                        self.match(vbaParser.WS)


                    self.state = 1989
                    self.variableSubStmt() 
                self.state = 1994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,301,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableSubStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def subscripts(self):
            return self.getTypedRuleContext(vbaParser.SubscriptsContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSubStmt" ):
                listener.enterVariableSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSubStmt" ):
                listener.exitVariableSubStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableSubStmt" ):
                return visitor.visitVariableSubStmt(self)
            else:
                return visitor.visitChildren(self)




    def variableSubStmt(self):

        localctx = vbaParser.VariableSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_variableSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1995
            self.ambiguousIdentifier()
            self.state = 2013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.state = 1997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 1996
                    self.match(vbaParser.WS)


                self.state = 1999
                self.match(vbaParser.LPAREN)
                self.state = 2001
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 2000
                    self.match(vbaParser.WS)


                self.state = 2007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -558446353793941512) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1094376871967064127) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4683743612465311683) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 101185537) != 0):
                    self.state = 2003
                    self.subscripts()
                    self.state = 2005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2004
                        self.match(vbaParser.WS)




                self.state = 2009
                self.match(vbaParser.RPAREN)
                self.state = 2011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                if la_ == 1:
                    self.state = 2010
                    self.match(vbaParser.WS)




            self.state = 2016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 2015
                self.typeHint()


            self.state = 2020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2018
                self.match(vbaParser.WS)
                self.state = 2019
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileWendStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_whileWendStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileWendStmt" ):
                listener.enterWhileWendStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileWendStmt" ):
                listener.exitWhileWendStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileWendStmt" ):
                return visitor.visitWhileWendStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileWendStmt(self):

        localctx = vbaParser.WhileWendStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_whileWendStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.match(vbaParser.WHILE)
            self.state = 2023
            self.match(vbaParser.WS)
            self.state = 2024
            self.expression(0)
            self.state = 2025
            self.endOfStatement()
            self.state = 2027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2026
                self.block()


            self.state = 2029
            self.match(vbaParser.WEND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WidthStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_widthStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthStmt" ):
                listener.enterWidthStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthStmt" ):
                listener.exitWidthStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWidthStmt" ):
                return visitor.visitWidthStmt(self)
            else:
                return visitor.visitChildren(self)




    def widthStmt(self):

        localctx = vbaParser.WidthStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_widthStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            self.match(vbaParser.WIDTH)
            self.state = 2032
            self.match(vbaParser.WS)
            self.state = 2033
            self.fileNumber()
            self.state = 2035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 2034
                self.match(vbaParser.WS)


            self.state = 2037
            self.match(vbaParser.T__0)
            self.state = 2039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.state = 2038
                self.match(vbaParser.WS)


            self.state = 2041
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(vbaParser.WITH, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_WITH(self):
            return self.getToken(vbaParser.END_WITH, 0)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def type_(self):
            return self.getTypedRuleContext(vbaParser.Type_Context,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStmt" ):
                listener.enterWithStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStmt" ):
                listener.exitWithStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithStmt" ):
                return visitor.visitWithStmt(self)
            else:
                return visitor.visitChildren(self)




    def withStmt(self):

        localctx = vbaParser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_withStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2043
            self.match(vbaParser.WITH)
            self.state = 2044
            self.match(vbaParser.WS)
            self.state = 2049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2045
                self.implicitCallStmt_InStmt()
                pass

            elif la_ == 2:
                self.state = 2046
                self.match(vbaParser.NEW)
                self.state = 2047
                self.match(vbaParser.WS)
                self.state = 2048
                self.type_()
                pass


            self.state = 2051
            self.endOfStatement()
            self.state = 2053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -558446353793941968) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1080865864779038721) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 36028797018959811) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & 6163) != 0):
                self.state = 2052
                self.block()


            self.state = 2055
            self.match(vbaParser.END_WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_writeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStmt" ):
                listener.enterWriteStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStmt" ):
                listener.exitWriteStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteStmt" ):
                return visitor.visitWriteStmt(self)
            else:
                return visitor.visitChildren(self)




    def writeStmt(self):

        localctx = vbaParser.WriteStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_writeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self.match(vbaParser.WRITE)
            self.state = 2058
            self.match(vbaParser.WS)
            self.state = 2059
            self.fileNumber()
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 2060
                self.match(vbaParser.WS)


            self.state = 2063
            self.match(vbaParser.T__0)
            self.state = 2068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.state = 2065
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
                if la_ == 1:
                    self.state = 2064
                    self.match(vbaParser.WS)


                self.state = 2067
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileNumber" ):
                listener.enterFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileNumber" ):
                listener.exitFileNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileNumber" ):
                return visitor.visitFileNumber(self)
            else:
                return visitor.visitChildren(self)




    def fileNumber(self):

        localctx = vbaParser.FileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_fileNumber)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 2070
                self.match(vbaParser.T__2)


            self.state = 2073
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitCallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eCS_ProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ECS_ProcedureCallContext,0)


        def eCS_MemberProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ECS_MemberProcedureCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_explicitCallStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitCallStmt" ):
                listener.enterExplicitCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitCallStmt" ):
                listener.exitExplicitCallStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitCallStmt" ):
                return visitor.visitExplicitCallStmt(self)
            else:
                return visitor.visitChildren(self)




    def explicitCallStmt(self):

        localctx = vbaParser.ExplicitCallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_explicitCallStmt)
        try:
            self.state = 2077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2075
                self.eCS_ProcedureCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2076
                self.eCS_MemberProcedureCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ECS_ProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eCS_ProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterECS_ProcedureCall" ):
                listener.enterECS_ProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitECS_ProcedureCall" ):
                listener.exitECS_ProcedureCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitECS_ProcedureCall" ):
                return visitor.visitECS_ProcedureCall(self)
            else:
                return visitor.visitChildren(self)




    def eCS_ProcedureCall(self):

        localctx = vbaParser.ECS_ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_eCS_ProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079
            self.match(vbaParser.CALL)
            self.state = 2080
            self.match(vbaParser.WS)
            self.state = 2081
            self.ambiguousIdentifier()
            self.state = 2083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.state = 2082
                self.typeHint()


            self.state = 2098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.state = 2086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2085
                    self.match(vbaParser.WS)


                self.state = 2088
                self.match(vbaParser.LPAREN)
                self.state = 2090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2089
                    self.match(vbaParser.WS)


                self.state = 2092
                self.argsCall()
                self.state = 2094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2093
                    self.match(vbaParser.WS)


                self.state = 2096
                self.match(vbaParser.RPAREN)


            self.state = 2109
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2100
                        self.match(vbaParser.WS)


                    self.state = 2103
                    self.match(vbaParser.LPAREN)
                    self.state = 2104
                    self.subscripts()
                    self.state = 2105
                    self.match(vbaParser.RPAREN) 
                self.state = 2111
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ECS_MemberProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eCS_MemberProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterECS_MemberProcedureCall" ):
                listener.enterECS_MemberProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitECS_MemberProcedureCall" ):
                listener.exitECS_MemberProcedureCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitECS_MemberProcedureCall" ):
                return visitor.visitECS_MemberProcedureCall(self)
            else:
                return visitor.visitChildren(self)




    def eCS_MemberProcedureCall(self):

        localctx = vbaParser.ECS_MemberProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_eCS_MemberProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2112
            self.match(vbaParser.CALL)
            self.state = 2113
            self.match(vbaParser.WS)
            self.state = 2115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.state = 2114
                self.implicitCallStmt_InStmt()


            self.state = 2117
            self.match(vbaParser.T__3)
            self.state = 2118
            self.ambiguousIdentifier()
            self.state = 2120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.state = 2119
                self.typeHint()


            self.state = 2135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2122
                    self.match(vbaParser.WS)


                self.state = 2125
                self.match(vbaParser.LPAREN)
                self.state = 2127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 2126
                    self.match(vbaParser.WS)


                self.state = 2129
                self.argsCall()
                self.state = 2131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2130
                    self.match(vbaParser.WS)


                self.state = 2133
                self.match(vbaParser.RPAREN)


            self.state = 2146
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2137
                        self.match(vbaParser.WS)


                    self.state = 2140
                    self.match(vbaParser.LPAREN)
                    self.state = 2141
                    self.subscripts()
                    self.state = 2142
                    self.match(vbaParser.RPAREN) 
                self.state = 2148
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitCallStmt_InBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_B_MemberProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_B_MemberProcedureCallContext,0)


        def iCS_B_ProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_B_ProcedureCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implicitCallStmt_InBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitCallStmt_InBlock" ):
                listener.enterImplicitCallStmt_InBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitCallStmt_InBlock" ):
                listener.exitImplicitCallStmt_InBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplicitCallStmt_InBlock" ):
                return visitor.visitImplicitCallStmt_InBlock(self)
            else:
                return visitor.visitChildren(self)




    def implicitCallStmt_InBlock(self):

        localctx = vbaParser.ImplicitCallStmt_InBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_implicitCallStmt_InBlock)
        try:
            self.state = 2151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2149
                self.iCS_B_MemberProcedureCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2150
                self.iCS_B_ProcedureCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_B_MemberProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_B_MemberProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_B_MemberProcedureCall" ):
                listener.enterICS_B_MemberProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_B_MemberProcedureCall" ):
                listener.exitICS_B_MemberProcedureCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitICS_B_MemberProcedureCall" ):
                return visitor.visitICS_B_MemberProcedureCall(self)
            else:
                return visitor.visitChildren(self)




    def iCS_B_MemberProcedureCall(self):

        localctx = vbaParser.ICS_B_MemberProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_iCS_B_MemberProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2153
                self.implicitCallStmt_InStmt()


            self.state = 2156
            self.match(vbaParser.T__3)
            self.state = 2157
            self.ambiguousIdentifier()
            self.state = 2159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 2158
                self.typeHint()


            self.state = 2163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
            if la_ == 1:
                self.state = 2161
                self.match(vbaParser.WS)
                self.state = 2162
                self.argsCall()


            self.state = 2166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.state = 2165
                self.dictionaryCallStmt()


            self.state = 2177
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,341,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2169
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2168
                        self.match(vbaParser.WS)


                    self.state = 2171
                    self.match(vbaParser.LPAREN)
                    self.state = 2172
                    self.subscripts()
                    self.state = 2173
                    self.match(vbaParser.RPAREN) 
                self.state = 2179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,341,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_B_ProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def certainIdentifier(self):
            return self.getTypedRuleContext(vbaParser.CertainIdentifierContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_B_ProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_B_ProcedureCall" ):
                listener.enterICS_B_ProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_B_ProcedureCall" ):
                listener.exitICS_B_ProcedureCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitICS_B_ProcedureCall" ):
                return visitor.visitICS_B_ProcedureCall(self)
            else:
                return visitor.visitChildren(self)




    def iCS_B_ProcedureCall(self):

        localctx = vbaParser.ICS_B_ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_iCS_B_ProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2180
            self.certainIdentifier()
            self.state = 2183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 2181
                self.match(vbaParser.WS)
                self.state = 2182
                self.argsCall()


            self.state = 2194
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,344,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2186
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2185
                        self.match(vbaParser.WS)


                    self.state = 2188
                    self.match(vbaParser.LPAREN)
                    self.state = 2189
                    self.subscripts()
                    self.state = 2190
                    self.match(vbaParser.RPAREN) 
                self.state = 2196
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,344,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitCallStmt_InStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_MembersCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_MembersCallContext,0)


        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_ProcedureOrArrayCallContext,0)


        def iCS_S_DictionaryCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_DictionaryCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implicitCallStmt_InStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitCallStmt_InStmt" ):
                listener.enterImplicitCallStmt_InStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitCallStmt_InStmt" ):
                listener.exitImplicitCallStmt_InStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplicitCallStmt_InStmt" ):
                return visitor.visitImplicitCallStmt_InStmt(self)
            else:
                return visitor.visitChildren(self)




    def implicitCallStmt_InStmt(self):

        localctx = vbaParser.ImplicitCallStmt_InStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_implicitCallStmt_InStmt)
        try:
            self.state = 2201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2197
                self.iCS_S_MembersCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2198
                self.iCS_S_VariableOrProcedureCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2199
                self.iCS_S_ProcedureOrArrayCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2200
                self.iCS_S_DictionaryCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_VariableOrProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_VariableOrProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_VariableOrProcedureCall" ):
                listener.enterICS_S_VariableOrProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_VariableOrProcedureCall" ):
                listener.exitICS_S_VariableOrProcedureCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitICS_S_VariableOrProcedureCall" ):
                return visitor.visitICS_S_VariableOrProcedureCall(self)
            else:
                return visitor.visitChildren(self)




    def iCS_S_VariableOrProcedureCall(self):

        localctx = vbaParser.ICS_S_VariableOrProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_iCS_S_VariableOrProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2203
            self.ambiguousIdentifier()
            self.state = 2205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.state = 2204
                self.typeHint()


            self.state = 2208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 2207
                self.dictionaryCallStmt()


            self.state = 2219
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,349,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2210
                        self.match(vbaParser.WS)


                    self.state = 2213
                    self.match(vbaParser.LPAREN)
                    self.state = 2214
                    self.subscripts()
                    self.state = 2215
                    self.match(vbaParser.RPAREN) 
                self.state = 2221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,349,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_ProcedureOrArrayCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def baseType(self):
            return self.getTypedRuleContext(vbaParser.BaseTypeContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_ProcedureOrArrayCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_ProcedureOrArrayCall" ):
                listener.enterICS_S_ProcedureOrArrayCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_ProcedureOrArrayCall" ):
                listener.exitICS_S_ProcedureOrArrayCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitICS_S_ProcedureOrArrayCall" ):
                return visitor.visitICS_S_ProcedureOrArrayCall(self)
            else:
                return visitor.visitChildren(self)




    def iCS_S_ProcedureOrArrayCall(self):

        localctx = vbaParser.ICS_S_ProcedureOrArrayCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_iCS_S_ProcedureOrArrayCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.state = 2222
                self.ambiguousIdentifier()
                pass

            elif la_ == 2:
                self.state = 2223
                self.baseType()
                pass


            self.state = 2227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 488) != 0) or _la==183:
                self.state = 2226
                self.typeHint()


            self.state = 2230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 2229
                self.match(vbaParser.WS)


            self.state = 2232
            self.match(vbaParser.LPAREN)
            self.state = 2234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.state = 2233
                self.match(vbaParser.WS)


            self.state = 2240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2236
                self.argsCall()
                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2237
                    self.match(vbaParser.WS)




            self.state = 2242
            self.match(vbaParser.RPAREN)
            self.state = 2244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
            if la_ == 1:
                self.state = 2243
                self.dictionaryCallStmt()


            self.state = 2255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,358,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2246
                        self.match(vbaParser.WS)


                    self.state = 2249
                    self.match(vbaParser.LPAREN)
                    self.state = 2250
                    self.subscripts()
                    self.state = 2251
                    self.match(vbaParser.RPAREN) 
                self.state = 2257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,358,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_MembersCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_ProcedureOrArrayCallContext,0)


        def iCS_S_MemberCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ICS_S_MemberCallContext)
            else:
                return self.getTypedRuleContext(vbaParser.ICS_S_MemberCallContext,i)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_MembersCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_MembersCall" ):
                listener.enterICS_S_MembersCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_MembersCall" ):
                listener.exitICS_S_MembersCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitICS_S_MembersCall" ):
                return visitor.visitICS_S_MembersCall(self)
            else:
                return visitor.visitChildren(self)




    def iCS_S_MembersCall(self):

        localctx = vbaParser.ICS_S_MembersCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_iCS_S_MembersCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.state = 2258
                self.iCS_S_VariableOrProcedureCall()

            elif la_ == 2:
                self.state = 2259
                self.iCS_S_ProcedureOrArrayCall()


            self.state = 2263 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2262
                    self.iCS_S_MemberCall()

                else:
                    raise NoViableAltException(self)
                self.state = 2265 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,360,self._ctx)

            self.state = 2268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 2267
                self.dictionaryCallStmt()


            self.state = 2279
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,363,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2271
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2270
                        self.match(vbaParser.WS)


                    self.state = 2273
                    self.match(vbaParser.LPAREN)
                    self.state = 2274
                    self.subscripts()
                    self.state = 2275
                    self.match(vbaParser.RPAREN) 
                self.state = 2281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,363,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_MemberCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_ProcedureOrArrayCallContext,0)


        def LINE_CONTINUATION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LINE_CONTINUATION)
            else:
                return self.getToken(vbaParser.LINE_CONTINUATION, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_MemberCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_MemberCall" ):
                listener.enterICS_S_MemberCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_MemberCall" ):
                listener.exitICS_S_MemberCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitICS_S_MemberCall" ):
                return visitor.visitICS_S_MemberCall(self)
            else:
                return visitor.visitChildren(self)




    def iCS_S_MemberCall(self):

        localctx = vbaParser.ICS_S_MemberCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_iCS_S_MemberCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==210:
                self.state = 2282
                self.match(vbaParser.LINE_CONTINUATION)


            self.state = 2286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 2285
                self.match(vbaParser.WS)


            self.state = 2288
            _la = self._input.LA(1)
            if not(_la==4 or _la==5):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==210:
                self.state = 2289
                self.match(vbaParser.LINE_CONTINUATION)


            self.state = 2293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 2292
                self.match(vbaParser.WS)


            self.state = 2297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 2295
                self.iCS_S_VariableOrProcedureCall()
                pass

            elif la_ == 2:
                self.state = 2296
                self.iCS_S_ProcedureOrArrayCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_DictionaryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_DictionaryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_DictionaryCall" ):
                listener.enterICS_S_DictionaryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_DictionaryCall" ):
                listener.exitICS_S_DictionaryCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitICS_S_DictionaryCall" ):
                return visitor.visitICS_S_DictionaryCall(self)
            else:
                return visitor.visitChildren(self)




    def iCS_S_DictionaryCall(self):

        localctx = vbaParser.ICS_S_DictionaryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_iCS_S_DictionaryCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2299
            self.dictionaryCallStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ArgCallContext)
            else:
                return self.getTypedRuleContext(vbaParser.ArgCallContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_argsCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgsCall" ):
                listener.enterArgsCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgsCall" ):
                listener.exitArgsCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgsCall" ):
                return visitor.visitArgsCall(self)
            else:
                return visitor.visitChildren(self)




    def argsCall(self):

        localctx = vbaParser.ArgsCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_argsCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2313
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,372,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2302
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                    if la_ == 1:
                        self.state = 2301
                        self.argCall()


                    self.state = 2305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2304
                        self.match(vbaParser.WS)


                    self.state = 2307
                    _la = self._input.LA(1)
                    if not(_la==1 or _la==2):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2309
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                    if la_ == 1:
                        self.state = 2308
                        self.match(vbaParser.WS)

             
                self.state = 2315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,372,self._ctx)

            self.state = 2316
            self.argCall()
            self.state = 2329
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,376,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2317
                        self.match(vbaParser.WS)


                    self.state = 2320
                    _la = self._input.LA(1)
                    if not(_la==1 or _la==2):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2322
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                    if la_ == 1:
                        self.state = 2321
                        self.match(vbaParser.WS)


                    self.state = 2325
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
                    if la_ == 1:
                        self.state = 2324
                        self.argCall()

             
                self.state = 2331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_argCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgCall" ):
                listener.enterArgCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgCall" ):
                listener.exitArgCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgCall" ):
                return visitor.visitArgCall(self)
            else:
                return visitor.visitChildren(self)




    def argCall(self):

        localctx = vbaParser.ArgCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_argCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.state = 2332
                self.match(vbaParser.LPAREN)


            self.state = 2337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.state = 2335
                _la = self._input.LA(1)
                if not(_la==21 or _la==22 or _la==126):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2336
                self.match(vbaParser.WS)


            self.state = 2340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==199:
                self.state = 2339
                self.match(vbaParser.RPAREN)


            self.state = 2342
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryCallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dictionaryCallStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryCallStmt" ):
                listener.enterDictionaryCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryCallStmt" ):
                listener.exitDictionaryCallStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionaryCallStmt" ):
                return visitor.visitDictionaryCallStmt(self)
            else:
                return visitor.visitChildren(self)




    def dictionaryCallStmt(self):

        localctx = vbaParser.DictionaryCallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_dictionaryCallStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2344
            self.match(vbaParser.T__4)
            self.state = 2345
            self.ambiguousIdentifier()
            self.state = 2347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                self.state = 2346
                self.typeHint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ArgContext)
            else:
                return self.getTypedRuleContext(vbaParser.ArgContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_argList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgList" ):
                listener.enterArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgList" ):
                listener.exitArgList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgList" ):
                return visitor.visitArgList(self)
            else:
                return visitor.visitChildren(self)




    def argList(self):

        localctx = vbaParser.ArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_argList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self.match(vbaParser.LPAREN)
            self.state = 2367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
            if la_ == 1:
                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2350
                    self.match(vbaParser.WS)


                self.state = 2353
                self.arg()
                self.state = 2364
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,384,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2355
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==217:
                            self.state = 2354
                            self.match(vbaParser.WS)


                        self.state = 2357
                        self.match(vbaParser.T__0)
                        self.state = 2359
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==217:
                            self.state = 2358
                            self.match(vbaParser.WS)


                        self.state = 2361
                        self.arg() 
                    self.state = 2366
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,384,self._ctx)



            self.state = 2370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 2369
                self.match(vbaParser.WS)


            self.state = 2372
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def argDefaultValue(self):
            return self.getTypedRuleContext(vbaParser.ArgDefaultValueContext,0)


        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg" ):
                listener.enterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg" ):
                listener.exitArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg" ):
                return visitor.visitArg(self)
            else:
                return visitor.visitChildren(self)




    def arg(self):

        localctx = vbaParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 2374
                self.match(vbaParser.OPTIONAL)
                self.state = 2375
                self.match(vbaParser.WS)


            self.state = 2380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
            if la_ == 1:
                self.state = 2378
                _la = self._input.LA(1)
                if not(_la==21 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2379
                self.match(vbaParser.WS)


            self.state = 2384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                self.state = 2382
                self.match(vbaParser.PARAMARRAY)
                self.state = 2383
                self.match(vbaParser.WS)


            self.state = 2386
            self.ambiguousIdentifier()
            self.state = 2388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 488) != 0) or _la==183:
                self.state = 2387
                self.typeHint()


            self.state = 2398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.state = 2391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2390
                    self.match(vbaParser.WS)


                self.state = 2393
                self.match(vbaParser.LPAREN)
                self.state = 2395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2394
                    self.match(vbaParser.WS)


                self.state = 2397
                self.match(vbaParser.RPAREN)


            self.state = 2404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 2401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2400
                    self.match(vbaParser.WS)


                self.state = 2403
                self.asTypeClause()


            self.state = 2410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
            if la_ == 1:
                self.state = 2407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2406
                    self.match(vbaParser.WS)


                self.state = 2409
                self.argDefaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgDefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_argDefaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgDefaultValue" ):
                listener.enterArgDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgDefaultValue" ):
                listener.exitArgDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgDefaultValue" ):
                return visitor.visitArgDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def argDefaultValue(self):

        localctx = vbaParser.ArgDefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_argDefaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(vbaParser.EQ)
            self.state = 2414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.state = 2413
                self.match(vbaParser.WS)


            self.state = 2416
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.Subscript_Context)
            else:
                return self.getTypedRuleContext(vbaParser.Subscript_Context,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_subscripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscripts" ):
                listener.enterSubscripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscripts" ):
                listener.exitSubscripts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscripts" ):
                return visitor.visitSubscripts(self)
            else:
                return visitor.visitChildren(self)




    def subscripts(self):

        localctx = vbaParser.SubscriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_subscripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2418
            self.subscript_()
            self.state = 2429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,401,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2419
                        self.match(vbaParser.WS)


                    self.state = 2422
                    self.match(vbaParser.T__0)
                    self.state = 2424
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
                    if la_ == 1:
                        self.state = 2423
                        self.match(vbaParser.WS)


                    self.state = 2426
                    self.subscript_() 
                self.state = 2431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,401,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.ExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def typeHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.TypeHintContext)
            else:
                return self.getTypedRuleContext(vbaParser.TypeHintContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_subscript_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_" ):
                listener.enterSubscript_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_" ):
                listener.exitSubscript_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_" ):
                return visitor.visitSubscript_(self)
            else:
                return visitor.visitChildren(self)




    def subscript_(self):

        localctx = vbaParser.Subscript_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_subscript_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.state = 2432
                self.expression(0)
                self.state = 2433
                self.match(vbaParser.WS)
                self.state = 2434
                self.match(vbaParser.TO)
                self.state = 2435
                self.match(vbaParser.WS)


            self.state = 2440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.state = 2439
                self.typeHint()


            self.state = 2442
            self.expression(0)
            self.state = 2444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 488) != 0) or _la==183:
                self.state = 2443
                self.typeHint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.IDENTIFIER)
            else:
                return self.getToken(vbaParser.IDENTIFIER, i)

        def ambiguousKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousKeywordContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousKeywordContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousIdentifier" ):
                listener.enterAmbiguousIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousIdentifier" ):
                listener.exitAmbiguousIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmbiguousIdentifier" ):
                return visitor.visitAmbiguousIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def ambiguousIdentifier(self):

        localctx = vbaParser.AmbiguousIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_ambiguousIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2448 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2448
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [218]:
                        self.state = 2446
                        self.match(vbaParser.IDENTIFIER)
                        pass
                    elif token in [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182]:
                        self.state = 2447
                        self.ambiguousKeyword()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2450 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,406,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsTypeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def type_(self):
            return self.getTypedRuleContext(vbaParser.Type_Context,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def fieldLength(self):
            return self.getTypedRuleContext(vbaParser.FieldLengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asTypeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsTypeClause" ):
                listener.enterAsTypeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsTypeClause" ):
                listener.exitAsTypeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsTypeClause" ):
                return visitor.visitAsTypeClause(self)
            else:
                return visitor.visitChildren(self)




    def asTypeClause(self):

        localctx = vbaParser.AsTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_asTypeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2452
            self.match(vbaParser.AS)
            self.state = 2454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 2453
                self.match(vbaParser.WS)


            self.state = 2458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.state = 2456
                self.match(vbaParser.NEW)
                self.state = 2457
                self.match(vbaParser.WS)


            self.state = 2460
            self.type_()
            self.state = 2465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.state = 2462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2461
                    self.match(vbaParser.WS)


                self.state = 2464
                self.fieldLength()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(vbaParser.BOOLEAN, 0)

        def BYTE(self):
            return self.getToken(vbaParser.BYTE, 0)

        def COLLECTION(self):
            return self.getToken(vbaParser.COLLECTION, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DOUBLE(self):
            return self.getToken(vbaParser.DOUBLE, 0)

        def INTEGER(self):
            return self.getToken(vbaParser.INTEGER, 0)

        def LONG(self):
            return self.getToken(vbaParser.LONG, 0)

        def SINGLE(self):
            return self.getToken(vbaParser.SINGLE, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def expression(self):
            return self.getTypedRuleContext(vbaParser.ExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_baseType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseType" ):
                listener.enterBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseType" ):
                listener.exitBaseType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseType" ):
                return visitor.visitBaseType(self)
            else:
                return visitor.visitChildren(self)




    def baseType(self):

        localctx = vbaParser.BaseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_baseType)
        self._la = 0 # Token type
        try:
            self.state = 2487
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2467
                self.match(vbaParser.BOOLEAN)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2468
                self.match(vbaParser.BYTE)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2469
                self.match(vbaParser.COLLECTION)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2470
                self.match(vbaParser.DATE)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2471
                self.match(vbaParser.DOUBLE)
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2472
                self.match(vbaParser.INTEGER)
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2473
                self.match(vbaParser.LONG)
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2474
                self.match(vbaParser.SINGLE)
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2475
                self.match(vbaParser.STRING)
                self.state = 2484
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
                if la_ == 1:
                    self.state = 2477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==217:
                        self.state = 2476
                        self.match(vbaParser.WS)


                    self.state = 2479
                    self.match(vbaParser.MULT)
                    self.state = 2481
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
                    if la_ == 1:
                        self.state = 2480
                        self.match(vbaParser.WS)


                    self.state = 2483
                    self.expression(0)


                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2486
                self.match(vbaParser.VARIANT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CertainIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.IDENTIFIER)
            else:
                return self.getToken(vbaParser.IDENTIFIER, i)

        def ambiguousKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousKeywordContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousKeywordContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_certainIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCertainIdentifier" ):
                listener.enterCertainIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCertainIdentifier" ):
                listener.exitCertainIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCertainIdentifier" ):
                return visitor.visitCertainIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def certainIdentifier(self):

        localctx = vbaParser.CertainIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_certainIdentifier)
        try:
            self.state = 2504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [218]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2489
                self.match(vbaParser.IDENTIFIER)
                self.state = 2494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,416,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2492
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182]:
                            self.state = 2490
                            self.ambiguousKeyword()
                            pass
                        elif token in [218]:
                            self.state = 2491
                            self.match(vbaParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 2496
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,416,self._ctx)

                pass
            elif token in [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2497
                self.ambiguousKeyword()
                self.state = 2500 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2500
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182]:
                            self.state = 2498
                            self.ambiguousKeyword()
                            pass
                        elif token in [218]:
                            self.state = 2499
                            self.match(vbaParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 2502 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,418,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(vbaParser.LT, 0)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def NEQ(self):
            return self.getToken(vbaParser.NEQ, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = vbaParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2506
            _la = self._input.LA(1)
            if not(_la==84 or _la==94 or ((((_la - 186)) & ~0x3f) == 0 and ((1 << (_la - 186)) & 559) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_complexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexType" ):
                listener.enterComplexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexType" ):
                listener.exitComplexType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexType" ):
                return visitor.visitComplexType(self)
            else:
                return visitor.visitChildren(self)




    def complexType(self):

        localctx = vbaParser.ComplexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_complexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2508
            self.ambiguousIdentifier()
            self.state = 2513
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,420,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2509
                    _la = self._input.LA(1)
                    if not(_la==4 or _la==5):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2510
                    self.ambiguousIdentifier() 
                self.state = 2515
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,420,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_fieldLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldLength" ):
                listener.enterFieldLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldLength" ):
                listener.exitFieldLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldLength" ):
                return visitor.visitFieldLength(self)
            else:
                return visitor.visitChildren(self)




    def fieldLength(self):

        localctx = vbaParser.FieldLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_fieldLength)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2516
            self.match(vbaParser.MULT)
            self.state = 2518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 2517
                self.match(vbaParser.WS)


            self.state = 2522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [207]:
                self.state = 2520
                self.match(vbaParser.INTEGERLITERAL)
                pass
            elif token in [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 218]:
                self.state = 2521
                self.ambiguousIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetterrangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def certainIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.CertainIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.CertainIdentifierContext,i)


        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_letterrange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetterrange" ):
                listener.enterLetterrange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetterrange" ):
                listener.exitLetterrange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetterrange" ):
                return visitor.visitLetterrange(self)
            else:
                return visitor.visitChildren(self)




    def letterrange(self):

        localctx = vbaParser.LetterrangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_letterrange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2524
            self.certainIdentifier()
            self.state = 2533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                self.state = 2526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2525
                    self.match(vbaParser.WS)


                self.state = 2528
                self.match(vbaParser.MINUS)
                self.state = 2530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2529
                    self.match(vbaParser.WS)


                self.state = 2532
                self.certainIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lineLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineLabel" ):
                listener.enterLineLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineLabel" ):
                listener.exitLineLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineLabel" ):
                return visitor.visitLineLabel(self)
            else:
                return visitor.visitChildren(self)




    def lineLabel(self):

        localctx = vbaParser.LineLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_lineLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2535
            self.ambiguousIdentifier()
            self.state = 2536
            self.match(vbaParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEXLITERAL(self):
            return self.getToken(vbaParser.HEXLITERAL, 0)

        def OCTLITERAL(self):
            return self.getToken(vbaParser.OCTLITERAL, 0)

        def DATELITERAL(self):
            return self.getToken(vbaParser.DATELITERAL, 0)

        def DOUBLELITERAL(self):
            return self.getToken(vbaParser.DOUBLELITERAL, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def SHORTLITERAL(self):
            return self.getToken(vbaParser.SHORTLITERAL, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def TRUE(self):
            return self.getToken(vbaParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(vbaParser.FALSE, 0)

        def NOTHING(self):
            return self.getToken(vbaParser.NOTHING, 0)

        def NULL_(self):
            return self.getToken(vbaParser.NULL_, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = vbaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2538
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 26388279066625) != 0) or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & 4363686772737) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseType(self):
            return self.getTypedRuleContext(vbaParser.BaseTypeContext,0)


        def complexType(self):
            return self.getTypedRuleContext(vbaParser.ComplexTypeContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_" ):
                return visitor.visitType_(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = vbaParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_type_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                self.state = 2540
                self.baseType()
                pass

            elif la_ == 2:
                self.state = 2541
                self.complexType()
                pass


            self.state = 2552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
            if la_ == 1:
                self.state = 2545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2544
                    self.match(vbaParser.WS)


                self.state = 2547
                self.match(vbaParser.LPAREN)
                self.state = 2549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2548
                    self.match(vbaParser.WS)


                self.state = 2551
                self.match(vbaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeHintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(vbaParser.AMPERSAND, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_typeHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeHint" ):
                listener.enterTypeHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeHint" ):
                listener.exitTypeHint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeHint" ):
                return visitor.visitTypeHint(self)
            else:
                return visitor.visitChildren(self)




    def typeHint(self):

        localctx = vbaParser.TypeHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_typeHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2554
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 488) != 0) or _la==183):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = vbaParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2556
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 4755801206503243793) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)

        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def APPACTIVATE(self):
            return self.getToken(vbaParser.APPACTIVATE, 0)

        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def BEEP(self):
            return self.getToken(vbaParser.BEEP, 0)

        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def BOOLEAN(self):
            return self.getToken(vbaParser.BOOLEAN, 0)

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def BYTE(self):
            return self.getToken(vbaParser.BYTE, 0)

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def CHDIR(self):
            return self.getToken(vbaParser.CHDIR, 0)

        def CHDRIVE(self):
            return self.getToken(vbaParser.CHDRIVE, 0)

        def COLLECTION(self):
            return self.getToken(vbaParser.COLLECTION, 0)

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def DATABASE(self):
            return self.getToken(vbaParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFDEC(self):
            return self.getToken(vbaParser.DEFDEC, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def DELETESETTING(self):
            return self.getToken(vbaParser.DELETESETTING, 0)

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(vbaParser.DOUBLE, 0)

        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def ENUM(self):
            return self.getToken(vbaParser.ENUM, 0)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def FALSE(self):
            return self.getToken(vbaParser.FALSE, 0)

        def FILECOPY(self):
            return self.getToken(vbaParser.FILECOPY, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def INTEGER(self):
            return self.getToken(vbaParser.INTEGER, 0)

        def KILL(self):
            return self.getToken(vbaParser.KILL, 0)

        def LOAD(self):
            return self.getToken(vbaParser.LOAD, 0)

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def LONG(self):
            return self.getToken(vbaParser.LONG, 0)

        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def ME(self):
            return self.getToken(vbaParser.ME, 0)

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def MKDIR(self):
            return self.getToken(vbaParser.MKDIR, 0)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)

        def NAME(self):
            return self.getToken(vbaParser.NAME, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)

        def NOTHING(self):
            return self.getToken(vbaParser.NOTHING, 0)

        def NULL_(self):
            return self.getToken(vbaParser.NULL_, 0)

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def RANDOMIZE(self):
            return self.getToken(vbaParser.RANDOMIZE, 0)

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def REM(self):
            return self.getToken(vbaParser.REM, 0)

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def RMDIR(self):
            return self.getToken(vbaParser.RMDIR, 0)

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def SAVEPICTURE(self):
            return self.getToken(vbaParser.SAVEPICTURE, 0)

        def SAVESETTING(self):
            return self.getToken(vbaParser.SAVESETTING, 0)

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def SELECT(self):
            return self.getToken(vbaParser.SELECT, 0)

        def SENDKEYS(self):
            return self.getToken(vbaParser.SENDKEYS, 0)

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def SETATTR(self):
            return self.getToken(vbaParser.SETATTR, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def SINGLE(self):
            return self.getToken(vbaParser.SINGLE, 0)

        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def TIME(self):
            return self.getToken(vbaParser.TIME, 0)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def TRUE(self):
            return self.getToken(vbaParser.TRUE, 0)

        def TYPE(self):
            return self.getToken(vbaParser.TYPE, 0)

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def UNLOAD(self):
            return self.getToken(vbaParser.UNLOAD, 0)

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def WITH(self):
            return self.getToken(vbaParser.WITH, 0)

        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousKeyword" ):
                listener.enterAmbiguousKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousKeyword" ):
                listener.exitAmbiguousKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmbiguousKeyword" ):
                return visitor.visitAmbiguousKeyword(self)
            else:
                return visitor.visitChildren(self)




    def ambiguousKeyword(self):

        localctx = vbaParser.AmbiguousKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_ambiguousKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2558
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -558446353793942016) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1094376871967064127) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 36028797018959811) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMCOMMENT(self):
            return self.getToken(vbaParser.REMCOMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_remComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemComment" ):
                listener.enterRemComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemComment" ):
                listener.exitRemComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemComment" ):
                return visitor.visitRemComment(self)
            else:
                return visitor.visitChildren(self)




    def remComment(self):

        localctx = vbaParser.RemCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_remComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2560
            self.match(vbaParser.REMCOMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(vbaParser.COMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComment" ):
                return visitor.visitComment(self)
            else:
                return visitor.visitChildren(self)




    def comment(self):

        localctx = vbaParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2562
            self.match(vbaParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def comment(self):
            return self.getTypedRuleContext(vbaParser.CommentContext,0)


        def remComment(self):
            return self.getTypedRuleContext(vbaParser.RemCommentContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfLine" ):
                listener.enterEndOfLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfLine" ):
                listener.exitEndOfLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfLine" ):
                return visitor.visitEndOfLine(self)
            else:
                return visitor.visitChildren(self)




    def endOfLine(self):

        localctx = vbaParser.EndOfLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_endOfLine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 2564
                self.match(vbaParser.WS)


            self.state = 2570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211]:
                self.state = 2567
                self.match(vbaParser.NEWLINE)
                pass
            elif token in [213]:
                self.state = 2568
                self.comment()
                pass
            elif token in [212]:
                self.state = 2569
                self.remComment()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.state = 2572
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfStatement" ):
                listener.enterEndOfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfStatement" ):
                listener.exitEndOfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndOfStatement" ):
                return visitor.visitEndOfStatement(self)
            else:
                return visitor.visitChildren(self)




    def endOfStatement(self):

        localctx = vbaParser.EndOfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_endOfStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,436,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2583
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
                    if la_ == 1:
                        self.state = 2575
                        self.endOfLine()
                        pass

                    elif la_ == 2:
                        self.state = 2577
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==217:
                            self.state = 2576
                            self.match(vbaParser.WS)


                        self.state = 2579
                        self.match(vbaParser.COLON)
                        self.state = 2581
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
                        if la_ == 1:
                            self.state = 2580
                            self.match(vbaParser.WS)


                        pass

             
                self.state = 2587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,436,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def LINE_CONTINUATION(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LINE_CONTINUATION)
            else:
                return self.getToken(vbaParser.LINE_CONTINUATION, i)

        def getRuleIndex(self):
            return vbaParser.RULE_wsc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsc" ):
                listener.enterWsc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsc" ):
                listener.exitWsc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWsc" ):
                return visitor.visitWsc(self)
            else:
                return visitor.visitChildren(self)




    def wsc(self):

        localctx = vbaParser.WscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_wsc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2589 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2588
                    _la = self._input.LA(1)
                    if not(_la==210 or _la==217):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 2591 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,437,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[101] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         




