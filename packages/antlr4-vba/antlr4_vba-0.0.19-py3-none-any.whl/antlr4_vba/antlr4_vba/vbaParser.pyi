from antlr4 import *
from _typeshed import Incomplete
from io import StringIO as StringIO
from typing import TextIO

def serializedATN(): ...

class vbaParser(Parser):
    grammarFileName: str
    atn: Incomplete
    decisionsToDFA: Incomplete
    sharedContextCache: Incomplete
    literalNames: Incomplete
    symbolicNames: Incomplete
    RULE_startRule: int
    RULE_module: int
    RULE_moduleHeader: int
    RULE_moduleConfig: int
    RULE_moduleConfigElement: int
    RULE_moduleAttributes: int
    RULE_moduleDeclarations: int
    RULE_moduleOption: int
    RULE_moduleDeclarationsElement: int
    RULE_macroStmt: int
    RULE_moduleBody: int
    RULE_moduleBodyElement: int
    RULE_attributeStmt: int
    RULE_block: int
    RULE_blockStmt: int
    RULE_appactivateStmt: int
    RULE_beepStmt: int
    RULE_chdirStmt: int
    RULE_chdriveStmt: int
    RULE_closeStmt: int
    RULE_constStmt: int
    RULE_constSubStmt: int
    RULE_dateStmt: int
    RULE_declareStmt: int
    RULE_deftypeStmt: int
    RULE_deleteSettingStmt: int
    RULE_doLoopStmt: int
    RULE_endStmt: int
    RULE_enumerationStmt: int
    RULE_enumerationStmt_Constant: int
    RULE_eraseStmt: int
    RULE_errorStmt: int
    RULE_eventStmt: int
    RULE_exitStmt: int
    RULE_filecopyStmt: int
    RULE_forEachStmt: int
    RULE_forNextStmt: int
    RULE_functionStmt: int
    RULE_getStmt: int
    RULE_goSubStmt: int
    RULE_goToStmt: int
    RULE_ifThenElseStmt: int
    RULE_ifBlockStmt: int
    RULE_ifConditionStmt: int
    RULE_ifElseIfBlockStmt: int
    RULE_ifElseBlockStmt: int
    RULE_implementsStmt: int
    RULE_inputStmt: int
    RULE_killStmt: int
    RULE_letStmt: int
    RULE_lineInputStmt: int
    RULE_lineNumber: int
    RULE_loadStmt: int
    RULE_lockStmt: int
    RULE_lsetStmt: int
    RULE_macroConstStmt: int
    RULE_macroIfThenElseStmt: int
    RULE_macroIfBlockStmt: int
    RULE_macroElseIfBlockStmt: int
    RULE_macroElseBlockStmt: int
    RULE_midStmt: int
    RULE_mkdirStmt: int
    RULE_nameStmt: int
    RULE_onErrorStmt: int
    RULE_onGoToStmt: int
    RULE_onGoSubStmt: int
    RULE_openStmt: int
    RULE_outputList: int
    RULE_outputList_Expression: int
    RULE_printStmt: int
    RULE_propertyGetStmt: int
    RULE_propertySetStmt: int
    RULE_propertyLetStmt: int
    RULE_putStmt: int
    RULE_raiseEventStmt: int
    RULE_randomizeStmt: int
    RULE_redimStmt: int
    RULE_redimSubStmt: int
    RULE_resetStmt: int
    RULE_resumeStmt: int
    RULE_returnStmt: int
    RULE_rmdirStmt: int
    RULE_rsetStmt: int
    RULE_savepictureStmt: int
    RULE_saveSettingStmt: int
    RULE_seekStmt: int
    RULE_selectCaseStmt: int
    RULE_sC_Selection: int
    RULE_sC_Case: int
    RULE_sC_Cond: int
    RULE_sendkeysStmt: int
    RULE_setattrStmt: int
    RULE_setStmt: int
    RULE_stopStmt: int
    RULE_subStmt: int
    RULE_timeStmt: int
    RULE_typeStmt: int
    RULE_typeStmt_Element: int
    RULE_typeOfStmt: int
    RULE_unloadStmt: int
    RULE_unlockStmt: int
    RULE_expression: int
    RULE_newExpress: int
    RULE_notOperatorExpression: int
    RULE_parenthesizedExpression: int
    RULE_unaryMinusExpression: int
    RULE_variableStmt: int
    RULE_variableListStmt: int
    RULE_variableSubStmt: int
    RULE_whileWendStmt: int
    RULE_widthStmt: int
    RULE_withStmt: int
    RULE_writeStmt: int
    RULE_fileNumber: int
    RULE_explicitCallStmt: int
    RULE_eCS_ProcedureCall: int
    RULE_eCS_MemberProcedureCall: int
    RULE_implicitCallStmt_InBlock: int
    RULE_iCS_B_MemberProcedureCall: int
    RULE_iCS_B_ProcedureCall: int
    RULE_implicitCallStmt_InStmt: int
    RULE_iCS_S_VariableOrProcedureCall: int
    RULE_iCS_S_ProcedureOrArrayCall: int
    RULE_iCS_S_MembersCall: int
    RULE_iCS_S_MemberCall: int
    RULE_iCS_S_DictionaryCall: int
    RULE_argsCall: int
    RULE_argCall: int
    RULE_dictionaryCallStmt: int
    RULE_argList: int
    RULE_arg: int
    RULE_argDefaultValue: int
    RULE_subscripts: int
    RULE_subscript_: int
    RULE_ambiguousIdentifier: int
    RULE_asTypeClause: int
    RULE_baseType: int
    RULE_certainIdentifier: int
    RULE_comparisonOperator: int
    RULE_complexType: int
    RULE_fieldLength: int
    RULE_letterrange: int
    RULE_lineLabel: int
    RULE_literal: int
    RULE_type_: int
    RULE_typeHint: int
    RULE_visibility: int
    RULE_ambiguousKeyword: int
    RULE_remComment: int
    RULE_comment: int
    RULE_endOfLine: int
    RULE_endOfStatement: int
    RULE_wsc: int
    ruleNames: Incomplete
    EOF: Incomplete
    T__0: int
    T__1: int
    T__2: int
    T__3: int
    T__4: int
    T__5: int
    T__6: int
    T__7: int
    ACCESS: int
    ADDRESSOF: int
    ALIAS: int
    AND: int
    ATTRIBUTE: int
    APPACTIVATE: int
    APPEND: int
    AS: int
    BEGIN: int
    BEEP: int
    BINARY: int
    BOOLEAN: int
    BYVAL: int
    BYREF: int
    BYTE: int
    CALL: int
    CASE: int
    CHDIR: int
    CHDRIVE: int
    CLASS: int
    CLOSE: int
    COLLECTION: int
    CONST: int
    DATABASE: int
    DATE: int
    DECLARE: int
    DEFBOOL: int
    DEFBYTE: int
    DEFDATE: int
    DEFDBL: int
    DEFDEC: int
    DEFCUR: int
    DEFINT: int
    DEFLNG: int
    DEFOBJ: int
    DEFSNG: int
    DEFSTR: int
    DEFVAR: int
    DELETESETTING: int
    DIM: int
    DO: int
    DOUBLE: int
    EACH: int
    ELSE: int
    ELSEIF: int
    END_ENUM: int
    END_PROPERTY: int
    END_SELECT: int
    END_TYPE: int
    END_WITH: int
    END: int
    ENUM: int
    EQV: int
    ERASE: int
    ERROR: int
    EVENT: int
    EXIT_DO: int
    EXIT_FOR: int
    EXIT_FUNCTION: int
    EXIT_PROPERTY: int
    EXIT_SUB: int
    FALSE: int
    FILECOPY: int
    FRIEND: int
    FOR: int
    FUNCTION: int
    GET: int
    GLOBAL: int
    GOSUB: int
    GOTO: int
    IF: int
    IMP: int
    IMPLEMENTS: int
    IN: int
    INPUT: int
    IS: int
    INTEGER: int
    KILL: int
    LOAD: int
    LOCK: int
    LONG: int
    LOOP: int
    LEN: int
    LET: int
    LIB: int
    LIKE: int
    LINE_INPUT: int
    LOCK_READ: int
    LOCK_WRITE: int
    LOCK_READ_WRITE: int
    LSET: int
    MACRO_CONST: int
    MACRO_IF: int
    MACRO_ELSEIF: int
    MACRO_ELSE: int
    MACRO_END_IF: int
    ME: int
    MID: int
    MKDIR: int
    MOD: int
    NAME: int
    NEXT: int
    NEW: int
    NOT: int
    NOTHING: int
    NULL_: int
    ON: int
    ON_ERROR: int
    ON_LOCAL_ERROR: int
    OPEN: int
    OPTIONAL: int
    OPTION_BASE: int
    OPTION_EXPLICIT: int
    OPTION_COMPARE: int
    OPTION_PRIVATE_MODULE: int
    OR: int
    OUTPUT: int
    PARAMARRAY: int
    PRESERVE: int
    PRINT: int
    PRIVATE: int
    PROPERTY_GET: int
    PROPERTY_LET: int
    PROPERTY_SET: int
    PTRSAFE: int
    PUBLIC: int
    PUT: int
    RANDOM: int
    RANDOMIZE: int
    RAISEEVENT: int
    READ: int
    READ_WRITE: int
    REDIM: int
    REM: int
    RESET: int
    RESUME: int
    RETURN: int
    RMDIR: int
    RSET: int
    SAVEPICTURE: int
    SAVESETTING: int
    SEEK: int
    SELECT: int
    SENDKEYS: int
    SET: int
    SETATTR: int
    SHARED: int
    SINGLE: int
    SPC: int
    STATIC: int
    STEP: int
    STOP: int
    STRING: int
    SUB: int
    TAB: int
    TEXT: int
    THEN: int
    TIME: int
    TO: int
    TRUE: int
    TYPE: int
    TYPEOF: int
    UNLOAD: int
    UNLOCK: int
    UNTIL: int
    VARIANT: int
    VERSION: int
    WEND: int
    WHILE: int
    WIDTH: int
    WITH: int
    WITHEVENTS: int
    WRITE: int
    XOR: int
    AMPERSAND: int
    ASSIGN: int
    DIV: int
    EQ: int
    GEQ: int
    GT: int
    LEQ: int
    LPAREN: int
    LT: int
    MINUS: int
    MINUS_EQ: int
    MULT: int
    NEQ: int
    PLUS: int
    PLUS_EQ: int
    POW: int
    RPAREN: int
    L_SQUARE_BRACKET: int
    R_SQUARE_BRACKET: int
    GUID: int
    STRINGLITERAL: int
    OCTLITERAL: int
    HEXLITERAL: int
    SHORTLITERAL: int
    INTEGERLITERAL: int
    DOUBLELITERAL: int
    DATELITERAL: int
    LINE_CONTINUATION: int
    NEWLINE: int
    REMCOMMENT: int
    COMMENT: int
    SINGLEQUOTE: int
    COLON: int
    UNDERSCORE: int
    WS: int
    IDENTIFIER: int
    def __init__(self, input: TokenStream, output: TextIO = ...) -> None: ...
    class StartRuleContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def module(self): ...
        def EOF(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    state: int
    def startRule(self): ...
    class ModuleContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def WS(self, i: int = None): ...
        def endOfLine(self, i: int = None): ...
        def moduleHeader(self): ...
        def moduleConfig(self): ...
        def moduleAttributes(self): ...
        def moduleDeclarations(self): ...
        def moduleBody(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def module(self): ...
    class ModuleHeaderContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def VERSION(self): ...
        def WS(self, i: int = None): ...
        def DOUBLELITERAL(self): ...
        def CLASS(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def moduleHeader(self): ...
    class ModuleConfigContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def BEGIN(self): ...
        def END(self): ...
        def WS(self, i: int = None): ...
        def GUID(self): ...
        def ambiguousIdentifier(self): ...
        def endOfLine(self, i: int = None): ...
        def moduleConfigElement(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def moduleConfig(self): ...
    class ModuleConfigElementContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ambiguousIdentifier(self): ...
        def EQ(self): ...
        def literal(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def COLON(self): ...
        def endOfLine(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def moduleConfigElement(self): ...
    class ModuleAttributesContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def attributeStmt(self, i: int = None): ...
        def endOfLine(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def moduleAttributes(self): ...
    class ModuleDeclarationsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def moduleDeclarationsElement(self, i: int = None): ...
        def endOfLine(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def moduleDeclarations(self): ...
    class ModuleOptionContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class OptionExplicitStmtContext(ModuleOptionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def OPTION_EXPLICIT(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class OptionBaseStmtContext(ModuleOptionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def OPTION_BASE(self): ...
        def WS(self): ...
        def SHORTLITERAL(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class OptionPrivateModuleStmtContext(ModuleOptionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def OPTION_PRIVATE_MODULE(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class OptionCompareStmtContext(ModuleOptionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def OPTION_COMPARE(self): ...
        def WS(self): ...
        def BINARY(self): ...
        def TEXT(self): ...
        def DATABASE(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def moduleOption(self): ...
    class ModuleDeclarationsElementContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def comment(self): ...
        def declareStmt(self): ...
        def enumerationStmt(self): ...
        def eventStmt(self): ...
        def constStmt(self): ...
        def implementsStmt(self): ...
        def variableStmt(self): ...
        def moduleOption(self): ...
        def typeStmt(self): ...
        def deftypeStmt(self): ...
        def macroStmt(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def moduleDeclarationsElement(self): ...
    class MacroStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def macroConstStmt(self): ...
        def macroIfThenElseStmt(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def macroStmt(self): ...
    class ModuleBodyContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def moduleBodyElement(self, i: int = None): ...
        def endOfLine(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def moduleBody(self): ...
    class ModuleBodyElementContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def functionStmt(self): ...
        def propertyGetStmt(self): ...
        def propertySetStmt(self): ...
        def propertyLetStmt(self): ...
        def subStmt(self): ...
        def macroStmt(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def moduleBodyElement(self): ...
    class AttributeStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ATTRIBUTE(self): ...
        def WS(self, i: int = None): ...
        def implicitCallStmt_InStmt(self): ...
        def EQ(self): ...
        def literal(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def attributeStmt(self): ...
    class BlockContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def blockStmt(self, i: int = None): ...
        def endOfStatement(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def block(self): ...
    class BlockStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def lineLabel(self): ...
        def appactivateStmt(self): ...
        def attributeStmt(self): ...
        def beepStmt(self): ...
        def chdirStmt(self): ...
        def chdriveStmt(self): ...
        def closeStmt(self): ...
        def constStmt(self): ...
        def dateStmt(self): ...
        def deleteSettingStmt(self): ...
        def doLoopStmt(self): ...
        def endStmt(self): ...
        def eraseStmt(self): ...
        def errorStmt(self): ...
        def exitStmt(self): ...
        def explicitCallStmt(self): ...
        def filecopyStmt(self): ...
        def forEachStmt(self): ...
        def forNextStmt(self): ...
        def getStmt(self): ...
        def goSubStmt(self): ...
        def goToStmt(self): ...
        def ifThenElseStmt(self): ...
        def implementsStmt(self): ...
        def inputStmt(self): ...
        def killStmt(self): ...
        def letStmt(self): ...
        def lineInputStmt(self): ...
        def lineNumber(self): ...
        def loadStmt(self): ...
        def lockStmt(self): ...
        def lsetStmt(self): ...
        def macroStmt(self): ...
        def midStmt(self): ...
        def mkdirStmt(self): ...
        def nameStmt(self): ...
        def onErrorStmt(self): ...
        def onGoToStmt(self): ...
        def onGoSubStmt(self): ...
        def openStmt(self): ...
        def printStmt(self): ...
        def putStmt(self): ...
        def raiseEventStmt(self): ...
        def randomizeStmt(self): ...
        def redimStmt(self): ...
        def resetStmt(self): ...
        def resumeStmt(self): ...
        def returnStmt(self): ...
        def rmdirStmt(self): ...
        def rsetStmt(self): ...
        def savepictureStmt(self): ...
        def saveSettingStmt(self): ...
        def seekStmt(self): ...
        def selectCaseStmt(self): ...
        def sendkeysStmt(self): ...
        def setattrStmt(self): ...
        def setStmt(self): ...
        def stopStmt(self): ...
        def timeStmt(self): ...
        def unloadStmt(self): ...
        def unlockStmt(self): ...
        def variableStmt(self): ...
        def whileWendStmt(self): ...
        def widthStmt(self): ...
        def withStmt(self): ...
        def writeStmt(self): ...
        def implicitCallStmt_InBlock(self): ...
        def implicitCallStmt_InStmt(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def blockStmt(self): ...
    class AppactivateStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def APPACTIVATE(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def appactivateStmt(self): ...
    class BeepStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def BEEP(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def beepStmt(self): ...
    class ChdirStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CHDIR(self): ...
        def WS(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def chdirStmt(self): ...
    class ChdriveStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CHDRIVE(self): ...
        def WS(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def chdriveStmt(self): ...
    class CloseStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CLOSE(self): ...
        def WS(self, i: int = None): ...
        def fileNumber(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def closeStmt(self): ...
    class ConstStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CONST(self): ...
        def WS(self, i: int = None): ...
        def constSubStmt(self, i: int = None): ...
        def visibility(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constStmt(self): ...
    class ConstSubStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ambiguousIdentifier(self): ...
        def EQ(self): ...
        def expression(self): ...
        def typeHint(self): ...
        def WS(self, i: int = None): ...
        def asTypeClause(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constSubStmt(self): ...
    class DateStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def DATE(self): ...
        def EQ(self): ...
        def expression(self): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def dateStmt(self): ...
    class DeclareStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def DECLARE(self): ...
        def WS(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def LIB(self): ...
        def STRINGLITERAL(self, i: int = None): ...
        def SUB(self): ...
        def visibility(self): ...
        def PTRSAFE(self): ...
        def typeHint(self, i: int = None): ...
        def ALIAS(self): ...
        def argList(self): ...
        def asTypeClause(self): ...
        def FUNCTION(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def declareStmt(self): ...
    class DeftypeStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def WS(self, i: int = None): ...
        def letterrange(self, i: int = None): ...
        def DEFBOOL(self): ...
        def DEFBYTE(self): ...
        def DEFINT(self): ...
        def DEFLNG(self): ...
        def DEFCUR(self): ...
        def DEFSNG(self): ...
        def DEFDBL(self): ...
        def DEFDEC(self): ...
        def DEFDATE(self): ...
        def DEFSTR(self): ...
        def DEFOBJ(self): ...
        def DEFVAR(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def deftypeStmt(self): ...
    class DeleteSettingStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def DELETESETTING(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def deleteSettingStmt(self): ...
    class DoLoopStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def DO(self): ...
        def endOfStatement(self): ...
        def LOOP(self): ...
        def block(self): ...
        def WS(self, i: int = None): ...
        def expression(self): ...
        def WHILE(self): ...
        def UNTIL(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def doLoopStmt(self): ...
    class EndStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def END(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def endStmt(self): ...
    class EnumerationStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ENUM(self): ...
        def WS(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def endOfStatement(self): ...
        def END_ENUM(self): ...
        def visibility(self): ...
        def enumerationStmt_Constant(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def enumerationStmt(self): ...
    class EnumerationStmt_ConstantContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ambiguousIdentifier(self): ...
        def endOfStatement(self): ...
        def EQ(self): ...
        def expression(self): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def enumerationStmt_Constant(self): ...
    class EraseStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ERASE(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def eraseStmt(self): ...
    class ErrorStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ERROR(self): ...
        def WS(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def errorStmt(self): ...
    class EventStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def EVENT(self): ...
        def WS(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def argList(self): ...
        def visibility(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def eventStmt(self): ...
    class ExitStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def EXIT_DO(self): ...
        def EXIT_FOR(self): ...
        def EXIT_FUNCTION(self): ...
        def EXIT_PROPERTY(self): ...
        def EXIT_SUB(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def exitStmt(self): ...
    class FilecopyStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def FILECOPY(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def filecopyStmt(self): ...
    class ForEachStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def FOR(self): ...
        def WS(self, i: int = None): ...
        def EACH(self): ...
        def ambiguousIdentifier(self, i: int = None): ...
        def IN(self): ...
        def expression(self): ...
        def endOfStatement(self): ...
        def NEXT(self): ...
        def typeHint(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def forEachStmt(self): ...
    class ForNextStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def FOR(self): ...
        def WS(self, i: int = None): ...
        def ambiguousIdentifier(self, i: int = None): ...
        def EQ(self): ...
        def expression(self, i: int = None): ...
        def TO(self): ...
        def endOfStatement(self): ...
        def NEXT(self): ...
        def typeHint(self): ...
        def asTypeClause(self): ...
        def STEP(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def forNextStmt(self): ...
    class FunctionStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def FUNCTION(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def endOfStatement(self): ...
        def END(self): ...
        def wsc(self): ...
        def visibility(self): ...
        def WS(self, i: int = None): ...
        def STATIC(self): ...
        def typeHint(self): ...
        def argList(self): ...
        def asTypeClause(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def functionStmt(self): ...
    class GetStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def GET(self): ...
        def WS(self, i: int = None): ...
        def fileNumber(self): ...
        def expression(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def getStmt(self): ...
    class GoSubStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def GOSUB(self): ...
        def WS(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def goSubStmt(self): ...
    class GoToStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def GOTO(self): ...
        def WS(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def goToStmt(self): ...
    class IfThenElseStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class BlockIfThenElseContext(IfThenElseStmtContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ifBlockStmt(self): ...
        def END(self): ...
        def wsc(self): ...
        def IF(self): ...
        def ifElseIfBlockStmt(self, i: int = None): ...
        def ifElseBlockStmt(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class InlineIfThenElseContext(IfThenElseStmtContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def IF(self): ...
        def WS(self, i: int = None): ...
        def ifConditionStmt(self): ...
        def THEN(self): ...
        def blockStmt(self, i: int = None): ...
        def ELSE(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ifThenElseStmt(self): ...
    class IfBlockStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def IF(self): ...
        def WS(self, i: int = None): ...
        def ifConditionStmt(self): ...
        def THEN(self): ...
        def endOfStatement(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ifBlockStmt(self): ...
    class IfConditionStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ifConditionStmt(self): ...
    class IfElseIfBlockStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ELSEIF(self): ...
        def WS(self, i: int = None): ...
        def ifConditionStmt(self): ...
        def THEN(self): ...
        def endOfStatement(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ifElseIfBlockStmt(self): ...
    class IfElseBlockStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ELSE(self): ...
        def endOfStatement(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ifElseBlockStmt(self): ...
    class ImplementsStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def IMPLEMENTS(self): ...
        def WS(self): ...
        def ambiguousIdentifier(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def implementsStmt(self): ...
    class InputStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def INPUT(self): ...
        def WS(self, i: int = None): ...
        def fileNumber(self): ...
        def expression(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def inputStmt(self): ...
    class KillStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def KILL(self): ...
        def WS(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def killStmt(self): ...
    class LetStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def implicitCallStmt_InStmt(self): ...
        def expression(self): ...
        def EQ(self): ...
        def PLUS_EQ(self): ...
        def MINUS_EQ(self): ...
        def LET(self): ...
        def WS(self, i: int = None): ...
        def typeHint(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def letStmt(self): ...
    class LineInputStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def LINE_INPUT(self): ...
        def WS(self, i: int = None): ...
        def fileNumber(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def lineInputStmt(self): ...
    class LineNumberContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def INTEGERLITERAL(self): ...
        def SHORTLITERAL(self): ...
        def NEWLINE(self, i: int = None): ...
        def COLON(self): ...
        def WS(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def lineNumber(self): ...
    class LoadStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def LOAD(self): ...
        def WS(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def loadStmt(self): ...
    class LockStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def LOCK(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def TO(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def lockStmt(self): ...
    class LsetStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def LSET(self): ...
        def WS(self, i: int = None): ...
        def implicitCallStmt_InStmt(self): ...
        def EQ(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def lsetStmt(self): ...
    class MacroConstStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def MACRO_CONST(self): ...
        def ambiguousIdentifier(self): ...
        def EQ(self): ...
        def expression(self): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def macroConstStmt(self): ...
    class MacroIfThenElseStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def macroIfBlockStmt(self): ...
        def MACRO_END_IF(self): ...
        def macroElseIfBlockStmt(self, i: int = None): ...
        def macroElseBlockStmt(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def macroIfThenElseStmt(self): ...
    class MacroIfBlockStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def MACRO_IF(self): ...
        def ifConditionStmt(self): ...
        def WS(self, i: int = None): ...
        def THEN(self): ...
        def endOfStatement(self): ...
        def moduleDeclarations(self, i: int = None): ...
        def moduleBody(self, i: int = None): ...
        def block(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def macroIfBlockStmt(self): ...
    class MacroElseIfBlockStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def MACRO_ELSEIF(self): ...
        def ifConditionStmt(self): ...
        def WS(self, i: int = None): ...
        def THEN(self): ...
        def endOfStatement(self): ...
        def moduleDeclarations(self, i: int = None): ...
        def moduleBody(self, i: int = None): ...
        def block(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def macroElseIfBlockStmt(self): ...
    class MacroElseBlockStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def MACRO_ELSE(self): ...
        def endOfStatement(self): ...
        def moduleDeclarations(self, i: int = None): ...
        def moduleBody(self, i: int = None): ...
        def block(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def macroElseBlockStmt(self): ...
    class MidStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def MID(self): ...
        def LPAREN(self): ...
        def argsCall(self): ...
        def RPAREN(self): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def midStmt(self): ...
    class MkdirStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def MKDIR(self): ...
        def WS(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def mkdirStmt(self): ...
    class NameStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NAME(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def AS(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def nameStmt(self): ...
    class OnErrorStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def WS(self, i: int = None): ...
        def ON_ERROR(self): ...
        def ON_LOCAL_ERROR(self): ...
        def GOTO(self): ...
        def expression(self): ...
        def RESUME(self): ...
        def NEXT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def onErrorStmt(self): ...
    class OnGoToStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ON(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def GOTO(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def onGoToStmt(self): ...
    class OnGoSubStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ON(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def GOSUB(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def onGoSubStmt(self): ...
    class OpenStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def OPEN(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def FOR(self): ...
        def AS(self): ...
        def fileNumber(self): ...
        def APPEND(self): ...
        def BINARY(self): ...
        def INPUT(self): ...
        def OUTPUT(self): ...
        def RANDOM(self): ...
        def ACCESS(self): ...
        def LEN(self): ...
        def EQ(self): ...
        def READ(self): ...
        def WRITE(self): ...
        def READ_WRITE(self): ...
        def SHARED(self): ...
        def LOCK_READ(self): ...
        def LOCK_WRITE(self): ...
        def LOCK_READ_WRITE(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def openStmt(self): ...
    class OutputListContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def outputList_Expression(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def outputList(self): ...
    class OutputList_ExpressionContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expression(self): ...
        def SPC(self): ...
        def TAB(self): ...
        def LPAREN(self): ...
        def argsCall(self): ...
        def RPAREN(self): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def outputList_Expression(self): ...
    class PrintStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def PRINT(self): ...
        def WS(self, i: int = None): ...
        def fileNumber(self): ...
        def outputList(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def printStmt(self): ...
    class PropertyGetStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def PROPERTY_GET(self): ...
        def WS(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def endOfStatement(self): ...
        def END_PROPERTY(self): ...
        def visibility(self): ...
        def STATIC(self): ...
        def typeHint(self): ...
        def argList(self): ...
        def asTypeClause(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def propertyGetStmt(self): ...
    class PropertySetStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def PROPERTY_SET(self): ...
        def WS(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def endOfStatement(self): ...
        def END_PROPERTY(self): ...
        def visibility(self): ...
        def STATIC(self): ...
        def argList(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def propertySetStmt(self): ...
    class PropertyLetStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def PROPERTY_LET(self): ...
        def WS(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def endOfStatement(self): ...
        def END_PROPERTY(self): ...
        def visibility(self): ...
        def STATIC(self): ...
        def argList(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def propertyLetStmt(self): ...
    class PutStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def PUT(self): ...
        def WS(self, i: int = None): ...
        def fileNumber(self): ...
        def expression(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def putStmt(self): ...
    class RaiseEventStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def RAISEEVENT(self): ...
        def WS(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def LPAREN(self): ...
        def RPAREN(self): ...
        def argsCall(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def raiseEventStmt(self): ...
    class RandomizeStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def RANDOMIZE(self): ...
        def WS(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def randomizeStmt(self): ...
    class RedimStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def REDIM(self): ...
        def WS(self, i: int = None): ...
        def redimSubStmt(self, i: int = None): ...
        def PRESERVE(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def redimStmt(self): ...
    class RedimSubStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def implicitCallStmt_InStmt(self): ...
        def LPAREN(self): ...
        def subscripts(self): ...
        def RPAREN(self): ...
        def WS(self, i: int = None): ...
        def asTypeClause(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def redimSubStmt(self): ...
    class ResetStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def RESET(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def resetStmt(self): ...
    class ResumeStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def RESUME(self): ...
        def WS(self): ...
        def NEXT(self): ...
        def ambiguousIdentifier(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def resumeStmt(self): ...
    class ReturnStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def RETURN(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def returnStmt(self): ...
    class RmdirStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def RMDIR(self): ...
        def WS(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def rmdirStmt(self): ...
    class RsetStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def RSET(self): ...
        def WS(self, i: int = None): ...
        def implicitCallStmt_InStmt(self): ...
        def EQ(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def rsetStmt(self): ...
    class SavepictureStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def SAVEPICTURE(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def savepictureStmt(self): ...
    class SaveSettingStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def SAVESETTING(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def saveSettingStmt(self): ...
    class SeekStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def SEEK(self): ...
        def WS(self, i: int = None): ...
        def fileNumber(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def seekStmt(self): ...
    class SelectCaseStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def SELECT(self): ...
        def WS(self, i: int = None): ...
        def CASE(self): ...
        def expression(self): ...
        def endOfStatement(self): ...
        def END_SELECT(self): ...
        def sC_Case(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def selectCaseStmt(self): ...
    class SC_SelectionContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class CaseCondValueContext(SC_SelectionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expression(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class CaseCondToContext(SC_SelectionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expression(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def TO(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class CaseCondIsContext(SC_SelectionContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def IS(self): ...
        def comparisonOperator(self): ...
        def expression(self): ...
        def WS(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def sC_Selection(self): ...
    class SC_CaseContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CASE(self): ...
        def WS(self): ...
        def sC_Cond(self): ...
        def endOfStatement(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def sC_Case(self): ...
    class SC_CondContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class CaseCondSelectionContext(SC_CondContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def sC_Selection(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class CaseCondElseContext(SC_CondContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ELSE(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def sC_Cond(self): ...
    class SendkeysStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def SENDKEYS(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def sendkeysStmt(self): ...
    class SetattrStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def SETATTR(self): ...
        def WS(self, i: int = None): ...
        def expression(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def setattrStmt(self): ...
    class SetStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def SET(self): ...
        def WS(self, i: int = None): ...
        def implicitCallStmt_InStmt(self): ...
        def EQ(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def setStmt(self): ...
    class StopStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def STOP(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def stopStmt(self): ...
    class SubStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def SUB(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def endOfStatement(self): ...
        def END(self): ...
        def wsc(self): ...
        def visibility(self): ...
        def WS(self, i: int = None): ...
        def STATIC(self): ...
        def argList(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def subStmt(self): ...
    class TimeStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def TIME(self): ...
        def EQ(self): ...
        def expression(self): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def timeStmt(self): ...
    class TypeStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def TYPE(self): ...
        def WS(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def endOfStatement(self): ...
        def END_TYPE(self): ...
        def visibility(self): ...
        def typeStmt_Element(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def typeStmt(self): ...
    class TypeStmt_ElementContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ambiguousIdentifier(self): ...
        def endOfStatement(self): ...
        def LPAREN(self): ...
        def RPAREN(self): ...
        def WS(self, i: int = None): ...
        def asTypeClause(self): ...
        def subscripts(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def typeStmt_Element(self): ...
    class TypeOfStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def TYPEOF(self): ...
        def WS(self, i: int = None): ...
        def expression(self): ...
        def IS(self): ...
        def type_(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def typeOfStmt(self): ...
    class UnloadStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def UNLOAD(self): ...
        def WS(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def unloadStmt(self): ...
    class UnlockStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def UNLOCK(self): ...
        def WS(self, i: int = None): ...
        def fileNumber(self): ...
        def expression(self, i: int = None): ...
        def TO(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def unlockStmt(self): ...
    class ExpressionContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def literal(self): ...
        def implicitCallStmt_InStmt(self): ...
        def parenthesizedExpression(self): ...
        def newExpress(self): ...
        def typeOfStmt(self): ...
        def midStmt(self): ...
        def ADDRESSOF(self): ...
        def expression(self, i: int = None): ...
        def wsc(self, i: int = None): ...
        def ASSIGN(self): ...
        def unaryMinusExpression(self): ...
        def notOperatorExpression(self): ...
        def POW(self): ...
        def DIV(self): ...
        def MULT(self): ...
        def MOD(self): ...
        def PLUS(self): ...
        def MINUS(self): ...
        def AMPERSAND(self): ...
        def IS(self): ...
        def LIKE(self): ...
        def GEQ(self): ...
        def LEQ(self): ...
        def GT(self): ...
        def LT(self): ...
        def NEQ(self): ...
        def EQ(self): ...
        def AND(self): ...
        def OR(self): ...
        def XOR(self): ...
        def EQV(self): ...
        def IMP(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def expression(self, _p: int = 0): ...
    class NewExpressContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NEW(self): ...
        def expression(self): ...
        def wsc(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def newExpress(self): ...
    class NotOperatorExpressionContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NOT(self): ...
        def expression(self): ...
        def wsc(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def notOperatorExpression(self): ...
    class ParenthesizedExpressionContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def LPAREN(self): ...
        def expression(self): ...
        def RPAREN(self): ...
        def wsc(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def parenthesizedExpression(self): ...
    class UnaryMinusExpressionContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def MINUS(self): ...
        def expression(self): ...
        def wsc(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def unaryMinusExpression(self): ...
    class VariableStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def WS(self, i: int = None): ...
        def variableListStmt(self): ...
        def DIM(self): ...
        def STATIC(self): ...
        def visibility(self): ...
        def WITHEVENTS(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def variableStmt(self): ...
    class VariableListStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def variableSubStmt(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def variableListStmt(self): ...
    class VariableSubStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ambiguousIdentifier(self): ...
        def LPAREN(self): ...
        def RPAREN(self): ...
        def typeHint(self): ...
        def WS(self, i: int = None): ...
        def asTypeClause(self): ...
        def subscripts(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def variableSubStmt(self): ...
    class WhileWendStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def WHILE(self): ...
        def WS(self): ...
        def expression(self): ...
        def endOfStatement(self): ...
        def WEND(self): ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def whileWendStmt(self): ...
    class WidthStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def WIDTH(self): ...
        def WS(self, i: int = None): ...
        def fileNumber(self): ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def widthStmt(self): ...
    class WithStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def WITH(self): ...
        def WS(self, i: int = None): ...
        def endOfStatement(self): ...
        def END_WITH(self): ...
        def implicitCallStmt_InStmt(self): ...
        def block(self): ...
        def NEW(self): ...
        def type_(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def withStmt(self): ...
    class WriteStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def WRITE(self): ...
        def WS(self, i: int = None): ...
        def fileNumber(self): ...
        def outputList(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def writeStmt(self): ...
    class FileNumberContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expression(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def fileNumber(self): ...
    class ExplicitCallStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def eCS_ProcedureCall(self): ...
        def eCS_MemberProcedureCall(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def explicitCallStmt(self): ...
    class ECS_ProcedureCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CALL(self): ...
        def WS(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def typeHint(self): ...
        def LPAREN(self, i: int = None): ...
        def argsCall(self): ...
        def RPAREN(self, i: int = None): ...
        def subscripts(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def eCS_ProcedureCall(self): ...
    class ECS_MemberProcedureCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CALL(self): ...
        def WS(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def implicitCallStmt_InStmt(self): ...
        def typeHint(self): ...
        def LPAREN(self, i: int = None): ...
        def argsCall(self): ...
        def RPAREN(self, i: int = None): ...
        def subscripts(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def eCS_MemberProcedureCall(self): ...
    class ImplicitCallStmt_InBlockContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def iCS_B_MemberProcedureCall(self): ...
        def iCS_B_ProcedureCall(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def implicitCallStmt_InBlock(self): ...
    class ICS_B_MemberProcedureCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ambiguousIdentifier(self): ...
        def implicitCallStmt_InStmt(self): ...
        def typeHint(self): ...
        def WS(self, i: int = None): ...
        def argsCall(self): ...
        def dictionaryCallStmt(self): ...
        def LPAREN(self, i: int = None): ...
        def subscripts(self, i: int = None): ...
        def RPAREN(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def iCS_B_MemberProcedureCall(self): ...
    class ICS_B_ProcedureCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def certainIdentifier(self): ...
        def WS(self, i: int = None): ...
        def argsCall(self): ...
        def LPAREN(self, i: int = None): ...
        def subscripts(self, i: int = None): ...
        def RPAREN(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def iCS_B_ProcedureCall(self): ...
    class ImplicitCallStmt_InStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def iCS_S_MembersCall(self): ...
        def iCS_S_VariableOrProcedureCall(self): ...
        def iCS_S_ProcedureOrArrayCall(self): ...
        def iCS_S_DictionaryCall(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def implicitCallStmt_InStmt(self): ...
    class ICS_S_VariableOrProcedureCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ambiguousIdentifier(self): ...
        def typeHint(self): ...
        def dictionaryCallStmt(self): ...
        def LPAREN(self, i: int = None): ...
        def subscripts(self, i: int = None): ...
        def RPAREN(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def iCS_S_VariableOrProcedureCall(self): ...
    class ICS_S_ProcedureOrArrayCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def LPAREN(self, i: int = None): ...
        def RPAREN(self, i: int = None): ...
        def ambiguousIdentifier(self): ...
        def baseType(self): ...
        def typeHint(self): ...
        def WS(self, i: int = None): ...
        def argsCall(self): ...
        def dictionaryCallStmt(self): ...
        def subscripts(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def iCS_S_ProcedureOrArrayCall(self): ...
    class ICS_S_MembersCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def iCS_S_VariableOrProcedureCall(self): ...
        def iCS_S_ProcedureOrArrayCall(self): ...
        def iCS_S_MemberCall(self, i: int = None): ...
        def dictionaryCallStmt(self): ...
        def LPAREN(self, i: int = None): ...
        def subscripts(self, i: int = None): ...
        def RPAREN(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def iCS_S_MembersCall(self): ...
    class ICS_S_MemberCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def iCS_S_VariableOrProcedureCall(self): ...
        def iCS_S_ProcedureOrArrayCall(self): ...
        def LINE_CONTINUATION(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def iCS_S_MemberCall(self): ...
    class ICS_S_DictionaryCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def dictionaryCallStmt(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def iCS_S_DictionaryCall(self): ...
    class ArgsCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def argCall(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def argsCall(self): ...
    class ArgCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expression(self): ...
        def LPAREN(self): ...
        def WS(self): ...
        def RPAREN(self): ...
        def BYVAL(self): ...
        def BYREF(self): ...
        def PARAMARRAY(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def argCall(self): ...
    class DictionaryCallStmtContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ambiguousIdentifier(self): ...
        def typeHint(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def dictionaryCallStmt(self): ...
    class ArgListContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def LPAREN(self): ...
        def RPAREN(self): ...
        def arg(self, i: int = None): ...
        def wsc(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def argList(self): ...
    class ArgContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ambiguousIdentifier(self): ...
        def OPTIONAL(self): ...
        def WS(self, i: int = None): ...
        def PARAMARRAY(self): ...
        def typeHint(self): ...
        def LPAREN(self): ...
        def RPAREN(self): ...
        def asTypeClause(self): ...
        def argDefaultValue(self): ...
        def BYVAL(self): ...
        def BYREF(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def arg(self): ...
    class ArgDefaultValueContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def EQ(self): ...
        def expression(self): ...
        def WS(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def argDefaultValue(self): ...
    class SubscriptsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def subscript_(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def subscripts(self): ...
    class Subscript_Context(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expression(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def TO(self): ...
        def typeHint(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def subscript_(self): ...
    class AmbiguousIdentifierContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def IDENTIFIER(self, i: int = None): ...
        def ambiguousKeyword(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ambiguousIdentifier(self): ...
    class AsTypeClauseContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def AS(self): ...
        def type_(self): ...
        def WS(self, i: int = None): ...
        def NEW(self): ...
        def fieldLength(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def asTypeClause(self): ...
    class BaseTypeContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def BOOLEAN(self): ...
        def BYTE(self): ...
        def COLLECTION(self): ...
        def DATE(self): ...
        def DOUBLE(self): ...
        def INTEGER(self): ...
        def LONG(self): ...
        def SINGLE(self): ...
        def STRING(self): ...
        def MULT(self): ...
        def expression(self): ...
        def WS(self, i: int = None): ...
        def VARIANT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def baseType(self): ...
    class CertainIdentifierContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def IDENTIFIER(self, i: int = None): ...
        def ambiguousKeyword(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def certainIdentifier(self): ...
    class ComparisonOperatorContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def LT(self): ...
        def LEQ(self): ...
        def GT(self): ...
        def GEQ(self): ...
        def EQ(self): ...
        def NEQ(self): ...
        def IS(self): ...
        def LIKE(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def comparisonOperator(self): ...
    class ComplexTypeContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ambiguousIdentifier(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def complexType(self): ...
    class FieldLengthContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def MULT(self): ...
        def INTEGERLITERAL(self): ...
        def ambiguousIdentifier(self): ...
        def WS(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def fieldLength(self): ...
    class LetterrangeContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def certainIdentifier(self, i: int = None): ...
        def MINUS(self): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def letterrange(self): ...
    class LineLabelContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ambiguousIdentifier(self): ...
        def COLON(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def lineLabel(self): ...
    class LiteralContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def HEXLITERAL(self): ...
        def OCTLITERAL(self): ...
        def DATELITERAL(self): ...
        def DOUBLELITERAL(self): ...
        def INTEGERLITERAL(self): ...
        def SHORTLITERAL(self): ...
        def STRINGLITERAL(self): ...
        def TRUE(self): ...
        def FALSE(self): ...
        def NOTHING(self): ...
        def NULL_(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def literal(self): ...
    class Type_Context(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def baseType(self): ...
        def complexType(self): ...
        def LPAREN(self): ...
        def RPAREN(self): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def type_(self): ...
    class TypeHintContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def AMPERSAND(self): ...
        def POW(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def typeHint(self): ...
    class VisibilityContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def PRIVATE(self): ...
        def PUBLIC(self): ...
        def FRIEND(self): ...
        def GLOBAL(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def visibility(self): ...
    class AmbiguousKeywordContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ACCESS(self): ...
        def ADDRESSOF(self): ...
        def ALIAS(self): ...
        def AND(self): ...
        def ATTRIBUTE(self): ...
        def APPACTIVATE(self): ...
        def APPEND(self): ...
        def AS(self): ...
        def BEEP(self): ...
        def BEGIN(self): ...
        def BINARY(self): ...
        def BOOLEAN(self): ...
        def BYVAL(self): ...
        def BYREF(self): ...
        def BYTE(self): ...
        def CALL(self): ...
        def CASE(self): ...
        def CLASS(self): ...
        def CLOSE(self): ...
        def CHDIR(self): ...
        def CHDRIVE(self): ...
        def COLLECTION(self): ...
        def CONST(self): ...
        def DATABASE(self): ...
        def DATE(self): ...
        def DECLARE(self): ...
        def DEFBOOL(self): ...
        def DEFBYTE(self): ...
        def DEFCUR(self): ...
        def DEFDBL(self): ...
        def DEFDATE(self): ...
        def DEFDEC(self): ...
        def DEFINT(self): ...
        def DEFLNG(self): ...
        def DEFOBJ(self): ...
        def DEFSNG(self): ...
        def DEFSTR(self): ...
        def DEFVAR(self): ...
        def DELETESETTING(self): ...
        def DIM(self): ...
        def DO(self): ...
        def DOUBLE(self): ...
        def EACH(self): ...
        def ELSE(self): ...
        def ELSEIF(self): ...
        def END(self): ...
        def ENUM(self): ...
        def EQV(self): ...
        def ERASE(self): ...
        def ERROR(self): ...
        def EVENT(self): ...
        def FALSE(self): ...
        def FILECOPY(self): ...
        def FRIEND(self): ...
        def FOR(self): ...
        def FUNCTION(self): ...
        def GET(self): ...
        def GLOBAL(self): ...
        def GOSUB(self): ...
        def GOTO(self): ...
        def IF(self): ...
        def IMP(self): ...
        def IMPLEMENTS(self): ...
        def IN(self): ...
        def INPUT(self): ...
        def IS(self): ...
        def INTEGER(self): ...
        def KILL(self): ...
        def LOAD(self): ...
        def LOCK(self): ...
        def LONG(self): ...
        def LOOP(self): ...
        def LEN(self): ...
        def LET(self): ...
        def LIB(self): ...
        def LIKE(self): ...
        def LSET(self): ...
        def ME(self): ...
        def MID(self): ...
        def MKDIR(self): ...
        def MOD(self): ...
        def NAME(self): ...
        def NEXT(self): ...
        def NEW(self): ...
        def NOT(self): ...
        def NOTHING(self): ...
        def NULL_(self): ...
        def ON(self): ...
        def OPEN(self): ...
        def OPTIONAL(self): ...
        def OR(self): ...
        def OUTPUT(self): ...
        def PARAMARRAY(self): ...
        def PRESERVE(self): ...
        def PRINT(self): ...
        def PRIVATE(self): ...
        def PUBLIC(self): ...
        def PUT(self): ...
        def RANDOM(self): ...
        def RANDOMIZE(self): ...
        def RAISEEVENT(self): ...
        def READ(self): ...
        def REDIM(self): ...
        def REM(self): ...
        def RESET(self): ...
        def RESUME(self): ...
        def RETURN(self): ...
        def RMDIR(self): ...
        def RSET(self): ...
        def SAVEPICTURE(self): ...
        def SAVESETTING(self): ...
        def SEEK(self): ...
        def SELECT(self): ...
        def SENDKEYS(self): ...
        def SET(self): ...
        def SETATTR(self): ...
        def SHARED(self): ...
        def SINGLE(self): ...
        def SPC(self): ...
        def STATIC(self): ...
        def STEP(self): ...
        def STOP(self): ...
        def STRING(self): ...
        def SUB(self): ...
        def TAB(self): ...
        def TEXT(self): ...
        def THEN(self): ...
        def TIME(self): ...
        def TO(self): ...
        def TRUE(self): ...
        def TYPE(self): ...
        def TYPEOF(self): ...
        def UNLOAD(self): ...
        def UNLOCK(self): ...
        def UNTIL(self): ...
        def VARIANT(self): ...
        def VERSION(self): ...
        def WEND(self): ...
        def WHILE(self): ...
        def WIDTH(self): ...
        def WITH(self): ...
        def WITHEVENTS(self): ...
        def WRITE(self): ...
        def XOR(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def ambiguousKeyword(self): ...
    class RemCommentContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def REMCOMMENT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def remComment(self): ...
    class CommentContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def COMMENT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def comment(self): ...
    class EndOfLineContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NEWLINE(self): ...
        def comment(self): ...
        def remComment(self): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def endOfLine(self): ...
    class EndOfStatementContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def endOfLine(self, i: int = None): ...
        def COLON(self, i: int = None): ...
        def WS(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def endOfStatement(self): ...
    class WscContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def WS(self, i: int = None): ...
        def LINE_CONTINUATION(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def wsc(self): ...
    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int): ...
    def expression_sempred(self, localctx: ExpressionContext, predIndex: int): ...
