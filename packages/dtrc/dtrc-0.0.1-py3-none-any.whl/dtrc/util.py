# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_util.ipynb.

# %% auto 0
__all__ = ['percent', 'ipercent', 'idxstep', 'idxperm']

# %% ../nbs/00_util.ipynb 6
import random
from itertools import takewhile, accumulate

# %% ../nbs/00_util.ipynb 8
from typing import Tuple

# %% ../nbs/00_util.ipynb 11
#| export

# %% ../nbs/00_util.ipynb 13
try: import numpy as np
except ImportError: ...

try: import pandas as pd
except ImportError: ...

# %% ../nbs/00_util.ipynb 15
#| export


# %% ../nbs/00_util.ipynb 17
#| export


# %% ../nbs/00_util.ipynb 19
from ltyp import ints

# %% ../nbs/00_util.ipynb 21
from .atyp import XYArray, LabelArray
from .seed import seedall

# %% ../nbs/00_util.ipynb 23
def percent(p: float, digits: int = 3) -> float:
    return round(p if (p := abs(p)) < 1 else p / 100, digits)

def ipercent(total: int = 1, p: float = 1., digits: int = 3) -> int:
    return int(total * percent(p, digits))

def idxstep(total: int, *percents: float, digits: int = 3) -> tuple[tuple[int, int], ...]:
    pints = [ipercent(total, pct, digits) for pct in percents]    
    if sum(pints) < total: pints.append(total - sum(pints))
    asums = takewhile(lambda s: s <= total, accumulate(pints))
    return list((idx-off, idx) for off, idx in zip(pints, asums))

def idxperm(total: int, *percents: float, seed: int = 3) -> tuple[ints, ...]:
    idx = list(range(total))
    seedall(seed)
    random.shuffle(idx)
    return tuple(idx[a:b] for a, b in idxstep(total, *percents))

# %% ../nbs/00_util.ipynb 25
#| export
