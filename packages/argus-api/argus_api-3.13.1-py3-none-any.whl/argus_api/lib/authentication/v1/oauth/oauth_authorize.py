"""Autogenerated API"""
from argus_api.session import get_session
from typing import TYPE_CHECKING, Optional
if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession
from argus_api.utils import deprecated_alias


def authorize(
    responseType: str = None,
    clientID: str = None,
    redirectURI: str = None,
    state: str = None,
    nonce: str = None,
    scope: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Request authorization to a OAuth client (INTERNAL)
    
    :param list responseType: Type of response requested.
    :param str clientID: The clientID of the requesting client.
    :param str redirectURI: The redirectURI requested by the client.
    :param str state: The state submitted by the client. This state should follow unmodified back to the redirect response after a valid client authorization.
    :param str nonce: A nonce requested by the client. The nonce should pass through unmodified and follow the token issued for this request.
    :param list scope: The scopes requested by the client. If \'openid\' is in scope\, this is an OpenID request.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/authorize".format()

    session = api_session or get_session()
    headers = {}

    body = body or {}
    # Only send responseType if the argument was provided, don't send null values
    if responseType is not None:
        body.update({"responseType": responseType})
    # Only send clientID if the argument was provided, don't send null values
    if clientID is not None:
        body.update({"clientID": clientID})
    # Only send redirectURI if the argument was provided, don't send null values
    if redirectURI is not None:
        body.update({"redirectURI": redirectURI})
    # Only send state if the argument was provided, don't send null values
    if state is not None:
        body.update({"state": state})
    # Only send nonce if the argument was provided, don't send null values
    if nonce is not None:
        body.update({"nonce": nonce})
    # Only send scope if the argument was provided, don't send null values
    if scope is not None:
        body.update({"scope": scope})

    query_parameters = {}

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def create_oauth2_client(
    shortName: str = None,
    name: str = None,
    description: str = None,
    domain: str = None,
    customer: str = None,
    mainURI: str = None,
    redirectURIs: str = None,
    requiredFunction: str = None,
    permissionScope: str = None,
    authenticationMethod: str = None,
    clientSecret: str = None,
    clientIPRange: str = None,
    redirectURI: str = None,
    openIDCustomClaims: dict = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Define a new OAuth2 client (PUBLIC)
    
    :param str shortName: \[a\-zA\-Z0\-9\_\:\\\-\\.\]\*
    :param str name: \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param str description: \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param str domain: 
    :param str customer: 
    :param str mainURI: Sanitize by regex https\:\/\/.\*
    :param list redirectURIs: Sanitize by regex http\(s\)\?\:\/\/.\*
    :param str requiredFunction: 
    :param str permissionScope: 
    :param str authenticationMethod: 
    :param str clientSecret: 
    :param list clientIPRange: format\:ip
    :param str redirectURI: 
    :param list openIDCustomClaims: Optional custom claims configuration. See documentation for valid configuration format per custom claim.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client".format()

    session = api_session or get_session()
    headers = {}

    body = body or {}
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        body.update({"domain": domain})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send mainURI if the argument was provided, don't send null values
    if mainURI is not None:
        body.update({"mainURI": mainURI})
    # Only send redirectURIs if the argument was provided, don't send null values
    if redirectURIs is not None:
        body.update({"redirectURIs": redirectURIs})
    # Only send requiredFunction if the argument was provided, don't send null values
    if requiredFunction is not None:
        body.update({"requiredFunction": requiredFunction})
    # Only send permissionScope if the argument was provided, don't send null values
    if permissionScope is not None:
        body.update({"permissionScope": permissionScope})
    # Only send authenticationMethod if the argument was provided, don't send null values
    if authenticationMethod is not None:
        body.update({"authenticationMethod": authenticationMethod})
    # Only send clientSecret if the argument was provided, don't send null values
    if clientSecret is not None:
        body.update({"clientSecret": clientSecret})
    # Only send clientIPRange if the argument was provided, don't send null values
    if clientIPRange is not None:
        body.update({"clientIPRange": clientIPRange})
    # Only send redirectURI if the argument was provided, don't send null values
    if redirectURI is not None:
        body.update({"redirectURI": redirectURI})
    # Only send openIDCustomClaims if the argument was provided, don't send null values
    if openIDCustomClaims is not None:
        body.update({"openIDCustomClaims": openIDCustomClaims})

    query_parameters = {}

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_oauth2_client(
    idOrShortname: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Delete a OAuth2 client (PUBLIC)
    
    :param str idOrShortname: ID or shortname of client to delete
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises SpecifiedObjectWasNotFoundException: on 404
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client/{idOrShortname}".format(idOrShortname=idOrShortname)

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_oauth2_client(
    idOrShortname: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Fetch a OAuth2 client descriptor (PUBLIC)
    
    :param str idOrShortname: ID or shortname of client to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises SpecifiedObjectWasNotFoundException: on 404
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client/{idOrShortname}".format(idOrShortname=idOrShortname)

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_token(
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Exchange a OAuth2 authorization code with an access token (PUBLIC)
    
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises ValidationErrorException: on 400
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/token".format()

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}

    response = session.post(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_user_info(
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Return OpenID userinfo (PUBLIC)
    
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/userinfo".format()

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_oauth2_clients(
    customer: str = None,
    domain: str = None,
    keywords: str = None,
    sortBy: str = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """List available OAuth2 client descriptors (PUBLIC)
    
    :param list customer: Limit results to clients for this customer \(or subcustomers\)
    :param list domain: Limit results to clients for this domain
    :param list keywords: Limit results to clients matching these keywords
    :param list sortBy: Specify sort order
    :param int limit: Limit number of results
    :param int offset: Skip a number of results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises SpecifiedObjectWasNotFoundException: on 404
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client".format(limit=limit,
        customer=customer,
        domain=domain,
        keywords=keywords,
        sortBy=sortBy,
        offset=offset)

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})
    
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})
    
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def post_user_info(
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Return OpenID userinfo (PUBLIC)
    
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/userinfo".format()

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def search_oauth2_clients(
    customer: str = None,
    domain: str = None,
    requiredFunction: str = None,
    subCriteria: dict = None,
    keywords: str = None,
    keywordMatchStrategy: str = None,
    keywordFieldStrategy: str = None,
    sortBy: str = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Search available OAuth2 client descriptors (PUBLIC)
    
    :param list customer: Match clients bound to any of these customers \(by id or shortname\)
    :param list domain: Match clients bound to any of these domains \(by id or shortname\)
    :param list requiredFunction: Match clients having any of the specified functions \(id or shortname\) as requiredFunction
    :param list subCriteria: Subcriteria for this search request
    :param list keywords: Match clients by these keywords
    :param str keywordMatchStrategy: Search based on all keywords \(AND\)\, or based on any keyword \(OR\) \(default Match all keywords \(AND\)\)
    :param list keywordFieldStrategy: Which fields will be searched for the given keyword \(default All supported fields\)
    :param list sortBy: Specify sort order \(default shortName\)
    :param int limit: Limit the number of results \(default 25\)
    :param int offset: Skip the first results\, in sort order \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises SpecifiedObjectWasNotFoundException: on 404
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client/search".format()

    session = api_session or get_session()
    headers = {}

    body = body or {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        body.update({"domain": domain})
    # Only send requiredFunction if the argument was provided, don't send null values
    if requiredFunction is not None:
        body.update({"requiredFunction": requiredFunction})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})

    query_parameters = {}

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_oauth2_client(
    idOrShortname: str,
    shortName: str = None,
    name: str = None,
    description: str = None,
    mainURI: str = None,
    redirectURIs: str = None,
    requiredFunction: str = None,
    permissionScope: str = None,
    authenticationMethod: str = None,
    clientSecret: str = None,
    clientIPRange: str = None,
    redirectURI: str = None,
    openIDCustomClaims: dict = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Update an existing OAuth2 client (PUBLIC)
    
    :param str idOrShortname: ID or shortname of OAuth2 client to update
    :param str shortName: \[a\-zA\-Z0\-9\_\:\\\-\\.\]\*
    :param str name: \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param str description: \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param str mainURI: Sanitize by regex https\:\/\/.\*
    :param list redirectURIs: Sanitize by regex http\(s\)\?\:\/\/.\*
    :param str requiredFunction: 
    :param str permissionScope: 
    :param str authenticationMethod: 
    :param str clientSecret: 
    :param list clientIPRange: format\:ip
    :param str redirectURI: 
    :param list openIDCustomClaims: If set\, overwrite any existing custom claims configuration. This would remove any existing providers. Use empty array to remove all existing providers.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client/{idOrShortname}".format(idOrShortname=idOrShortname)

    session = api_session or get_session()
    headers = {}

    body = body or {}
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send mainURI if the argument was provided, don't send null values
    if mainURI is not None:
        body.update({"mainURI": mainURI})
    # Only send redirectURIs if the argument was provided, don't send null values
    if redirectURIs is not None:
        body.update({"redirectURIs": redirectURIs})
    # Only send requiredFunction if the argument was provided, don't send null values
    if requiredFunction is not None:
        body.update({"requiredFunction": requiredFunction})
    # Only send permissionScope if the argument was provided, don't send null values
    if permissionScope is not None:
        body.update({"permissionScope": permissionScope})
    # Only send authenticationMethod if the argument was provided, don't send null values
    if authenticationMethod is not None:
        body.update({"authenticationMethod": authenticationMethod})
    # Only send clientSecret if the argument was provided, don't send null values
    if clientSecret is not None:
        body.update({"clientSecret": clientSecret})
    # Only send clientIPRange if the argument was provided, don't send null values
    if clientIPRange is not None:
        body.update({"clientIPRange": clientIPRange})
    # Only send redirectURI if the argument was provided, don't send null values
    if redirectURI is not None:
        body.update({"redirectURI": redirectURI})
    # Only send openIDCustomClaims if the argument was provided, don't send null values
    if openIDCustomClaims is not None:
        body.update({"openIDCustomClaims": openIDCustomClaims})

    query_parameters = {}

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

#: **DEPRECATED** : ``create_o_auth2_client`` is an alias for ``create_oauth2_client``. Exists
#: only for backward compatibility - **do not use** - use ``create_oauth2_client`` instead.
create_o_auth2_client = deprecated_alias("create_o_auth2_client")(create_oauth2_client)
#: **DEPRECATED** : ``update_o_auth2_client`` is an alias for ``update_oauth2_client``. Exists
#: only for backward compatibility - **do not use** - use ``update_oauth2_client`` instead.
update_o_auth2_client = deprecated_alias("update_o_auth2_client")(update_oauth2_client)