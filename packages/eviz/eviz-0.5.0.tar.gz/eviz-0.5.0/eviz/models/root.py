import os
from dataclasses import dataclass
import logging

import matplotlib
import matplotlib.pyplot as plt
import multiprocessing

from eviz.lib.eviz.config import Config
from eviz.lib.eviz.figure import Figure
from eviz.lib.eviz.plotter import SimplePlotter, ComparisonPlotter, SinglePlotter
import eviz.lib.utils as u
from eviz.lib import const as constants
from eviz.lib.eviz.plot_utils import print_map


@dataclass
class Root:
    """This class defines generic interfaces for all supported sources.
    In eViz a `source` is a data file generated by an Earth system model (ESM),
    any other system that supports the ESM (e.g. a reanalysis system),
    or observational data sources from satellite or other inventories.

    Parameters
        config :
            Representation of the configuration used to specify data sources and
            user choices for the map generation. The config instance is created at the
            application level.
    """
    config: Config

    @property
    def logger(self) -> logging.Logger:
        return logging.getLogger(__name__)

    def __post_init__(self):
        self.logger.info("Start init")

        self.app = self.config.app_data
        self.specs = self.config.spec_data
        self.use_mp_pool = self.config.use_mp_pool
        self.dims_name = None
        self.source_data = None
        self.comparison_plot = False
        self.map_data = None
        self.output_fname = None
        self.ax = None
        self.fig = None
        self.ax_opts = None
        self.findex = {}
        if self.use_mp_pool:
            # Set to avoid establishing a GUI in each sub-process:
            matplotlib.use('agg')
            self.procs = list()

    def __call__(self):
        self.plot()

    def plot(self):
        """ Top level interface for generic (NetCDF) maps
        """
        # self.logger.info(f"Creating {self.config.model_name.upper()} plots.")
        self.logger.info(f"Generate plots.")

        # If there is no SPECS file then produce "simple" visualizations
        if not self.config.have_specs_yaml_file:
            plotter = SimplePlotter()
            self._simple_plots(plotter)
            return
        else:
            if self.config.compare:
                plotter = ComparisonPlotter(self.config.compare_exp_ids)
                self._comparison_plots(plotter)
            else:
                plotter = SinglePlotter()
                self._single_plots(plotter)

        # TODO: if "gif" format is selected, process "gif" plots to make a movie
        # if self.config.make_pdf:
        #     pu.create_pdf(self.config)
        # self.logger.info(f"{self.config.model_name.upper()} plots are done.")

        # TODO: This if-block is repeated in other places. Refactor!
        if self.config.print_to_file:
            output_dirs = []
            for i in range(len(self.config.map_params)):
                if self.config.compare:
                    output_dirs.append(u.get_nested_key_value(self.config.map_params[i], ['outputs']))
                else:
                    output_dirs.append(u.get_nested_key_value(self.config.map_params[i], ['outputs', 'output_dir']))
            # A user can have 'outputs' in APP YAML, but no 'output_dir' specified.
            if not output_dirs:
                output_dirs = [constants.output_path]

            s = set(output_dirs)
            while s:
                self.logger.info(f"Output files are in {s.pop()}")

        self.logger.info(f"Done.")

    def _process_comparison_plot(self, plotter, file_index, current_field_index, field_name, figure, ax, ax_index,
                                 source_data, pt, level=None):
        self.config.findex = file_index
        self.config.pindex = current_field_index
        self.config.axindex = ax_index
        self.config.ax_opts = figure.init_ax_opts(field_name)
        figure.set_ax_opts_diff_field(ax[ax_index])
        field_to_plot = self._get_field_to_plot_compare(source_data, field_name, file_index,
                                                        pt, figure, level=level)
        plotter.comparison_plots(self.config, field_to_plot, level=level)

    def _process_comparison_plot_2x2(self, plotter, file_index, current_field_index, field_name, figure, gsi, ax_index,
                                     source_data, pt, level=None):
        self.config.findex = file_index
        self.config.pindex = current_field_index
        self.config.axindex = ax_index
        self.config.ax_opts = figure.init_ax_opts(field_name)
        ax1 = plt.subplot(figure.gs[gsi[0], gsi[1]])
        figure.set_ax_opts_diff_field(ax1)
        field_to_plot = self._get_field_to_plot_compare(source_data, field_name, file_index,
                                                        pt, figure, level=level)
        plotter.comparison_plots(self.config, field_to_plot, level=level)

    def _comparison_plots(self, plotter):
        current_field_index = 0
        if len(self.config.source_names) == 2 and self.config.source_names[0] == self.config.source_names[1]:
            self.config.b_list = self.config.a_list

        for m1, m2 in zip(self.config.a_list, self.config.b_list):
            s1, s2 = m1['source_name'], m2['source_name']
            fn1, fn2 = m1['filename'], m2['filename']
            # Read data from files to be compared (need to cache)
            sdat1 = self.config.readers[s1].read_data(fn1)
            sdat2 = self.config.readers[s2].read_data(fn2)
            sdat = (sdat1, sdat2)
            if s1 == s2:
                fi1, fi2 = self.config.get_file_index(fn1), self.config.get_file_index(fn2)
            else:
                fi1, fi2 = self.config.get_comp_file_index(fn1, s1), self.config.get_comp_file_index(fn2, s2)
            for pts in zip(m1['to_plot'], m2['to_plot']):
                pt = pts[0]
                field_name1, field_name2 = m1['field'], m2['field']
                self.logger.info(f"Plotting {field_name1} vs {field_name2}, {pt} plot")
                self.field_names = (field_name1, field_name2)
                if 'xy' in pt:
                    # TODO: check for levels2, and create levels1 !!!
                    levels = self.config.get_levels(field_name1, pt + 'plot')
                    if not levels:
                        self.logger.warning(f' -> No levels specified for {field_name1}')
                        continue
                    for level in levels:
                        figure = Figure(self.config, pt)
                        _, ax = figure.get_fig_ax()
                        axes_shape = figure.get_gs_geometry()
                        self.config.level = level
                        if axes_shape == (3, 1):
                            self._process_comparison_plot(plotter, fi1, current_field_index, field_name1,
                                                          figure, ax, 0, sdat1, pt, level=level)
                            self._process_comparison_plot(plotter, fi2, current_field_index, field_name2,
                                                          figure, ax, 1, sdat2, pt, level=level)
                            self.comparison_plot = True
                            self._process_comparison_plot(plotter, fi1, current_field_index, field_name1,
                                                          figure, ax, 2, sdat, pt, level=level)

                        elif axes_shape == (2, 2):
                            self._process_comparison_plot_2x2(plotter, fi1, current_field_index, field_name1,
                                                              figure, [0, 0], 0, sdat1, pt, level=level)
                            self._process_comparison_plot_2x2(plotter, fi2, current_field_index, field_name2,
                                                              figure, [0, 1], 1, sdat2, pt, level=level)
                            self.comparison_plot = True
                            self._process_comparison_plot_2x2(plotter, fi1, current_field_index, field_name1,
                                                              figure, [1, 0], 2, sdat, pt, level=level)
                            self._process_comparison_plot_2x2(plotter, fi1, current_field_index, field_name1,
                                                              figure, [1, 1], 2, sdat, pt, level=level)
                        print_map(self.config, pt, self.config.findex, figure, level=level)
                        self.comparison_plot = False

                else:
                    figure = Figure(self.config, pt)
                    _, ax = figure.get_fig_ax()
                    axes_shape = figure.get_gs_geometry()
                    self.config.level = None
                    if axes_shape == (3, 1):
                        self._process_comparison_plot(plotter, fi1, current_field_index, field_name1,
                                                      figure, ax, 0, sdat1, pt)
                        self._process_comparison_plot(plotter, fi2, current_field_index, field_name2,
                                                      figure, ax, 1, sdat2, pt)
                        self.comparison_plot = True
                        self._process_comparison_plot(plotter, fi1, current_field_index, field_name1,
                                                      figure, ax, 2, sdat, pt)

                    elif axes_shape == (2, 2):
                        self._process_comparison_plot_2x2(plotter, fi1, current_field_index, field_name1,
                                                          figure, [0, 0], 0, sdat1, pt)
                        self._process_comparison_plot_2x2(plotter, fi2, current_field_index, field_name2,
                                                          figure, [0, 1], 1, sdat2, pt)
                        self.comparison_plot = True
                        self._process_comparison_plot_2x2(plotter, fi1, current_field_index, field_name1,
                                                          figure, [1, 0], 2, sdat, pt)
                        self._process_comparison_plot_2x2(plotter, fi1, current_field_index, field_name1,
                                                          figure, [1, 1], 2, sdat, pt)
                    print_map(self.config, pt, self.config.findex, figure)

            current_field_index += 1

    def _simple_plots(self, plotter):
        map_params = self.config.map_params
        field_num = 0
        self.config.findex = 0
        for i in map_params.keys():
            field_name = map_params[i]['field']
            source_name = map_params[i]['source_name']
            filename = map_params[i]['filename']
            file_index = self.config.get_file_index(filename)
            source_data = self.config.readers[source_name].read_data(filename)
            self.config.findex = file_index
            self.config.pindex = field_num
            self.config.axindex = 0
            for pt in map_params[i]['to_plot']:
                self.logger.info(f"Plotting {field_name}, {pt} plot")
                field_to_plot = self._get_field_for_simple_plot(source_data, field_name, pt)
                plotter.simple_plot(self.config, field_to_plot)
            field_num += 1

    def _single_plots(self, plotter):
        for s in range(len(self.config.source_names)):
            map_params = self.config.map_params
            field_num = 0
            for i in map_params.keys():
                source_name = map_params[i]['source_name']
                if source_name == self.config.source_names[s]:
                    field_name = map_params[i]['field']
                    source_name = map_params[i]['source_name']
                    filename = map_params[i]['filename']
                    file_index = field_num  # self.config.get_file_index(filename)
                    source_data = self.config.readers[source_name].read_data(filename)
                    # Additional HDF5 processing
                    # source_data = self.config.readers[source_name].process_file(source_data)
                    # TODO: Is ds_index really necessary?
                    self.config.ds_index = s
                    self.config.findex = file_index
                    self.config.pindex = field_num
                    self.config.axindex = 0
                    for pt in map_params[i]['to_plot']:
                        self.logger.info(f"Plotting {field_name}, {pt} plot")
                        figure = Figure(self.config, pt)
                        if 'xy' in pt:
                            levels = self.config.get_levels(field_name, pt + 'plot')
                            if not levels:
                                self.logger.warning(f' -> No levels specified for {field_name}')
                                continue
                            for level in levels:
                                self.config.level = level
                                field_to_plot = self._get_field_to_plot(source_data, field_name, file_index, pt, figure,
                                                                        level=level)
                                if self.use_mp_pool:
                                    p = multiprocessing.Process(target=plotter.single_plots,
                                                                args=(self.config, field_to_plot, level))
                                    self.logger.info(f"  start " + p.name)
                                    self.procs.append(p)
                                    p.start()
                                else:
                                    plotter.single_plots(self.config, field_to_plot=field_to_plot, level=level)
                                print_map(self.config, pt, self.config.findex, figure, level=level)

                        else:
                            self.config.level = None
                            field_to_plot = self._get_field_to_plot(source_data, field_name, file_index, pt, figure)
                            if self.use_mp_pool:
                                p = multiprocessing.Process(target=plotter.single_plots,
                                                            args=(self.config, field_to_plot))
                                self.logger.info(f"  start " + p.name)
                                self.procs.append(p)
                                p.start()

                            else:
                                plotter.single_plots(self.config, field_to_plot=field_to_plot)
                            print_map(self.config, pt, self.config.findex, figure)

                    field_num += 1

        if self.use_mp_pool:
            for p in self.procs:
                self.logger.info(f"process{p.name} is done")
                p.join()

    def _get_field_for_simple_plot(self, *args):
        pass

    def _get_field_to_plot(self, *args, **kwargs):
        pass

    def _get_field_to_plot_compare(self, *args, **kwargs):
        pass

    def _plot_dest(self, name):
        if self.config.print_to_file:
            output_fname = name + "." + self.config.print_format
            filename = os.path.join(self.config.output_dir, output_fname)
            plt.savefig(filename, bbox_inches='tight')
        else:
            plt.tight_layout()
            plt.show()
