#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import logging
import sys

from thrift.protocol.TProtocol import TProtocolException
from thrift.Thrift import (TApplicationException, TException, TFrozenDict,
                           TMessageType, TProcessor, TType)
from thrift.transport import TTransport

from .ttypes import *


class Iface(object):
    def InsertFeatureForTESTByName(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        pass

    def IncrFeatureByName(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        pass

    def UpdateFeatureByName(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        pass

    def GetFeatureByName(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        pass

    def GetHistoryFeatureByName(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        pass

    def GetFeatureByTopic(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        pass

    def GetFeatureByTopics(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        pass

    def GetFeatureByTopicPartitionIds(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        pass

    def UpdateFeatureVersion(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def InsertFeatureForTESTByName(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        self.send_InsertFeatureForTESTByName(traceInfo, featureReq)
        return self.recv_InsertFeatureForTESTByName()

    def send_InsertFeatureForTESTByName(self, traceInfo, featureReq):
        self._oprot.writeMessageBegin('InsertFeatureForTESTByName', TMessageType.CALL, self._seqid)
        args = InsertFeatureForTESTByName_args()
        args.traceInfo = traceInfo
        args.featureReq = featureReq
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_InsertFeatureForTESTByName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = InsertFeatureForTESTByName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "InsertFeatureForTESTByName failed: unknown result")

    def IncrFeatureByName(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        self.send_IncrFeatureByName(traceInfo, featureReq)
        return self.recv_IncrFeatureByName()

    def send_IncrFeatureByName(self, traceInfo, featureReq):
        self._oprot.writeMessageBegin('IncrFeatureByName', TMessageType.CALL, self._seqid)
        args = IncrFeatureByName_args()
        args.traceInfo = traceInfo
        args.featureReq = featureReq
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_IncrFeatureByName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = IncrFeatureByName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "IncrFeatureByName failed: unknown result")

    def UpdateFeatureByName(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        self.send_UpdateFeatureByName(traceInfo, featureReq)
        return self.recv_UpdateFeatureByName()

    def send_UpdateFeatureByName(self, traceInfo, featureReq):
        self._oprot.writeMessageBegin('UpdateFeatureByName', TMessageType.CALL, self._seqid)
        args = UpdateFeatureByName_args()
        args.traceInfo = traceInfo
        args.featureReq = featureReq
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateFeatureByName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateFeatureByName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateFeatureByName failed: unknown result")

    def GetFeatureByName(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        self.send_GetFeatureByName(traceInfo, featureReq)
        return self.recv_GetFeatureByName()

    def send_GetFeatureByName(self, traceInfo, featureReq):
        self._oprot.writeMessageBegin('GetFeatureByName', TMessageType.CALL, self._seqid)
        args = GetFeatureByName_args()
        args.traceInfo = traceInfo
        args.featureReq = featureReq
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetFeatureByName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetFeatureByName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetFeatureByName failed: unknown result")

    def GetHistoryFeatureByName(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        self.send_GetHistoryFeatureByName(traceInfo, featureReq)
        return self.recv_GetHistoryFeatureByName()

    def send_GetHistoryFeatureByName(self, traceInfo, featureReq):
        self._oprot.writeMessageBegin('GetHistoryFeatureByName', TMessageType.CALL, self._seqid)
        args = GetHistoryFeatureByName_args()
        args.traceInfo = traceInfo
        args.featureReq = featureReq
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetHistoryFeatureByName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetHistoryFeatureByName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetHistoryFeatureByName failed: unknown result")

    def GetFeatureByTopic(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        self.send_GetFeatureByTopic(traceInfo, featureReq)
        return self.recv_GetFeatureByTopic()

    def send_GetFeatureByTopic(self, traceInfo, featureReq):
        self._oprot.writeMessageBegin('GetFeatureByTopic', TMessageType.CALL, self._seqid)
        args = GetFeatureByTopic_args()
        args.traceInfo = traceInfo
        args.featureReq = featureReq
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetFeatureByTopic(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetFeatureByTopic_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetFeatureByTopic failed: unknown result")

    def GetFeatureByTopics(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        self.send_GetFeatureByTopics(traceInfo, featureReq)
        return self.recv_GetFeatureByTopics()

    def send_GetFeatureByTopics(self, traceInfo, featureReq):
        self._oprot.writeMessageBegin('GetFeatureByTopics', TMessageType.CALL, self._seqid)
        args = GetFeatureByTopics_args()
        args.traceInfo = traceInfo
        args.featureReq = featureReq
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetFeatureByTopics(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetFeatureByTopics_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetFeatureByTopics failed: unknown result")

    def GetFeatureByTopicPartitionIds(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        self.send_GetFeatureByTopicPartitionIds(traceInfo, featureReq)
        return self.recv_GetFeatureByTopicPartitionIds()

    def send_GetFeatureByTopicPartitionIds(self, traceInfo, featureReq):
        self._oprot.writeMessageBegin('GetFeatureByTopicPartitionIds', TMessageType.CALL, self._seqid)
        args = GetFeatureByTopicPartitionIds_args()
        args.traceInfo = traceInfo
        args.featureReq = featureReq
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetFeatureByTopicPartitionIds(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetFeatureByTopicPartitionIds_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetFeatureByTopicPartitionIds failed: unknown result")

    def UpdateFeatureVersion(self, traceInfo, featureReq):
        """
        Parameters:
         - traceInfo
         - featureReq
        """
        self.send_UpdateFeatureVersion(traceInfo, featureReq)
        return self.recv_UpdateFeatureVersion()

    def send_UpdateFeatureVersion(self, traceInfo, featureReq):
        self._oprot.writeMessageBegin('UpdateFeatureVersion', TMessageType.CALL, self._seqid)
        args = UpdateFeatureVersion_args()
        args.traceInfo = traceInfo
        args.featureReq = featureReq
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_UpdateFeatureVersion(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = UpdateFeatureVersion_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "UpdateFeatureVersion failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["InsertFeatureForTESTByName"] = Processor.process_InsertFeatureForTESTByName
        self._processMap["IncrFeatureByName"] = Processor.process_IncrFeatureByName
        self._processMap["UpdateFeatureByName"] = Processor.process_UpdateFeatureByName
        self._processMap["GetFeatureByName"] = Processor.process_GetFeatureByName
        self._processMap["GetHistoryFeatureByName"] = Processor.process_GetHistoryFeatureByName
        self._processMap["GetFeatureByTopic"] = Processor.process_GetFeatureByTopic
        self._processMap["GetFeatureByTopics"] = Processor.process_GetFeatureByTopics
        self._processMap["GetFeatureByTopicPartitionIds"] = Processor.process_GetFeatureByTopicPartitionIds
        self._processMap["UpdateFeatureVersion"] = Processor.process_UpdateFeatureVersion

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_InsertFeatureForTESTByName(self, seqid, iprot, oprot):
        args = InsertFeatureForTESTByName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = InsertFeatureForTESTByName_result()
        try:
            result.success = self._handler.InsertFeatureForTESTByName(args.traceInfo, args.featureReq)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("InsertFeatureForTESTByName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_IncrFeatureByName(self, seqid, iprot, oprot):
        args = IncrFeatureByName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = IncrFeatureByName_result()
        try:
            result.success = self._handler.IncrFeatureByName(args.traceInfo, args.featureReq)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("IncrFeatureByName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateFeatureByName(self, seqid, iprot, oprot):
        args = UpdateFeatureByName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateFeatureByName_result()
        try:
            result.success = self._handler.UpdateFeatureByName(args.traceInfo, args.featureReq)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateFeatureByName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetFeatureByName(self, seqid, iprot, oprot):
        args = GetFeatureByName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetFeatureByName_result()
        try:
            result.success = self._handler.GetFeatureByName(args.traceInfo, args.featureReq)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetFeatureByName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetHistoryFeatureByName(self, seqid, iprot, oprot):
        args = GetHistoryFeatureByName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetHistoryFeatureByName_result()
        try:
            result.success = self._handler.GetHistoryFeatureByName(args.traceInfo, args.featureReq)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetHistoryFeatureByName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetFeatureByTopic(self, seqid, iprot, oprot):
        args = GetFeatureByTopic_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetFeatureByTopic_result()
        try:
            result.success = self._handler.GetFeatureByTopic(args.traceInfo, args.featureReq)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetFeatureByTopic", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetFeatureByTopics(self, seqid, iprot, oprot):
        args = GetFeatureByTopics_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetFeatureByTopics_result()
        try:
            result.success = self._handler.GetFeatureByTopics(args.traceInfo, args.featureReq)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetFeatureByTopics", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetFeatureByTopicPartitionIds(self, seqid, iprot, oprot):
        args = GetFeatureByTopicPartitionIds_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetFeatureByTopicPartitionIds_result()
        try:
            result.success = self._handler.GetFeatureByTopicPartitionIds(args.traceInfo, args.featureReq)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetFeatureByTopicPartitionIds", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_UpdateFeatureVersion(self, seqid, iprot, oprot):
        args = UpdateFeatureVersion_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = UpdateFeatureVersion_result()
        try:
            result.success = self._handler.UpdateFeatureVersion(args.traceInfo, args.featureReq)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("UpdateFeatureVersion", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class InsertFeatureForTESTByName_args(object):
    """
    Attributes:
     - traceInfo
     - featureReq
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'traceInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRUCT, 'featureReq', (InsertFeatureForTESTReq, InsertFeatureForTESTReq.thrift_spec), None, ),  # 2
    )

    def __init__(self, traceInfo=None, featureReq=None,):
        self.traceInfo = traceInfo
        self.featureReq = featureReq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.traceInfo = {}
                    (_ktype178, _vtype179, _size177) = iprot.readMapBegin()
                    for _i181 in range(_size177):
                        _key182 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val183 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.traceInfo[_key182] = _val183
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.featureReq = InsertFeatureForTESTReq()
                    self.featureReq.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('InsertFeatureForTESTByName_args')
        if self.traceInfo is not None:
            oprot.writeFieldBegin('traceInfo', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.traceInfo))
            for kiter184, viter185 in self.traceInfo.items():
                oprot.writeString(kiter184.encode('utf-8') if sys.version_info[0] == 2 else kiter184)
                oprot.writeString(viter185.encode('utf-8') if sys.version_info[0] == 2 else viter185)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.featureReq is not None:
            oprot.writeFieldBegin('featureReq', TType.STRUCT, 2)
            self.featureReq.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.traceInfo is None:
            raise TProtocolException(message='Required field traceInfo is unset!')
        if self.featureReq is None:
            raise TProtocolException(message='Required field featureReq is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InsertFeatureForTESTByName_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (SimpleResponse, SimpleResponse.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SimpleResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('InsertFeatureForTESTByName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IncrFeatureByName_args(object):
    """
    Attributes:
     - traceInfo
     - featureReq
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'traceInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRUCT, 'featureReq', (IncrFeatureReq, IncrFeatureReq.thrift_spec), None, ),  # 2
    )

    def __init__(self, traceInfo=None, featureReq=None,):
        self.traceInfo = traceInfo
        self.featureReq = featureReq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.traceInfo = {}
                    (_ktype187, _vtype188, _size186) = iprot.readMapBegin()
                    for _i190 in range(_size186):
                        _key191 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val192 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.traceInfo[_key191] = _val192
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.featureReq = IncrFeatureReq()
                    self.featureReq.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('IncrFeatureByName_args')
        if self.traceInfo is not None:
            oprot.writeFieldBegin('traceInfo', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.traceInfo))
            for kiter193, viter194 in self.traceInfo.items():
                oprot.writeString(kiter193.encode('utf-8') if sys.version_info[0] == 2 else kiter193)
                oprot.writeString(viter194.encode('utf-8') if sys.version_info[0] == 2 else viter194)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.featureReq is not None:
            oprot.writeFieldBegin('featureReq', TType.STRUCT, 2)
            self.featureReq.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.traceInfo is None:
            raise TProtocolException(message='Required field traceInfo is unset!')
        if self.featureReq is None:
            raise TProtocolException(message='Required field featureReq is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IncrFeatureByName_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (SimpleResponse, SimpleResponse.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SimpleResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('IncrFeatureByName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpdateFeatureByName_args(object):
    """
    Attributes:
     - traceInfo
     - featureReq
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'traceInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRUCT, 'featureReq', (UpdateFeatureReq, UpdateFeatureReq.thrift_spec), None, ),  # 2
    )

    def __init__(self, traceInfo=None, featureReq=None,):
        self.traceInfo = traceInfo
        self.featureReq = featureReq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.traceInfo = {}
                    (_ktype196, _vtype197, _size195) = iprot.readMapBegin()
                    for _i199 in range(_size195):
                        _key200 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val201 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.traceInfo[_key200] = _val201
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.featureReq = UpdateFeatureReq()
                    self.featureReq.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UpdateFeatureByName_args')
        if self.traceInfo is not None:
            oprot.writeFieldBegin('traceInfo', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.traceInfo))
            for kiter202, viter203 in self.traceInfo.items():
                oprot.writeString(kiter202.encode('utf-8') if sys.version_info[0] == 2 else kiter202)
                oprot.writeString(viter203.encode('utf-8') if sys.version_info[0] == 2 else viter203)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.featureReq is not None:
            oprot.writeFieldBegin('featureReq', TType.STRUCT, 2)
            self.featureReq.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.traceInfo is None:
            raise TProtocolException(message='Required field traceInfo is unset!')
        if self.featureReq is None:
            raise TProtocolException(message='Required field featureReq is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpdateFeatureByName_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (SimpleResponse, SimpleResponse.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SimpleResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UpdateFeatureByName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByName_args(object):
    """
    Attributes:
     - traceInfo
     - featureReq
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'traceInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRUCT, 'featureReq', (GetFeatureByNameReq, GetFeatureByNameReq.thrift_spec), None, ),  # 2
    )

    def __init__(self, traceInfo=None, featureReq=None,):
        self.traceInfo = traceInfo
        self.featureReq = featureReq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.traceInfo = {}
                    (_ktype205, _vtype206, _size204) = iprot.readMapBegin()
                    for _i208 in range(_size204):
                        _key209 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val210 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.traceInfo[_key209] = _val210
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.featureReq = GetFeatureByNameReq()
                    self.featureReq.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByName_args')
        if self.traceInfo is not None:
            oprot.writeFieldBegin('traceInfo', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.traceInfo))
            for kiter211, viter212 in self.traceInfo.items():
                oprot.writeString(kiter211.encode('utf-8') if sys.version_info[0] == 2 else kiter211)
                oprot.writeString(viter212.encode('utf-8') if sys.version_info[0] == 2 else viter212)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.featureReq is not None:
            oprot.writeFieldBegin('featureReq', TType.STRUCT, 2)
            self.featureReq.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.traceInfo is None:
            raise TProtocolException(message='Required field traceInfo is unset!')
        if self.featureReq is None:
            raise TProtocolException(message='Required field featureReq is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByName_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (FeatureRsp, FeatureRsp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = FeatureRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetHistoryFeatureByName_args(object):
    """
    Attributes:
     - traceInfo
     - featureReq
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'traceInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRUCT, 'featureReq', (GetHistoryFeatureByNameReq, GetHistoryFeatureByNameReq.thrift_spec), None, ),  # 2
    )

    def __init__(self, traceInfo=None, featureReq=None,):
        self.traceInfo = traceInfo
        self.featureReq = featureReq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.traceInfo = {}
                    (_ktype214, _vtype215, _size213) = iprot.readMapBegin()
                    for _i217 in range(_size213):
                        _key218 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val219 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.traceInfo[_key218] = _val219
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.featureReq = GetHistoryFeatureByNameReq()
                    self.featureReq.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetHistoryFeatureByName_args')
        if self.traceInfo is not None:
            oprot.writeFieldBegin('traceInfo', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.traceInfo))
            for kiter220, viter221 in self.traceInfo.items():
                oprot.writeString(kiter220.encode('utf-8') if sys.version_info[0] == 2 else kiter220)
                oprot.writeString(viter221.encode('utf-8') if sys.version_info[0] == 2 else viter221)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.featureReq is not None:
            oprot.writeFieldBegin('featureReq', TType.STRUCT, 2)
            self.featureReq.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.traceInfo is None:
            raise TProtocolException(message='Required field traceInfo is unset!')
        if self.featureReq is None:
            raise TProtocolException(message='Required field featureReq is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetHistoryFeatureByName_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (FeatureRsp, FeatureRsp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = FeatureRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetHistoryFeatureByName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByTopic_args(object):
    """
    Attributes:
     - traceInfo
     - featureReq
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'traceInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRUCT, 'featureReq', (GetFeatureByTopicReq, GetFeatureByTopicReq.thrift_spec), None, ),  # 2
    )

    def __init__(self, traceInfo=None, featureReq=None,):
        self.traceInfo = traceInfo
        self.featureReq = featureReq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.traceInfo = {}
                    (_ktype223, _vtype224, _size222) = iprot.readMapBegin()
                    for _i226 in range(_size222):
                        _key227 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val228 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.traceInfo[_key227] = _val228
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.featureReq = GetFeatureByTopicReq()
                    self.featureReq.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByTopic_args')
        if self.traceInfo is not None:
            oprot.writeFieldBegin('traceInfo', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.traceInfo))
            for kiter229, viter230 in self.traceInfo.items():
                oprot.writeString(kiter229.encode('utf-8') if sys.version_info[0] == 2 else kiter229)
                oprot.writeString(viter230.encode('utf-8') if sys.version_info[0] == 2 else viter230)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.featureReq is not None:
            oprot.writeFieldBegin('featureReq', TType.STRUCT, 2)
            self.featureReq.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.traceInfo is None:
            raise TProtocolException(message='Required field traceInfo is unset!')
        if self.featureReq is None:
            raise TProtocolException(message='Required field featureReq is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByTopic_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (FeatureRsp, FeatureRsp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = FeatureRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByTopic_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByTopics_args(object):
    """
    Attributes:
     - traceInfo
     - featureReq
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'traceInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRUCT, 'featureReq', (GetFeatureByTopicsReq, GetFeatureByTopicsReq.thrift_spec), None, ),  # 2
    )

    def __init__(self, traceInfo=None, featureReq=None,):
        self.traceInfo = traceInfo
        self.featureReq = featureReq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.traceInfo = {}
                    (_ktype232, _vtype233, _size231) = iprot.readMapBegin()
                    for _i235 in range(_size231):
                        _key236 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val237 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.traceInfo[_key236] = _val237
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.featureReq = GetFeatureByTopicsReq()
                    self.featureReq.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByTopics_args')
        if self.traceInfo is not None:
            oprot.writeFieldBegin('traceInfo', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.traceInfo))
            for kiter238, viter239 in self.traceInfo.items():
                oprot.writeString(kiter238.encode('utf-8') if sys.version_info[0] == 2 else kiter238)
                oprot.writeString(viter239.encode('utf-8') if sys.version_info[0] == 2 else viter239)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.featureReq is not None:
            oprot.writeFieldBegin('featureReq', TType.STRUCT, 2)
            self.featureReq.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.traceInfo is None:
            raise TProtocolException(message='Required field traceInfo is unset!')
        if self.featureReq is None:
            raise TProtocolException(message='Required field featureReq is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByTopics_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (FeatureRsp, FeatureRsp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = FeatureRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByTopics_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByTopicPartitionIds_args(object):
    """
    Attributes:
     - traceInfo
     - featureReq
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'traceInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRUCT, 'featureReq', (GetFeatureByTopicPartitionIdsReq, GetFeatureByTopicPartitionIdsReq.thrift_spec), None, ),  # 2
    )

    def __init__(self, traceInfo=None, featureReq=None,):
        self.traceInfo = traceInfo
        self.featureReq = featureReq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.traceInfo = {}
                    (_ktype241, _vtype242, _size240) = iprot.readMapBegin()
                    for _i244 in range(_size240):
                        _key245 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val246 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.traceInfo[_key245] = _val246
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.featureReq = GetFeatureByTopicPartitionIdsReq()
                    self.featureReq.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByTopicPartitionIds_args')
        if self.traceInfo is not None:
            oprot.writeFieldBegin('traceInfo', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.traceInfo))
            for kiter247, viter248 in self.traceInfo.items():
                oprot.writeString(kiter247.encode('utf-8') if sys.version_info[0] == 2 else kiter247)
                oprot.writeString(viter248.encode('utf-8') if sys.version_info[0] == 2 else viter248)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.featureReq is not None:
            oprot.writeFieldBegin('featureReq', TType.STRUCT, 2)
            self.featureReq.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.traceInfo is None:
            raise TProtocolException(message='Required field traceInfo is unset!')
        if self.featureReq is None:
            raise TProtocolException(message='Required field featureReq is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByTopicPartitionIds_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (FeatureRsp, FeatureRsp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = FeatureRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByTopicPartitionIds_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpdateFeatureVersion_args(object):
    """
    Attributes:
     - traceInfo
     - featureReq
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'traceInfo', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRUCT, 'featureReq', (UpdateFeatureVersionReq, UpdateFeatureVersionReq.thrift_spec), None, ),  # 2
    )

    def __init__(self, traceInfo=None, featureReq=None,):
        self.traceInfo = traceInfo
        self.featureReq = featureReq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.traceInfo = {}
                    (_ktype250, _vtype251, _size249) = iprot.readMapBegin()
                    for _i253 in range(_size249):
                        _key254 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val255 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.traceInfo[_key254] = _val255
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.featureReq = UpdateFeatureVersionReq()
                    self.featureReq.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UpdateFeatureVersion_args')
        if self.traceInfo is not None:
            oprot.writeFieldBegin('traceInfo', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.traceInfo))
            for kiter256, viter257 in self.traceInfo.items():
                oprot.writeString(kiter256.encode('utf-8') if sys.version_info[0] == 2 else kiter256)
                oprot.writeString(viter257.encode('utf-8') if sys.version_info[0] == 2 else viter257)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.featureReq is not None:
            oprot.writeFieldBegin('featureReq', TType.STRUCT, 2)
            self.featureReq.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.traceInfo is None:
            raise TProtocolException(message='Required field traceInfo is unset!')
        if self.featureReq is None:
            raise TProtocolException(message='Required field featureReq is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpdateFeatureVersion_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (EmptyRsp, EmptyRsp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = EmptyRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UpdateFeatureVersion_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
