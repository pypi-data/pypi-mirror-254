#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys

import featurepalette.errno.ttypes
import featurepalette.response.ttypes
import featurepalette.trace.ttypes
from thrift.protocol.TProtocol import TProtocolException
from thrift.Thrift import (TApplicationException, TException, TFrozenDict,
                           TMessageType, TType)
from thrift.transport import TTransport


class FeatureValueStatus(object):
    INVALID = 0
    PRESENT = 1
    NULL_VALUE = 2
    NOT_FOUND = 3
    OUTSIDE_MAX_AGE = 4
    DEFAULT = 5
    TTL_TIMEOUT = 6

    _VALUES_TO_NAMES = {
        0: "INVALID",
        1: "PRESENT",
        2: "NULL_VALUE",
        3: "NOT_FOUND",
        4: "OUTSIDE_MAX_AGE",
        5: "DEFAULT",
        6: "TTL_TIMEOUT",
    }

    _NAMES_TO_VALUES = {
        "INVALID": 0,
        "PRESENT": 1,
        "NULL_VALUE": 2,
        "NOT_FOUND": 3,
        "OUTSIDE_MAX_AGE": 4,
        "DEFAULT": 5,
        "TTL_TIMEOUT": 6,
    }


class FeatureValueType(object):
    STRING = 0
    INT64 = 1
    DOUBLE = 2
    STRING_LIST = 3
    STRING_MAP = 4
    TIMESERIES = 5
    INT_LIST = 6

    _VALUES_TO_NAMES = {
        0: "STRING",
        1: "INT64",
        2: "DOUBLE",
        3: "STRING_LIST",
        4: "STRING_MAP",
        5: "TIMESERIES",
        6: "INT_LIST",
    }

    _NAMES_TO_VALUES = {
        "STRING": 0,
        "INT64": 1,
        "DOUBLE": 2,
        "STRING_LIST": 3,
        "STRING_MAP": 4,
        "TIMESERIES": 5,
        "INT_LIST": 6,
    }


class FeatureItem(object):
    """
    Attributes:
     - TTL
     - Value
     - CreateTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'TTL', None, None, ),  # 1
        (2, TType.STRING, 'Value', 'UTF8', None, ),  # 2
        (3, TType.I64, 'CreateTime', None, None, ),  # 3
    )

    def __init__(self, TTL=None, Value=None, CreateTime=None,):
        self.TTL = TTL
        self.Value = Value
        self.CreateTime = CreateTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.TTL = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.CreateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FeatureItem')
        if self.TTL is not None:
            oprot.writeFieldBegin('TTL', TType.I64, 1)
            oprot.writeI64(self.TTL)
            oprot.writeFieldEnd()
        if self.Value is not None:
            oprot.writeFieldBegin('Value', TType.STRING, 2)
            oprot.writeString(self.Value.encode('utf-8') if sys.version_info[0] == 2 else self.Value)
            oprot.writeFieldEnd()
        if self.CreateTime is not None:
            oprot.writeFieldBegin('CreateTime', TType.I64, 3)
            oprot.writeI64(self.CreateTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.TTL is None:
            raise TProtocolException(message='Required field TTL is unset!')
        if self.Value is None:
            raise TProtocolException(message='Required field Value is unset!')
        if self.CreateTime is None:
            raise TProtocolException(message='Required field CreateTime is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FeatureInfos(object):
    """
    Attributes:
     - Features
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'Features', (TType.STRING, 'UTF8', TType.STRUCT, (FeatureItem, FeatureItem.thrift_spec), False), None, ),  # 1
    )

    def __init__(self, Features=None,):
        self.Features = Features

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.Features = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = FeatureItem()
                        _val6.read(iprot)
                        self.Features[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FeatureInfos')
        if self.Features is not None:
            oprot.writeFieldBegin('Features', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.Features))
            for kiter7, viter8 in self.Features.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                viter8.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Features is None:
            raise TProtocolException(message='Required field Features is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class TimeseriesValue(object):
    """
    Attributes:
     - ValueType
     - ValueStatus
     - Timestamp
     - StrTime
     - StrValue
     - Int64Value
     - DoubleValue
     - StrListValue
     - StrMapValue
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ValueType', None, None, ),  # 1
        (2, TType.I32, 'ValueStatus', None, None, ),  # 2
        (3, TType.I64, 'Timestamp', None, None, ),  # 3
        (4, TType.STRING, 'StrTime', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'StrValue', 'UTF8', None, ),  # 5
        (6, TType.I64, 'Int64Value', None, None, ),  # 6
        (7, TType.DOUBLE, 'DoubleValue', None, None, ),  # 7
        (8, TType.LIST, 'StrListValue', (TType.STRING, 'UTF8', False), None, ),  # 8
        (9, TType.MAP, 'StrMapValue', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 9
    )

    def __init__(self, ValueType=None, ValueStatus=None, Timestamp=None, StrTime=None, StrValue=None, Int64Value=None, DoubleValue=None, StrListValue=None, StrMapValue=None,):
        self.ValueType = ValueType
        self.ValueStatus = ValueStatus
        self.Timestamp = Timestamp
        self.StrTime = StrTime
        self.StrValue = StrValue
        self.Int64Value = Int64Value
        self.DoubleValue = DoubleValue
        self.StrListValue = StrListValue
        self.StrMapValue = StrMapValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ValueType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.ValueStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.Timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.StrTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.StrValue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.Int64Value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.DoubleValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.StrListValue = []
                    (_etype42, _size39) = iprot.readListBegin()
                    for _i43 in range(_size39):
                        _elem44 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.StrListValue.append(_elem44)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.StrMapValue = {}
                    (_ktype46, _vtype47, _size45) = iprot.readMapBegin()
                    for _i49 in range(_size45):
                        _key50 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val51 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.StrMapValue[_key50] = _val51
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TimeseriesValue')
        if self.ValueType is not None:
            oprot.writeFieldBegin('ValueType', TType.I32, 1)
            oprot.writeI32(self.ValueType)
            oprot.writeFieldEnd()
        if self.ValueStatus is not None:
            oprot.writeFieldBegin('ValueStatus', TType.I32, 2)
            oprot.writeI32(self.ValueStatus)
            oprot.writeFieldEnd()
        if self.Timestamp is not None:
            oprot.writeFieldBegin('Timestamp', TType.I64, 3)
            oprot.writeI64(self.Timestamp)
            oprot.writeFieldEnd()
        if self.StrTime is not None:
            oprot.writeFieldBegin('StrTime', TType.STRING, 4)
            oprot.writeString(self.StrTime.encode('utf-8') if sys.version_info[0] == 2 else self.StrTime)
            oprot.writeFieldEnd()
        if self.StrValue is not None:
            oprot.writeFieldBegin('StrValue', TType.STRING, 5)
            oprot.writeString(self.StrValue.encode('utf-8') if sys.version_info[0] == 2 else self.StrValue)
            oprot.writeFieldEnd()
        if self.Int64Value is not None:
            oprot.writeFieldBegin('Int64Value', TType.I64, 6)
            oprot.writeI64(self.Int64Value)
            oprot.writeFieldEnd()
        if self.DoubleValue is not None:
            oprot.writeFieldBegin('DoubleValue', TType.DOUBLE, 7)
            oprot.writeDouble(self.DoubleValue)
            oprot.writeFieldEnd()
        if self.StrListValue is not None:
            oprot.writeFieldBegin('StrListValue', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.StrListValue))
            for iter52 in self.StrListValue:
                oprot.writeString(iter52.encode('utf-8') if sys.version_info[0] == 2 else iter52)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.StrMapValue is not None:
            oprot.writeFieldBegin('StrMapValue', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.StrMapValue))
            for kiter53, viter54 in self.StrMapValue.items():
                oprot.writeString(kiter53.encode('utf-8') if sys.version_info[0] == 2 else kiter53)
                oprot.writeString(viter54.encode('utf-8') if sys.version_info[0] == 2 else viter54)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ValueType is None:
            raise TProtocolException(message='Required field ValueType is unset!')
        if self.ValueStatus is None:
            raise TProtocolException(message='Required field ValueStatus is unset!')
        if self.Timestamp is None:
            raise TProtocolException(message='Required field Timestamp is unset!')
        if self.StrTime is None:
            raise TProtocolException(message='Required field StrTime is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FeatureValue(object):
    """
    Attributes:
     - ValueType
     - ValueStatus
     - StrValue
     - Int64Value
     - DoubleValue
     - StrListValue
     - StrMapValue
     - OldFeatureId
     - TimeseriesValue
     - intListValue
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ValueType', None, None, ),  # 1
        (2, TType.I32, 'ValueStatus', None, None, ),  # 2
        (3, TType.STRING, 'StrValue', 'UTF8', None, ),  # 3
        (4, TType.I64, 'Int64Value', None, None, ),  # 4
        (5, TType.DOUBLE, 'DoubleValue', None, None, ),  # 5
        (6, TType.LIST, 'StrListValue', (TType.STRING, 'UTF8', False), None, ),  # 6
        (7, TType.MAP, 'StrMapValue', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
        (8, TType.STRING, 'OldFeatureId', 'UTF8', None, ),  # 8
        (9, TType.LIST, 'TimeseriesValue', (TType.STRUCT, (TimeseriesValue, TimeseriesValue.thrift_spec), False), None, ),  # 9
        (10, TType.LIST, 'intListValue', (TType.I64, None, False), None, ),  # 10
    )

    def __init__(self, ValueType=None, ValueStatus=None, StrValue=None, Int64Value=None, DoubleValue=None, StrListValue=None, StrMapValue=None, OldFeatureId=None, TimeseriesValue=None, intListValue=None,):
        self.ValueType = ValueType
        self.ValueStatus = ValueStatus
        self.StrValue = StrValue
        self.Int64Value = Int64Value
        self.DoubleValue = DoubleValue
        self.StrListValue = StrListValue
        self.StrMapValue = StrMapValue
        self.OldFeatureId = OldFeatureId
        self.TimeseriesValue = TimeseriesValue
        self.intListValue = intListValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ValueType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.ValueStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.StrValue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.Int64Value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.DoubleValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.StrListValue = []
                    (_etype12, _size9) = iprot.readListBegin()
                    for _i13 in range(_size9):
                        _elem14 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.StrListValue.append(_elem14)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.StrMapValue = {}
                    (_ktype16, _vtype17, _size15) = iprot.readMapBegin()
                    for _i19 in range(_size15):
                        _key20 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val21 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.StrMapValue[_key20] = _val21
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.OldFeatureId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.TimeseriesValue = []
                    (_etype25, _size22) = iprot.readListBegin()
                    for _i26 in range(_size22):
                        _elem27 = TimeseriesValue()
                        _elem27.read(iprot)
                        self.TimeseriesValue.append(_elem27)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.intListValue = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readI64()
                        self.intListValue.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FeatureValue')
        if self.ValueType is not None:
            oprot.writeFieldBegin('ValueType', TType.I32, 1)
            oprot.writeI32(self.ValueType)
            oprot.writeFieldEnd()
        if self.ValueStatus is not None:
            oprot.writeFieldBegin('ValueStatus', TType.I32, 2)
            oprot.writeI32(self.ValueStatus)
            oprot.writeFieldEnd()
        if self.StrValue is not None:
            oprot.writeFieldBegin('StrValue', TType.STRING, 3)
            oprot.writeString(self.StrValue.encode('utf-8') if sys.version_info[0] == 2 else self.StrValue)
            oprot.writeFieldEnd()
        if self.Int64Value is not None:
            oprot.writeFieldBegin('Int64Value', TType.I64, 4)
            oprot.writeI64(self.Int64Value)
            oprot.writeFieldEnd()
        if self.DoubleValue is not None:
            oprot.writeFieldBegin('DoubleValue', TType.DOUBLE, 5)
            oprot.writeDouble(self.DoubleValue)
            oprot.writeFieldEnd()
        if self.StrListValue is not None:
            oprot.writeFieldBegin('StrListValue', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.StrListValue))
            for iter34 in self.StrListValue:
                oprot.writeString(iter34.encode('utf-8') if sys.version_info[0] == 2 else iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.StrMapValue is not None:
            oprot.writeFieldBegin('StrMapValue', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.StrMapValue))
            for kiter35, viter36 in self.StrMapValue.items():
                oprot.writeString(kiter35.encode('utf-8') if sys.version_info[0] == 2 else kiter35)
                oprot.writeString(viter36.encode('utf-8') if sys.version_info[0] == 2 else viter36)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.OldFeatureId is not None:
            oprot.writeFieldBegin('OldFeatureId', TType.STRING, 8)
            oprot.writeString(self.OldFeatureId.encode('utf-8') if sys.version_info[0] == 2 else self.OldFeatureId)
            oprot.writeFieldEnd()
        if self.TimeseriesValue is not None:
            oprot.writeFieldBegin('TimeseriesValue', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.TimeseriesValue))
            for iter37 in self.TimeseriesValue:
                iter37.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.intListValue is not None:
            oprot.writeFieldBegin('intListValue', TType.LIST, 10)
            oprot.writeListBegin(TType.I64, len(self.intListValue))
            for iter38 in self.intListValue:
                oprot.writeI64(iter38)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ValueType is None:
            raise TProtocolException(message='Required field ValueType is unset!')
        if self.ValueStatus is None:
            raise TProtocolException(message='Required field ValueStatus is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class FeatureName(object):
    """
    Attributes:
     - Entity
     - Group
     - Key
     - WrapperFunc
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'Entity', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'Group', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'Key', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'WrapperFunc', 'UTF8', None, ),  # 4
    )

    def __init__(self, Entity=None, Group=None, Key=None, WrapperFunc=None,):
        self.Entity = Entity
        self.Group = Group
        self.Key = Key
        self.WrapperFunc = WrapperFunc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Entity = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.WrapperFunc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FeatureName')
        if self.Entity is not None:
            oprot.writeFieldBegin('Entity', TType.STRING, 1)
            oprot.writeString(self.Entity.encode('utf-8') if sys.version_info[0] == 2 else self.Entity)
            oprot.writeFieldEnd()
        if self.Group is not None:
            oprot.writeFieldBegin('Group', TType.STRING, 2)
            oprot.writeString(self.Group.encode('utf-8') if sys.version_info[0] == 2 else self.Group)
            oprot.writeFieldEnd()
        if self.Key is not None:
            oprot.writeFieldBegin('Key', TType.STRING, 3)
            oprot.writeString(self.Key.encode('utf-8') if sys.version_info[0] == 2 else self.Key)
            oprot.writeFieldEnd()
        if self.WrapperFunc is not None:
            oprot.writeFieldBegin('WrapperFunc', TType.STRING, 4)
            oprot.writeString(self.WrapperFunc.encode('utf-8') if sys.version_info[0] == 2 else self.WrapperFunc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Entity is None:
            raise TProtocolException(message='Required field Entity is unset!')
        if self.Group is None:
            raise TProtocolException(message='Required field Group is unset!')
        if self.Key is None:
            raise TProtocolException(message='Required field Key is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByNameReq(object):
    """
    Attributes:
     - IDs
     - Features
     - CityID
     - channel
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'IDs', (TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.LIST, 'Features', (TType.STRUCT, (FeatureName, FeatureName.thrift_spec), False), None, ),  # 2
        (3, TType.STRING, 'CityID', 'UTF8', None, ),  # 3
        (4, TType.I64, 'channel', None, None, ),  # 4
    )

    def __init__(self, IDs=None, Features=None, CityID=None, channel=None,):
        self.IDs = IDs
        self.Features = Features
        self.CityID = CityID
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.IDs = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.IDs.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Features = []
                    (_etype64, _size61) = iprot.readListBegin()
                    for _i65 in range(_size61):
                        _elem66 = FeatureName()
                        _elem66.read(iprot)
                        self.Features.append(_elem66)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.CityID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.channel = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByNameReq')
        if self.IDs is not None:
            oprot.writeFieldBegin('IDs', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.IDs))
            for iter67 in self.IDs:
                oprot.writeString(iter67.encode('utf-8') if sys.version_info[0] == 2 else iter67)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Features is not None:
            oprot.writeFieldBegin('Features', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.Features))
            for iter68 in self.Features:
                iter68.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.CityID is not None:
            oprot.writeFieldBegin('CityID', TType.STRING, 3)
            oprot.writeString(self.CityID.encode('utf-8') if sys.version_info[0] == 2 else self.CityID)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I64, 4)
            oprot.writeI64(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.IDs is None:
            raise TProtocolException(message='Required field IDs is unset!')
        if self.Features is None:
            raise TProtocolException(message='Required field Features is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetHistoryFeatureByNameReq(object):
    """
    Attributes:
     - IDs
     - Features
     - StartTime
     - EndTime
     - CityID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'IDs', (TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.LIST, 'Features', (TType.STRUCT, (FeatureName, FeatureName.thrift_spec), False), None, ),  # 2
        (3, TType.I64, 'StartTime', None, None, ),  # 3
        (4, TType.I64, 'EndTime', None, None, ),  # 4
        (5, TType.STRING, 'CityID', 'UTF8', None, ),  # 5
    )

    def __init__(self, IDs=None, Features=None, StartTime=None, EndTime=None, CityID=None,):
        self.IDs = IDs
        self.Features = Features
        self.StartTime = StartTime
        self.EndTime = EndTime
        self.CityID = CityID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.IDs = []
                    (_etype72, _size69) = iprot.readListBegin()
                    for _i73 in range(_size69):
                        _elem74 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.IDs.append(_elem74)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Features = []
                    (_etype78, _size75) = iprot.readListBegin()
                    for _i79 in range(_size75):
                        _elem80 = FeatureName()
                        _elem80.read(iprot)
                        self.Features.append(_elem80)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.StartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.EndTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.CityID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetHistoryFeatureByNameReq')
        if self.IDs is not None:
            oprot.writeFieldBegin('IDs', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.IDs))
            for iter81 in self.IDs:
                oprot.writeString(iter81.encode('utf-8') if sys.version_info[0] == 2 else iter81)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Features is not None:
            oprot.writeFieldBegin('Features', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.Features))
            for iter82 in self.Features:
                iter82.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.StartTime is not None:
            oprot.writeFieldBegin('StartTime', TType.I64, 3)
            oprot.writeI64(self.StartTime)
            oprot.writeFieldEnd()
        if self.EndTime is not None:
            oprot.writeFieldBegin('EndTime', TType.I64, 4)
            oprot.writeI64(self.EndTime)
            oprot.writeFieldEnd()
        if self.CityID is not None:
            oprot.writeFieldBegin('CityID', TType.STRING, 5)
            oprot.writeString(self.CityID.encode('utf-8') if sys.version_info[0] == 2 else self.CityID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.IDs is None:
            raise TProtocolException(message='Required field IDs is unset!')
        if self.Features is None:
            raise TProtocolException(message='Required field Features is unset!')
        if self.StartTime is None:
            raise TProtocolException(message='Required field StartTime is unset!')
        if self.EndTime is None:
            raise TProtocolException(message='Required field EndTime is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByTopicReq(object):
    """
    Attributes:
     - IDs
     - Topic
     - CityID
     - channel
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'IDs', (TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRING, 'Topic', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'CityID', 'UTF8', None, ),  # 3
        (4, TType.I64, 'channel', None, None, ),  # 4
    )

    def __init__(self, IDs=None, Topic=None, CityID=None, channel=None,):
        self.IDs = IDs
        self.Topic = Topic
        self.CityID = CityID
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.IDs = []
                    (_etype86, _size83) = iprot.readListBegin()
                    for _i87 in range(_size83):
                        _elem88 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.IDs.append(_elem88)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Topic = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.CityID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.channel = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByTopicReq')
        if self.IDs is not None:
            oprot.writeFieldBegin('IDs', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.IDs))
            for iter89 in self.IDs:
                oprot.writeString(iter89.encode('utf-8') if sys.version_info[0] == 2 else iter89)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Topic is not None:
            oprot.writeFieldBegin('Topic', TType.STRING, 2)
            oprot.writeString(self.Topic.encode('utf-8') if sys.version_info[0] == 2 else self.Topic)
            oprot.writeFieldEnd()
        if self.CityID is not None:
            oprot.writeFieldBegin('CityID', TType.STRING, 3)
            oprot.writeString(self.CityID.encode('utf-8') if sys.version_info[0] == 2 else self.CityID)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I64, 4)
            oprot.writeI64(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.IDs is None:
            raise TProtocolException(message='Required field IDs is unset!')
        if self.Topic is None:
            raise TProtocolException(message='Required field Topic is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByTopicsReq(object):
    """
    Attributes:
     - PartitionObjectIds
     - Topics
     - CityID
     - channel
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'PartitionObjectIds', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 1
        (2, TType.LIST, 'Topics', (TType.STRING, 'UTF8', False), None, ),  # 2
        (3, TType.STRING, 'CityID', 'UTF8', None, ),  # 3
        (4, TType.I64, 'channel', None, None, ),  # 4
    )

    def __init__(self, PartitionObjectIds=None, Topics=None, CityID=None, channel=None,):
        self.PartitionObjectIds = PartitionObjectIds
        self.Topics = Topics
        self.CityID = CityID
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.PartitionObjectIds = []
                    (_etype93, _size90) = iprot.readListBegin()
                    for _i94 in range(_size90):
                        _elem95 = []
                        (_etype99, _size96) = iprot.readListBegin()
                        for _i100 in range(_size96):
                            _elem101 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem95.append(_elem101)
                        iprot.readListEnd()
                        self.PartitionObjectIds.append(_elem95)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Topics = []
                    (_etype105, _size102) = iprot.readListBegin()
                    for _i106 in range(_size102):
                        _elem107 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Topics.append(_elem107)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.CityID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.channel = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByTopicsReq')
        if self.PartitionObjectIds is not None:
            oprot.writeFieldBegin('PartitionObjectIds', TType.LIST, 1)
            oprot.writeListBegin(TType.LIST, len(self.PartitionObjectIds))
            for iter108 in self.PartitionObjectIds:
                oprot.writeListBegin(TType.STRING, len(iter108))
                for iter109 in iter108:
                    oprot.writeString(iter109.encode('utf-8') if sys.version_info[0] == 2 else iter109)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Topics is not None:
            oprot.writeFieldBegin('Topics', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.Topics))
            for iter110 in self.Topics:
                oprot.writeString(iter110.encode('utf-8') if sys.version_info[0] == 2 else iter110)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.CityID is not None:
            oprot.writeFieldBegin('CityID', TType.STRING, 3)
            oprot.writeString(self.CityID.encode('utf-8') if sys.version_info[0] == 2 else self.CityID)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I64, 4)
            oprot.writeI64(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.PartitionObjectIds is None:
            raise TProtocolException(message='Required field PartitionObjectIds is unset!')
        if self.Topics is None:
            raise TProtocolException(message='Required field Topics is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFeatureByTopicPartitionIdsReq(object):
    """
    Attributes:
     - GroupedIds
     - Topic
     - CityID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'GroupedIds', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 1
        (2, TType.STRING, 'Topic', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'CityID', 'UTF8', None, ),  # 3
    )

    def __init__(self, GroupedIds=None, Topic=None, CityID=None,):
        self.GroupedIds = GroupedIds
        self.Topic = Topic
        self.CityID = CityID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.GroupedIds = {}
                    (_ktype112, _vtype113, _size111) = iprot.readMapBegin()
                    for _i115 in range(_size111):
                        _key116 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val117 = []
                        (_etype121, _size118) = iprot.readListBegin()
                        for _i122 in range(_size118):
                            _elem123 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val117.append(_elem123)
                        iprot.readListEnd()
                        self.GroupedIds[_key116] = _val117
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Topic = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.CityID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetFeatureByTopicPartitionIdsReq')
        if self.GroupedIds is not None:
            oprot.writeFieldBegin('GroupedIds', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.GroupedIds))
            for kiter124, viter125 in self.GroupedIds.items():
                oprot.writeString(kiter124.encode('utf-8') if sys.version_info[0] == 2 else kiter124)
                oprot.writeListBegin(TType.STRING, len(viter125))
                for iter126 in viter125:
                    oprot.writeString(iter126.encode('utf-8') if sys.version_info[0] == 2 else iter126)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.Topic is not None:
            oprot.writeFieldBegin('Topic', TType.STRING, 2)
            oprot.writeString(self.Topic.encode('utf-8') if sys.version_info[0] == 2 else self.Topic)
            oprot.writeFieldEnd()
        if self.CityID is not None:
            oprot.writeFieldBegin('CityID', TType.STRING, 3)
            oprot.writeString(self.CityID.encode('utf-8') if sys.version_info[0] == 2 else self.CityID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.GroupedIds is None:
            raise TProtocolException(message='Required field GroupedIds is unset!')
        if self.Topic is None:
            raise TProtocolException(message='Required field Topic is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpdateFeatureVersionReq(object):
    """
    Attributes:
     - IDs
     - Features
     - Version
     - AreaType
     - CityID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'IDs', (TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.LIST, 'Features', (TType.STRUCT, (FeatureName, FeatureName.thrift_spec), False), None, ),  # 2
        (3, TType.I64, 'Version', None, None, ),  # 3
        (4, TType.BYTE, 'AreaType', None, None, ),  # 4
        (5, TType.STRING, 'CityID', 'UTF8', None, ),  # 5
    )

    def __init__(self, IDs=None, Features=None, Version=None, AreaType=None, CityID=None,):
        self.IDs = IDs
        self.Features = Features
        self.Version = Version
        self.AreaType = AreaType
        self.CityID = CityID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.IDs = []
                    (_etype130, _size127) = iprot.readListBegin()
                    for _i131 in range(_size127):
                        _elem132 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.IDs.append(_elem132)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Features = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = FeatureName()
                        _elem138.read(iprot)
                        self.Features.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.Version = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.AreaType = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.CityID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UpdateFeatureVersionReq')
        if self.IDs is not None:
            oprot.writeFieldBegin('IDs', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.IDs))
            for iter139 in self.IDs:
                oprot.writeString(iter139.encode('utf-8') if sys.version_info[0] == 2 else iter139)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Features is not None:
            oprot.writeFieldBegin('Features', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.Features))
            for iter140 in self.Features:
                iter140.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Version is not None:
            oprot.writeFieldBegin('Version', TType.I64, 3)
            oprot.writeI64(self.Version)
            oprot.writeFieldEnd()
        if self.AreaType is not None:
            oprot.writeFieldBegin('AreaType', TType.BYTE, 4)
            oprot.writeByte(self.AreaType)
            oprot.writeFieldEnd()
        if self.CityID is not None:
            oprot.writeFieldBegin('CityID', TType.STRING, 5)
            oprot.writeString(self.CityID.encode('utf-8') if sys.version_info[0] == 2 else self.CityID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.IDs is None:
            raise TProtocolException(message='Required field IDs is unset!')
        if self.Features is None:
            raise TProtocolException(message='Required field Features is unset!')
        if self.Version is None:
            raise TProtocolException(message='Required field Version is unset!')
        if self.AreaType is None:
            raise TProtocolException(message='Required field AreaType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FeatureRsp(object):
    """
    Attributes:
     - header
     - Values
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'header', (featurepalette.response.ttypes.ResponseHeader, featurepalette.response.ttypes.ResponseHeader.thrift_spec), None, ),  # 1
        (2, TType.MAP, 'Values', (TType.STRING, 'UTF8', TType.MAP, (TType.STRING, 'UTF8', TType.STRUCT, (FeatureValue, FeatureValue.thrift_spec), False), False), None, ),  # 2
    )

    def __init__(self, header=None, Values=None,):
        self.header = header
        self.Values = Values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.header = featurepalette.response.ttypes.ResponseHeader()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.Values = {}
                    (_ktype142, _vtype143, _size141) = iprot.readMapBegin()
                    for _i145 in range(_size141):
                        _key146 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val147 = {}
                        (_ktype149, _vtype150, _size148) = iprot.readMapBegin()
                        for _i152 in range(_size148):
                            _key153 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val154 = FeatureValue()
                            _val154.read(iprot)
                            _val147[_key153] = _val154
                        iprot.readMapEnd()
                        self.Values[_key146] = _val147
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FeatureRsp')
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 1)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        if self.Values is not None:
            oprot.writeFieldBegin('Values', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.Values))
            for kiter155, viter156 in self.Values.items():
                oprot.writeString(kiter155.encode('utf-8') if sys.version_info[0] == 2 else kiter155)
                oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter156))
                for kiter157, viter158 in viter156.items():
                    oprot.writeString(kiter157.encode('utf-8') if sys.version_info[0] == 2 else kiter157)
                    viter158.write(oprot)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.header is None:
            raise TProtocolException(message='Required field header is unset!')
        if self.Values is None:
            raise TProtocolException(message='Required field Values is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EmptyRsp(object):
    """
    Attributes:
     - header
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'header', (featurepalette.response.ttypes.ResponseHeader, featurepalette.response.ttypes.ResponseHeader.thrift_spec), None, ),  # 1
    )

    def __init__(self, header=None,):
        self.header = header

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.header = featurepalette.response.ttypes.ResponseHeader()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('EmptyRsp')
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 1)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.header is None:
            raise TProtocolException(message='Required field header is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IncrFeatureReq(object):
    """
    Attributes:
     - Entity
     - Group
     - Key
     - ID
     - Value
     - timestamp
     - CityId
     - CountyId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'Entity', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'Group', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'Key', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'ID', 'UTF8', None, ),  # 4
        (5, TType.I64, 'Value', None, None, ),  # 5
        (6, TType.I64, 'timestamp', None, None, ),  # 6
        (7, TType.STRING, 'CityId', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'CountyId', 'UTF8', None, ),  # 8
    )

    def __init__(self, Entity=None, Group=None, Key=None, ID=None, Value=None, timestamp=None, CityId=None, CountyId=None,):
        self.Entity = Entity
        self.Group = Group
        self.Key = Key
        self.ID = ID
        self.Value = Value
        self.timestamp = timestamp
        self.CityId = CityId
        self.CountyId = CountyId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Entity = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.Value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.CityId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.CountyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('IncrFeatureReq')
        if self.Entity is not None:
            oprot.writeFieldBegin('Entity', TType.STRING, 1)
            oprot.writeString(self.Entity.encode('utf-8') if sys.version_info[0] == 2 else self.Entity)
            oprot.writeFieldEnd()
        if self.Group is not None:
            oprot.writeFieldBegin('Group', TType.STRING, 2)
            oprot.writeString(self.Group.encode('utf-8') if sys.version_info[0] == 2 else self.Group)
            oprot.writeFieldEnd()
        if self.Key is not None:
            oprot.writeFieldBegin('Key', TType.STRING, 3)
            oprot.writeString(self.Key.encode('utf-8') if sys.version_info[0] == 2 else self.Key)
            oprot.writeFieldEnd()
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 4)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Value is not None:
            oprot.writeFieldBegin('Value', TType.I64, 5)
            oprot.writeI64(self.Value)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 6)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.CityId is not None:
            oprot.writeFieldBegin('CityId', TType.STRING, 7)
            oprot.writeString(self.CityId.encode('utf-8') if sys.version_info[0] == 2 else self.CityId)
            oprot.writeFieldEnd()
        if self.CountyId is not None:
            oprot.writeFieldBegin('CountyId', TType.STRING, 8)
            oprot.writeString(self.CountyId.encode('utf-8') if sys.version_info[0] == 2 else self.CountyId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Entity is None:
            raise TProtocolException(message='Required field Entity is unset!')
        if self.Group is None:
            raise TProtocolException(message='Required field Group is unset!')
        if self.Key is None:
            raise TProtocolException(message='Required field Key is unset!')
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.Value is None:
            raise TProtocolException(message='Required field Value is unset!')
        if self.timestamp is None:
            raise TProtocolException(message='Required field timestamp is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpdateFeatureReq(object):
    """
    Attributes:
     - Entity
     - Group
     - ID
     - FeatureValueMap
     - timestamp
     - CityId
     - CountyId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'Entity', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'Group', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'ID', 'UTF8', None, ),  # 3
        (4, TType.MAP, 'FeatureValueMap', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.I64, 'timestamp', None, None, ),  # 5
        (6, TType.STRING, 'CityId', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'CountyId', 'UTF8', None, ),  # 7
    )

    def __init__(self, Entity=None, Group=None, ID=None, FeatureValueMap=None, timestamp=None, CityId=None, CountyId=None,):
        self.Entity = Entity
        self.Group = Group
        self.ID = ID
        self.FeatureValueMap = FeatureValueMap
        self.timestamp = timestamp
        self.CityId = CityId
        self.CountyId = CountyId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Entity = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.FeatureValueMap = {}
                    (_ktype160, _vtype161, _size159) = iprot.readMapBegin()
                    for _i163 in range(_size159):
                        _key164 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val165 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.FeatureValueMap[_key164] = _val165
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.CityId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.CountyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UpdateFeatureReq')
        if self.Entity is not None:
            oprot.writeFieldBegin('Entity', TType.STRING, 1)
            oprot.writeString(self.Entity.encode('utf-8') if sys.version_info[0] == 2 else self.Entity)
            oprot.writeFieldEnd()
        if self.Group is not None:
            oprot.writeFieldBegin('Group', TType.STRING, 2)
            oprot.writeString(self.Group.encode('utf-8') if sys.version_info[0] == 2 else self.Group)
            oprot.writeFieldEnd()
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 3)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.FeatureValueMap is not None:
            oprot.writeFieldBegin('FeatureValueMap', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.FeatureValueMap))
            for kiter166, viter167 in self.FeatureValueMap.items():
                oprot.writeString(kiter166.encode('utf-8') if sys.version_info[0] == 2 else kiter166)
                oprot.writeString(viter167.encode('utf-8') if sys.version_info[0] == 2 else viter167)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 5)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.CityId is not None:
            oprot.writeFieldBegin('CityId', TType.STRING, 6)
            oprot.writeString(self.CityId.encode('utf-8') if sys.version_info[0] == 2 else self.CityId)
            oprot.writeFieldEnd()
        if self.CountyId is not None:
            oprot.writeFieldBegin('CountyId', TType.STRING, 7)
            oprot.writeString(self.CountyId.encode('utf-8') if sys.version_info[0] == 2 else self.CountyId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Entity is None:
            raise TProtocolException(message='Required field Entity is unset!')
        if self.Group is None:
            raise TProtocolException(message='Required field Group is unset!')
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.FeatureValueMap is None:
            raise TProtocolException(message='Required field FeatureValueMap is unset!')
        if self.timestamp is None:
            raise TProtocolException(message='Required field timestamp is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InsertFeatureForTESTReq(object):
    """
    Attributes:
     - Entity
     - Group
     - ID
     - FeatureValueMap
     - timestamp
     - CityId
     - CountyId
     - ttlAddSecond
     - ticket
     - channel
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'Entity', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'Group', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'ID', 'UTF8', None, ),  # 3
        (4, TType.MAP, 'FeatureValueMap', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.I64, 'timestamp', None, None, ),  # 5
        (6, TType.STRING, 'CityId', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'CountyId', 'UTF8', None, ),  # 7
        (8, TType.I64, 'ttlAddSecond', None, None, ),  # 8
        (9, TType.STRING, 'ticket', 'UTF8', None, ),  # 9
        (10, TType.I64, 'channel', None, None, ),  # 10
    )

    def __init__(self, Entity=None, Group=None, ID=None, FeatureValueMap=None, timestamp=None, CityId=None, CountyId=None, ttlAddSecond=None, ticket=None, channel=None,):
        self.Entity = Entity
        self.Group = Group
        self.ID = ID
        self.FeatureValueMap = FeatureValueMap
        self.timestamp = timestamp
        self.CityId = CityId
        self.CountyId = CountyId
        self.ttlAddSecond = ttlAddSecond
        self.ticket = ticket
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Entity = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.FeatureValueMap = {}
                    (_ktype169, _vtype170, _size168) = iprot.readMapBegin()
                    for _i172 in range(_size168):
                        _key173 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val174 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.FeatureValueMap[_key173] = _val174
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.CityId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.CountyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.ttlAddSecond = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ticket = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.channel = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('InsertFeatureForTESTReq')
        if self.Entity is not None:
            oprot.writeFieldBegin('Entity', TType.STRING, 1)
            oprot.writeString(self.Entity.encode('utf-8') if sys.version_info[0] == 2 else self.Entity)
            oprot.writeFieldEnd()
        if self.Group is not None:
            oprot.writeFieldBegin('Group', TType.STRING, 2)
            oprot.writeString(self.Group.encode('utf-8') if sys.version_info[0] == 2 else self.Group)
            oprot.writeFieldEnd()
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 3)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.FeatureValueMap is not None:
            oprot.writeFieldBegin('FeatureValueMap', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.FeatureValueMap))
            for kiter175, viter176 in self.FeatureValueMap.items():
                oprot.writeString(kiter175.encode('utf-8') if sys.version_info[0] == 2 else kiter175)
                oprot.writeString(viter176.encode('utf-8') if sys.version_info[0] == 2 else viter176)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 5)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.CityId is not None:
            oprot.writeFieldBegin('CityId', TType.STRING, 6)
            oprot.writeString(self.CityId.encode('utf-8') if sys.version_info[0] == 2 else self.CityId)
            oprot.writeFieldEnd()
        if self.CountyId is not None:
            oprot.writeFieldBegin('CountyId', TType.STRING, 7)
            oprot.writeString(self.CountyId.encode('utf-8') if sys.version_info[0] == 2 else self.CountyId)
            oprot.writeFieldEnd()
        if self.ttlAddSecond is not None:
            oprot.writeFieldBegin('ttlAddSecond', TType.I64, 8)
            oprot.writeI64(self.ttlAddSecond)
            oprot.writeFieldEnd()
        if self.ticket is not None:
            oprot.writeFieldBegin('ticket', TType.STRING, 9)
            oprot.writeString(self.ticket.encode('utf-8') if sys.version_info[0] == 2 else self.ticket)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I64, 10)
            oprot.writeI64(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Entity is None:
            raise TProtocolException(message='Required field Entity is unset!')
        if self.Group is None:
            raise TProtocolException(message='Required field Group is unset!')
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.FeatureValueMap is None:
            raise TProtocolException(message='Required field FeatureValueMap is unset!')
        if self.timestamp is None:
            raise TProtocolException(message='Required field timestamp is unset!')
        if self.ticket is None:
            raise TProtocolException(message='Required field ticket is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimpleResponse(object):
    """
    Attributes:
     - header
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'header', (featurepalette.response.ttypes.ResponseHeader, featurepalette.response.ttypes.ResponseHeader.thrift_spec), None, ),  # 1
    )

    def __init__(self, header=None,):
        self.header = header

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.header = featurepalette.response.ttypes.ResponseHeader()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimpleResponse')
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 1)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.header is None:
            raise TProtocolException(message='Required field header is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
