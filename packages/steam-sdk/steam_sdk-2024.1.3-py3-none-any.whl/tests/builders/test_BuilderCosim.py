import os
import unittest
from pathlib import Path

import matplotlib.pyplot as plt

from steam_sdk.builders.BuilderCosim import BuilderCosim
from steam_sdk.utils.delete_if_existing import delete_if_existing


class TestBuilderModel(unittest.TestCase):

    def setUp(self) -> None:
        """
            This function is executed before each test in this class
        """
        self.current_path = os.path.dirname(__file__)
        os.chdir(os.path.dirname(__file__))  # move the directory where this file is located
        print('\nCurrent folder:          {}'.format(self.current_path))
        print('Test is run from folder: {}'.format(os.getcwd()))

    def tearDown(self) -> None:
        """
            This function is executed after each test in this class
        """
        os.chdir(self.current_path)  # go back to initial folder

        # Close all figures
        plt.close('all')

    def test_BuilderCosim_initialization(self):
        """
            Check that an exception is raised when BuilderCosim object is initialized without providing an input yaml file
        """
        with self.assertRaises(Exception) as context:
            BuilderCosim(file_model_data=None, software=None, flag_build=False, verbose=True)
        self.assertTrue('No file_model_data .yaml input file provided.' in str(context.exception))
        print(f'This exception was correctly raised: {context.exception}')


    def test_BuilderCosim_readYaml_REFERENCE(self):
        """
            Check that DataLEDET object can be initialized and can read the reference blank yaml file generated by DataModelMagnet()
        """
        # arrange
        name_reference_file = 'data_model_cosim_REFERENCE_all_keys.yaml'
        file_path = os.path.dirname(__file__)  # path to the parent directory (with respect to this file)
        reference_file = os.path.join(os.path.dirname(file_path), 'data', 'references', name_reference_file)
        print(f"Selected reference_file: {reference_file}")

        # act
        BC = BuilderCosim(file_model_data=reference_file, software=None, flag_build=True, verbose=True)

        # assert - Input yaml file was read and set to BuilderCosim attribute
        self.assertTrue(hasattr(BC, 'cosim_data'))

    def test_BuilderCosim_pathSettingsDefault(self):
        """
            Check that BuilderCosim object can be initialized and path_settings is set by default as expected
        """
        # arrange
        name_reference_file = 'data_model_cosim_REFERENCE_all_keys.yaml'
        file_path = os.path.dirname(__file__)  # path to the parent directory (with respect to this file)
        reference_file = os.path.join(os.path.dirname(file_path), 'data', 'references', name_reference_file)

        path_current_folder = Path(os.getcwd())
        expected_path_settings = path_current_folder

        # act
        BC = BuilderCosim(file_model_data=reference_file, software=None, flag_build=True, verbose=True)
        set_path_settings = BC.path_settings

        # assert
        self.assertEqual(expected_path_settings, set_path_settings)

    def test_BuilderCosim_COSIM_multiple(self):
        """
            Check that BuilderCosim object can be initialized, read a real model input yaml file, and generate the correct COSIM model

            :param cosim_name: can be any co-simulation model name in the library
        """
        # arrange
        cosim_names = ['IPQ_2magnets']

        # act+assert
        for cosim_name in cosim_names:
            print('Co-simulation: {}'.format(cosim_name))
            self._compare_to_reference_COSIM(cosim_name, verbose=True)


    ###############################################################################################
    # Helper methods
    def _compare_to_reference_COSIM(self, cosim_name, verbose=False, flag_plot_all=False, magnet_type='multipole'):
        """
            Helper method called by other methods
            Check that BuilderCosim object can be initialized, read a model input yaml file, and generate a COSIM model
            This test checks:
             - TODO
             - TODO
             - TODO

            cosim_name: can be any co-simulation model name in the library
        """

        # arrange
        max_relative_error = 1e-6  # Maximum accepted relative error for excel, csv and map2d file comparison

        file_model_data = os.path.join('model_library', 'cosims', cosim_name, 'input', 'modelData_' + cosim_name + '.yaml')
        output_path = os.path.join('model_library', 'cosims', cosim_name, 'output')
        # input_file_REFERENCE = os.path.join('references', 'cosims', cosim_name, cosim_name + '_REFERENCE.xlsx')
        # input_file_GENERATED = os.path.join('model_library', 'cosims', cosim_name, 'output', cosim_name + '.xlsx')
        delete_if_existing(output_path, verbose=True)

        # act
        BC = BuilderCosim(file_model_data=file_model_data, software=['COSIM'], flag_build=True, output_path=output_path, verbose=verbose)
        # TODO Define logic for the output path (should it come from BuilderCosim or DataCosim?)

        # assert
        # TODO Add proper asserts
