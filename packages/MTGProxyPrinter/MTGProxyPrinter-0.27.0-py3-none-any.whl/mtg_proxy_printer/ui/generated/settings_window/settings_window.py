# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/tmp/build-via-sdist-s586jdi0/MTGProxyPrinter-0.27.0/mtg_proxy_printer/resources/ui/settings_window/settings_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_SettingsWindow(object):
    def setupUi(self, SettingsWindow):
        SettingsWindow.setObjectName("SettingsWindow")
        SettingsWindow.setWindowModality(QtCore.Qt.ApplicationModal)
        SettingsWindow.resize(612, 734)
        self.dialog_layout = QtWidgets.QVBoxLayout(SettingsWindow)
        self.dialog_layout.setObjectName("dialog_layout")
        self.tab_widget = QtWidgets.QTabWidget(SettingsWindow)
        self.tab_widget.setObjectName("tab_widget")
        self.tab_general = QtWidgets.QWidget()
        self.tab_general.setObjectName("tab_general")
        self.gridLayout = QtWidgets.QGridLayout(self.tab_general)
        self.gridLayout.setObjectName("gridLayout")
        self.preferred_language_label = QtWidgets.QLabel(self.tab_general)
        self.preferred_language_label.setObjectName("preferred_language_label")
        self.gridLayout.addWidget(self.preferred_language_label, 1, 0, 1, 1)
        self.preferred_language_combo_box = QtWidgets.QComboBox(self.tab_general)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.preferred_language_combo_box.sizePolicy().hasHeightForWidth())
        self.preferred_language_combo_box.setSizePolicy(sizePolicy)
        self.preferred_language_combo_box.setObjectName("preferred_language_combo_box")
        self.gridLayout.addWidget(self.preferred_language_combo_box, 1, 1, 1, 1)
        self.look_and_feel_settings_group_box = QtWidgets.QGroupBox(self.tab_general)
        self.look_and_feel_settings_group_box.setObjectName("look_and_feel_settings_group_box")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.look_and_feel_settings_group_box)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.add_card_widget_style_label = QtWidgets.QLabel(self.look_and_feel_settings_group_box)
        self.add_card_widget_style_label.setObjectName("add_card_widget_style_label")
        self.gridLayout_2.addWidget(self.add_card_widget_style_label, 0, 0, 1, 1)
        self.add_card_widget_style_combo_box = QtWidgets.QComboBox(self.look_and_feel_settings_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.add_card_widget_style_combo_box.sizePolicy().hasHeightForWidth())
        self.add_card_widget_style_combo_box.setSizePolicy(sizePolicy)
        self.add_card_widget_style_combo_box.setObjectName("add_card_widget_style_combo_box")
        self.gridLayout_2.addWidget(self.add_card_widget_style_combo_box, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.look_and_feel_settings_group_box, 2, 0, 1, 2)
        self.double_faced_cards_group_box = QtWidgets.QGroupBox(self.tab_general)
        self.double_faced_cards_group_box.setObjectName("double_faced_cards_group_box")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.double_faced_cards_group_box)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.automatically_add_opposing_faces = QtWidgets.QCheckBox(self.double_faced_cards_group_box)
        self.automatically_add_opposing_faces.setObjectName("automatically_add_opposing_faces")
        self.verticalLayout_5.addWidget(self.automatically_add_opposing_faces)
        self.gridLayout.addWidget(self.double_faced_cards_group_box, 3, 0, 1, 2)
        self.default_paths_group_box = QtWidgets.QGroupBox(self.tab_general)
        self.default_paths_group_box.setObjectName("default_paths_group_box")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.default_paths_group_box)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.pdf_save_path = QtWidgets.QLineEdit(self.default_paths_group_box)
        self.pdf_save_path.setInputMethodHints(QtCore.Qt.ImhNoAutoUppercase)
        self.pdf_save_path.setClearButtonEnabled(True)
        self.pdf_save_path.setObjectName("pdf_save_path")
        self.gridLayout_4.addWidget(self.pdf_save_path, 1, 1, 1, 1)
        self.document_save_path = QtWidgets.QLineEdit(self.default_paths_group_box)
        self.document_save_path.setInputMethodHints(QtCore.Qt.ImhNoAutoUppercase)
        self.document_save_path.setClearButtonEnabled(True)
        self.document_save_path.setObjectName("document_save_path")
        self.gridLayout_4.addWidget(self.document_save_path, 0, 1, 1, 1)
        self.pdf_save_path_browse_button = QtWidgets.QPushButton(self.default_paths_group_box)
        self.pdf_save_path_browse_button.setText("")
        icon = QtGui.QIcon.fromTheme("document-open")
        self.pdf_save_path_browse_button.setIcon(icon)
        self.pdf_save_path_browse_button.setObjectName("pdf_save_path_browse_button")
        self.gridLayout_4.addWidget(self.pdf_save_path_browse_button, 1, 2, 1, 1)
        self.document_save_path_label = QtWidgets.QLabel(self.default_paths_group_box)
        self.document_save_path_label.setObjectName("document_save_path_label")
        self.gridLayout_4.addWidget(self.document_save_path_label, 0, 0, 1, 1)
        self.pdf_save_path_label = QtWidgets.QLabel(self.default_paths_group_box)
        self.pdf_save_path_label.setObjectName("pdf_save_path_label")
        self.gridLayout_4.addWidget(self.pdf_save_path_label, 1, 0, 1, 1)
        self.document_save_path_browse_button = QtWidgets.QPushButton(self.default_paths_group_box)
        self.document_save_path_browse_button.setText("")
        icon = QtGui.QIcon.fromTheme("document-open")
        self.document_save_path_browse_button.setIcon(icon)
        self.document_save_path_browse_button.setObjectName("document_save_path_browse_button")
        self.gridLayout_4.addWidget(self.document_save_path_browse_button, 0, 2, 1, 1)
        self.gridLayout.addWidget(self.default_paths_group_box, 4, 0, 1, 2)
        self.update_check_group_box = QtWidgets.QGroupBox(self.tab_general)
        self.update_check_group_box.setToolTip("")
        self.update_check_group_box.setObjectName("update_check_group_box")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.update_check_group_box)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.update_check_label = QtWidgets.QLabel(self.update_check_group_box)
        self.update_check_label.setObjectName("update_check_label")
        self.verticalLayout_9.addWidget(self.update_check_label)
        self.check_application_updates_enabled = QtWidgets.QCheckBox(self.update_check_group_box)
        self.check_application_updates_enabled.setTristate(True)
        self.check_application_updates_enabled.setObjectName("check_application_updates_enabled")
        self.verticalLayout_9.addWidget(self.check_application_updates_enabled)
        self.check_card_data_updates_enabled = QtWidgets.QCheckBox(self.update_check_group_box)
        self.check_card_data_updates_enabled.setTristate(True)
        self.check_card_data_updates_enabled.setObjectName("check_card_data_updates_enabled")
        self.verticalLayout_9.addWidget(self.check_card_data_updates_enabled)
        self.gridLayout.addWidget(self.update_check_group_box, 5, 0, 1, 2)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 6, 0, 1, 2)
        self.tab_widget.addTab(self.tab_general, "")
        self.tab_decklist_import = QtWidgets.QWidget()
        self.tab_decklist_import.setObjectName("tab_decklist_import")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_decklist_import)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.deck_list_search_path = QtWidgets.QLineEdit(self.tab_decklist_import)
        self.deck_list_search_path.setInputMethodHints(QtCore.Qt.ImhNoAutoUppercase)
        self.deck_list_search_path.setClearButtonEnabled(True)
        self.deck_list_search_path.setObjectName("deck_list_search_path")
        self.gridLayout_3.addWidget(self.deck_list_search_path, 3, 1, 1, 1)
        self.deck_list_search_path_browse_button = QtWidgets.QPushButton(self.tab_decklist_import)
        self.deck_list_search_path_browse_button.setText("")
        icon = QtGui.QIcon.fromTheme("document-open")
        self.deck_list_search_path_browse_button.setIcon(icon)
        self.deck_list_search_path_browse_button.setObjectName("deck_list_search_path_browse_button")
        self.gridLayout_3.addWidget(self.deck_list_search_path_browse_button, 3, 2, 1, 1)
        self.label = QtWidgets.QLabel(self.tab_decklist_import)
        self.label.setObjectName("label")
        self.gridLayout_3.addWidget(self.label, 1, 0, 1, 3)
        spacerItem1 = QtWidgets.QSpacerItem(20, 412, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem1, 7, 0, 1, 3)
        self.basic_land_removal_group_box = QtWidgets.QGroupBox(self.tab_decklist_import)
        self.basic_land_removal_group_box.setObjectName("basic_land_removal_group_box")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.basic_land_removal_group_box)
        self.verticalLayout.setObjectName("verticalLayout")
        self.basic_land_removal_label = QtWidgets.QLabel(self.basic_land_removal_group_box)
        self.basic_land_removal_label.setWordWrap(True)
        self.basic_land_removal_label.setObjectName("basic_land_removal_label")
        self.verticalLayout.addWidget(self.basic_land_removal_label)
        self.remove_basic_wastes_enable = QtWidgets.QCheckBox(self.basic_land_removal_group_box)
        self.remove_basic_wastes_enable.setObjectName("remove_basic_wastes_enable")
        self.verticalLayout.addWidget(self.remove_basic_wastes_enable)
        self.remove_snow_basics_enable = QtWidgets.QCheckBox(self.basic_land_removal_group_box)
        self.remove_snow_basics_enable.setObjectName("remove_snow_basics_enable")
        self.verticalLayout.addWidget(self.remove_snow_basics_enable)
        self.gridLayout_3.addWidget(self.basic_land_removal_group_box, 6, 0, 1, 3)
        self.deck_list_search_path_label = QtWidgets.QLabel(self.tab_decklist_import)
        self.deck_list_search_path_label.setObjectName("deck_list_search_path_label")
        self.gridLayout_3.addWidget(self.deck_list_search_path_label, 3, 0, 1, 1)
        self.print_guessing_group_box = QtWidgets.QGroupBox(self.tab_decklist_import)
        self.print_guessing_group_box.setChecked(False)
        self.print_guessing_group_box.setObjectName("print_guessing_group_box")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.print_guessing_group_box)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.print_guessing_prefer_already_downloaded = QtWidgets.QCheckBox(self.print_guessing_group_box)
        self.print_guessing_prefer_already_downloaded.setObjectName("print_guessing_prefer_already_downloaded")
        self.gridLayout_6.addWidget(self.print_guessing_prefer_already_downloaded, 2, 0, 1, 1)
        self.automatic_deck_list_translation_enable = QtWidgets.QCheckBox(self.print_guessing_group_box)
        self.automatic_deck_list_translation_enable.setObjectName("automatic_deck_list_translation_enable")
        self.gridLayout_6.addWidget(self.automatic_deck_list_translation_enable, 3, 0, 1, 1)
        self.print_guessing_enable = QtWidgets.QCheckBox(self.print_guessing_group_box)
        self.print_guessing_enable.setObjectName("print_guessing_enable")
        self.gridLayout_6.addWidget(self.print_guessing_enable, 1, 0, 1, 1)
        self.gridLayout_3.addWidget(self.print_guessing_group_box, 4, 0, 1, 3)
        self.tab_widget.addTab(self.tab_decklist_import, "")
        self.tab_page_sizes = QtWidgets.QWidget()
        self.tab_page_sizes.setObjectName("tab_page_sizes")
        self.tab_page_sizes_layout = QtWidgets.QGridLayout(self.tab_page_sizes)
        self.tab_page_sizes_layout.setObjectName("tab_page_sizes_layout")
        self.page_configuration_group_box = PageConfigWidget(self.tab_page_sizes)
        self.page_configuration_group_box.setTitle("")
        self.page_configuration_group_box.setObjectName("page_configuration_group_box")
        self.tab_page_sizes_layout.addWidget(self.page_configuration_group_box, 3, 0, 1, 2)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.tab_page_sizes_layout.addItem(spacerItem2, 4, 0, 1, 2)
        self.pdf_connfiguration_group_box = QtWidgets.QGroupBox(self.tab_page_sizes)
        self.pdf_connfiguration_group_box.setObjectName("pdf_connfiguration_group_box")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.pdf_connfiguration_group_box)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.pdf_page_count_limit_label = QtWidgets.QLabel(self.pdf_connfiguration_group_box)
        self.pdf_page_count_limit_label.setObjectName("pdf_page_count_limit_label")
        self.gridLayout_5.addWidget(self.pdf_page_count_limit_label, 0, 0, 1, 1)
        self.pdf_page_count_limit = QtWidgets.QSpinBox(self.pdf_connfiguration_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pdf_page_count_limit.sizePolicy().hasHeightForWidth())
        self.pdf_page_count_limit.setSizePolicy(sizePolicy)
        self.pdf_page_count_limit.setMaximum(2000000000)
        self.pdf_page_count_limit.setObjectName("pdf_page_count_limit")
        self.gridLayout_5.addWidget(self.pdf_page_count_limit, 0, 1, 1, 1)
        self.tab_page_sizes_layout.addWidget(self.pdf_connfiguration_group_box, 0, 0, 1, 2)
        self.printer_configuration_group_box = QtWidgets.QGroupBox(self.tab_page_sizes)
        self.printer_configuration_group_box.setObjectName("printer_configuration_group_box")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.printer_configuration_group_box)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.printer_use_borderless_printing = QtWidgets.QCheckBox(self.printer_configuration_group_box)
        self.printer_use_borderless_printing.setObjectName("printer_use_borderless_printing")
        self.gridLayout_8.addWidget(self.printer_use_borderless_printing, 0, 0, 1, 1)
        self.tab_page_sizes_layout.addWidget(self.printer_configuration_group_box, 2, 0, 1, 2)
        self.tab_widget.addTab(self.tab_page_sizes, "")
        self.tab_printing_filters = QtWidgets.QWidget()
        self.tab_printing_filters.setObjectName("tab_printing_filters")
        self.tab_card_data_download_layout = QtWidgets.QVBoxLayout(self.tab_printing_filters)
        self.tab_card_data_download_layout.setObjectName("tab_card_data_download_layout")
        self.card_filter_settings_header_label = QtWidgets.QLabel(self.tab_printing_filters)
        self.card_filter_settings_header_label.setWordWrap(True)
        self.card_filter_settings_header_label.setObjectName("card_filter_settings_header_label")
        self.tab_card_data_download_layout.addWidget(self.card_filter_settings_header_label)
        self.card_filter_general_settings = GeneralPrintingFilterWidget(self.tab_printing_filters)
        self.card_filter_general_settings.setObjectName("card_filter_general_settings")
        self.tab_card_data_download_layout.addWidget(self.card_filter_general_settings)
        self.card_filter_format_settings = FormatPrintingFilterWidget(self.tab_printing_filters)
        self.card_filter_format_settings.setObjectName("card_filter_format_settings")
        self.tab_card_data_download_layout.addWidget(self.card_filter_format_settings)
        self.set_filter_label = QtWidgets.QLabel(self.tab_printing_filters)
        self.set_filter_label.setWordWrap(True)
        self.set_filter_label.setObjectName("set_filter_label")
        self.tab_card_data_download_layout.addWidget(self.set_filter_label)
        self.set_filter_settings = QtWidgets.QPlainTextEdit(self.tab_printing_filters)
        self.set_filter_settings.setObjectName("set_filter_settings")
        self.tab_card_data_download_layout.addWidget(self.set_filter_settings)
        self.tab_widget.addTab(self.tab_printing_filters, "")
        self.tab_debug = QtWidgets.QWidget()
        self.tab_debug.setObjectName("tab_debug")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.tab_debug)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.enable_write_log_file = QtWidgets.QCheckBox(self.tab_debug)
        self.enable_write_log_file.setObjectName("enable_write_log_file")
        self.gridLayout_7.addWidget(self.enable_write_log_file, 5, 0, 1, 1)
        self.log_level_combo_box = QtWidgets.QComboBox(self.tab_debug)
        self.log_level_combo_box.setObjectName("log_level_combo_box")
        self.gridLayout_7.addWidget(self.log_level_combo_box, 6, 1, 1, 1)
        self.open_debug_log_location = QtWidgets.QPushButton(self.tab_debug)
        icon = QtGui.QIcon.fromTheme("document-open")
        self.open_debug_log_location.setIcon(icon)
        self.open_debug_log_location.setObjectName("open_debug_log_location")
        self.gridLayout_7.addWidget(self.open_debug_log_location, 7, 1, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_7.addItem(spacerItem3, 10, 0, 1, 2)
        self.log_level_label = QtWidgets.QLabel(self.tab_debug)
        self.log_level_label.setObjectName("log_level_label")
        self.gridLayout_7.addWidget(self.log_level_label, 6, 0, 1, 1)
        self.debug_settings_headerlabel = QtWidgets.QLabel(self.tab_debug)
        self.debug_settings_headerlabel.setObjectName("debug_settings_headerlabel")
        self.gridLayout_7.addWidget(self.debug_settings_headerlabel, 2, 0, 1, 2)
        self.enable_cutelog_integration = QtWidgets.QCheckBox(self.tab_debug)
        self.enable_cutelog_integration.setObjectName("enable_cutelog_integration")
        self.gridLayout_7.addWidget(self.enable_cutelog_integration, 4, 0, 1, 2)
        self.debug_settings_header_line = QtWidgets.QFrame(self.tab_debug)
        self.debug_settings_header_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.debug_settings_header_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.debug_settings_header_line.setObjectName("debug_settings_header_line")
        self.gridLayout_7.addWidget(self.debug_settings_header_line, 3, 0, 1, 2)
        self.debug_import_card_data_from_file = QtWidgets.QPushButton(self.tab_debug)
        icon = QtGui.QIcon.fromTheme("document-import")
        self.debug_import_card_data_from_file.setIcon(icon)
        self.debug_import_card_data_from_file.setObjectName("debug_import_card_data_from_file")
        self.gridLayout_7.addWidget(self.debug_import_card_data_from_file, 9, 1, 1, 1)
        self.debug_download_card_data_as_file = QtWidgets.QPushButton(self.tab_debug)
        icon = QtGui.QIcon.fromTheme("edit-download")
        self.debug_download_card_data_as_file.setIcon(icon)
        self.debug_download_card_data_as_file.setObjectName("debug_download_card_data_as_file")
        self.gridLayout_7.addWidget(self.debug_download_card_data_as_file, 8, 1, 1, 1)
        self.tab_widget.addTab(self.tab_debug, "")
        self.dialog_layout.addWidget(self.tab_widget)
        self.button_box = QtWidgets.QDialogButtonBox(SettingsWindow)
        self.button_box.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Reset|QtWidgets.QDialogButtonBox.RestoreDefaults|QtWidgets.QDialogButtonBox.Save)
        self.button_box.setObjectName("button_box")
        self.dialog_layout.addWidget(self.button_box)
        self.preferred_language_label.setBuddy(self.preferred_language_combo_box)
        self.add_card_widget_style_label.setBuddy(self.add_card_widget_style_combo_box)
        self.document_save_path_label.setBuddy(self.document_save_path)
        self.pdf_save_path_label.setBuddy(self.pdf_save_path)
        self.pdf_page_count_limit_label.setBuddy(self.pdf_page_count_limit)
        self.log_level_label.setBuddy(self.log_level_combo_box)

        self.retranslateUi(SettingsWindow)
        self.tab_widget.setCurrentIndex(0)
        self.button_box.accepted.connect(SettingsWindow.accept) # type: ignore
        self.button_box.rejected.connect(SettingsWindow.reject) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(SettingsWindow)
        SettingsWindow.setTabOrder(self.add_card_widget_style_combo_box, self.automatically_add_opposing_faces)
        SettingsWindow.setTabOrder(self.automatically_add_opposing_faces, self.document_save_path)
        SettingsWindow.setTabOrder(self.document_save_path, self.document_save_path_browse_button)
        SettingsWindow.setTabOrder(self.document_save_path_browse_button, self.pdf_save_path)
        SettingsWindow.setTabOrder(self.pdf_save_path, self.pdf_save_path_browse_button)
        SettingsWindow.setTabOrder(self.pdf_save_path_browse_button, self.check_application_updates_enabled)
        SettingsWindow.setTabOrder(self.check_application_updates_enabled, self.check_card_data_updates_enabled)
        SettingsWindow.setTabOrder(self.check_card_data_updates_enabled, self.print_guessing_enable)
        SettingsWindow.setTabOrder(self.print_guessing_enable, self.print_guessing_prefer_already_downloaded)
        SettingsWindow.setTabOrder(self.print_guessing_prefer_already_downloaded, self.automatic_deck_list_translation_enable)

    def retranslateUi(self, SettingsWindow):
        _translate = QtCore.QCoreApplication.translate
        SettingsWindow.setWindowTitle(_translate("SettingsWindow", "Settings"))
        self.preferred_language_label.setText(_translate("SettingsWindow", "Preferred card language:"))
        self.preferred_language_combo_box.setToolTip(_translate("SettingsWindow", "Language choices will default to the chosen language here.\n"
"\n"
"Entries use the language codes as listed on Scryfall."))
        self.look_and_feel_settings_group_box.setTitle(_translate("SettingsWindow", "Look && Feel (Changing this requires an application restart)"))
        self.add_card_widget_style_label.setText(_translate("SettingsWindow", "Main window layout"))
        self.add_card_widget_style_combo_box.setToolTip(_translate("SettingsWindow", "Horizontal adds a wide, horizontal search area above the currently edited page, and is best for taller screens, like 4:3 or 3:2.\n"
"Columnar organizes the main window content in four columns, and is best for (ultra-)wide screens.\n"
"Tabbed uses tabs to only show parts of the main window at a time. Best used with small screens in portrait mode (i.e. 9:16), otherwise not recommended."))
        self.double_faced_cards_group_box.setTitle(_translate("SettingsWindow", "Double-faced cards"))
        self.automatically_add_opposing_faces.setToolTip(_translate("SettingsWindow", "When adding double-faced cards, automatically add the same number of copies of the other side.\n"
"Uses the appropriate, matching other card side.\n"
"Uncheck to disable this automatism."))
        self.automatically_add_opposing_faces.setText(_translate("SettingsWindow", "Automatically add the other side of double-faced cards"))
        self.default_paths_group_box.setToolTip(_translate("SettingsWindow", "These paths are selected by default when browsing the file system for files"))
        self.default_paths_group_box.setTitle(_translate("SettingsWindow", "Default save paths"))
        self.pdf_save_path.setToolTip(_translate("SettingsWindow", "If set, use this as the default location for saving exported PDF documents."))
        self.pdf_save_path.setPlaceholderText(_translate("SettingsWindow", "Path to a directory"))
        self.document_save_path.setToolTip(_translate("SettingsWindow", "If set, use this as the default location for saving documents."))
        self.document_save_path.setPlaceholderText(_translate("SettingsWindow", "Path to a directory"))
        self.pdf_save_path_browse_button.setToolTip(_translate("SettingsWindow", "Browse…"))
        self.document_save_path_label.setText(_translate("SettingsWindow", "Document save path"))
        self.pdf_save_path_label.setText(_translate("SettingsWindow", "PDF export path"))
        self.document_save_path_browse_button.setToolTip(_translate("SettingsWindow", "Browse…"))
        self.update_check_group_box.setTitle(_translate("SettingsWindow", "Automatic update checks"))
        self.update_check_label.setText(_translate("SettingsWindow", "Update checks are performed at application start, if enabled."))
        self.check_application_updates_enabled.setToolTip(_translate("SettingsWindow", "If enabled, check for application updates, and notify if new updates are available for installation."))
        self.check_application_updates_enabled.setText(_translate("SettingsWindow", "Check for application updates"))
        self.check_card_data_updates_enabled.setToolTip(_translate("SettingsWindow", "If enabled, query the Scryfall API if new cards are available. If so, offer to update the local card data."))
        self.check_card_data_updates_enabled.setText(_translate("SettingsWindow", "Check for new card data"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.tab_general), _translate("SettingsWindow", "General"))
        self.deck_list_search_path.setToolTip(_translate("SettingsWindow", "If set, use this as the default location for loading deck lists. Your webbrowser’s download directory is a good choice."))
        self.deck_list_search_path.setPlaceholderText(_translate("SettingsWindow", "Path to a directory"))
        self.deck_list_search_path_browse_button.setToolTip(_translate("SettingsWindow", "Browse…"))
        self.label.setText(_translate("SettingsWindow", "These options control the deck list import function."))
        self.basic_land_removal_group_box.setTitle(_translate("SettingsWindow", "Control the one-click basic land removal"))
        self.basic_land_removal_label.setText(_translate("SettingsWindow", "These options control, if the automatic removal should also include Wastes or Snow-Covered basic lands."))
        self.remove_basic_wastes_enable.setWhatsThis(_translate("SettingsWindow", "Include Wastes when removing basic lands."))
        self.remove_basic_wastes_enable.setText(_translate("SettingsWindow", "Enable removal of Basic Wastes"))
        self.remove_snow_basics_enable.setWhatsThis(_translate("SettingsWindow", "Include Snow-Covered basic lands when removing basic lands."))
        self.remove_snow_basics_enable.setText(_translate("SettingsWindow", "Enable removal of Snow-Covered Basic lands"))
        self.deck_list_search_path_label.setText(_translate("SettingsWindow", "Deck list search path"))
        self.print_guessing_group_box.setToolTip(_translate("SettingsWindow", "Not all deck list formats always contain complete data.\n"
"These options set the default behaviour when encountering ambiguous card"))
        self.print_guessing_group_box.setTitle(_translate("SettingsWindow", "Control print guessing in ambiguous cases"))
        self.print_guessing_prefer_already_downloaded.setToolTip(_translate("SettingsWindow", "When guessing a printing, prefer printings with already downloaded images over other possible printings."))
        self.print_guessing_prefer_already_downloaded.setText(_translate("SettingsWindow", "Prefer printings with already downloaded images"))
        self.automatic_deck_list_translation_enable.setToolTip(_translate("SettingsWindow", "Always enable automatic deck list translation when importing deck lists.\n"
"This avoids adding foreign language cards, if the deck list happens to contain some."))
        self.automatic_deck_list_translation_enable.setText(_translate("SettingsWindow", "Enable translating imported deck lists by default"))
        self.print_guessing_enable.setToolTip(_translate("SettingsWindow", "Not all deck list formats always contain complete data to identify exact printings.\n"
"If enabled, choose an arbitrary printing, instead of failing to identify such cards.\n"
"With some deck list formats, this option is always enabled."))
        self.print_guessing_enable.setText(_translate("SettingsWindow", "Enable print guessing by default"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.tab_decklist_import), _translate("SettingsWindow", "Deck list import"))
        self.pdf_connfiguration_group_box.setTitle(_translate("SettingsWindow", "PDF options"))
        self.pdf_page_count_limit_label.setToolTip(_translate("SettingsWindow", "Automatically split PDF documents, if they get longer than this many pages.\n"
"Set to zero to disable splitting.\n"
"\n"
"\n"
"When printing PDFs using a USB flash drive directly connected to the printer,\n"
"the printer may refuse to print documents exceeding some arbitrary size limit.\n"
"To work around this limitation, you can enable this option,\n"
"and limit the number of pages per PDF. If the document has more pages,\n"
"it will be exported into multiple PDF documents automatically."))
        self.pdf_page_count_limit_label.setText(_translate("SettingsWindow", "Split PDF documents longer than"))
        self.pdf_page_count_limit.setToolTip(_translate("SettingsWindow", "Automatically split PDF documents, if they get longer than this many pages.\n"
"Set to zero to disable splitting.\n"
"\n"
"\n"
"When printing PDFs using a USB flash drive directly connected to the printer,\n"
"the printer may refuse to print documents exceeding some arbitrary size limit.\n"
"To work around this limitation, you can enable this option,\n"
"and limit the number of pages per PDF. If the document has more pages,\n"
"it will be exported into multiple PDF documents automatically."))
        self.pdf_page_count_limit.setSuffix(_translate("SettingsWindow", " pages"))
        self.printer_configuration_group_box.setTitle(_translate("SettingsWindow", "Printer options"))
        self.printer_use_borderless_printing.setToolTip(_translate("SettingsWindow", "When enabled, instruct the printer to use borderless mode and let MTGProxyPrinter manage the printing margins.\n"
"Disable this, if your printer keeps scaling print-outs up or down.\n"
"\n"
"When disabled, managing the page margins is delegated to the printer driver,\n"
"which should increase compatibility, at the expense of drawing shorter cut helper lines."))
        self.printer_use_borderless_printing.setText(_translate("SettingsWindow", "Configure printer for borderless printing"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.tab_page_sizes), _translate("SettingsWindow", "Page size && Printing"))
        self.card_filter_settings_header_label.setText(_translate("SettingsWindow", "These options allow hiding unwanted cards and printings. Hidden printings are treated as though they don’t exist. They can’t be found in the card search and are automatically replaced in loaded documents or imported deck lists, if possible. If all printings of a card are hidden, it won’t be available at all."))
        self.set_filter_label.setText(_translate("SettingsWindow", "Hide specific sets: Add set codes as listed on Scryfall, for example LEA or 2X2. Separate multiple entries with spaces or line breaks. All words not matching an exact set code are ignored."))
        self.set_filter_settings.setToolTip(_translate("SettingsWindow", "Example:\n"
"\n"
"LEA DDU TC13 J21"))
        self.set_filter_settings.setPlaceholderText(_translate("SettingsWindow", "No sets currently hidden."))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.tab_printing_filters), _translate("SettingsWindow", "Hide printings"))
        self.enable_write_log_file.setText(_translate("SettingsWindow", "Enable writing a log file to disk"))
        self.log_level_combo_box.setToolTip(_translate("SettingsWindow", "Only write events with the given severity level and higher to the log file."))
        self.open_debug_log_location.setText(_translate("SettingsWindow", "Open debug log directory"))
        self.log_level_label.setText(_translate("SettingsWindow", "Event severity that gets logged to file:"))
        self.debug_settings_headerlabel.setText(_translate("SettingsWindow", "Debug settings (Changing these require an application restart)"))
        self.enable_cutelog_integration.setToolTip(_translate("SettingsWindow", "Cutelog is a live log event viewer that can be used to monitor events in real-time."))
        self.enable_cutelog_integration.setWhatsThis(_translate("SettingsWindow", "<html><head/><body><p>See <a href=\"https://github.com/busimus/cutelog\"><span style=\" text-decoration: underline; color:#2980b9;\">https://github.com/busimus/cutelog</span></a> for details about Cutelog.</p></body></html>"))
        self.enable_cutelog_integration.setText(_translate("SettingsWindow", "Enable Cutelog integration"))
        self.debug_import_card_data_from_file.setText(_translate("SettingsWindow", "Import card data from file"))
        self.debug_download_card_data_as_file.setText(_translate("SettingsWindow", "Download card data as file"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.tab_debug), _translate("SettingsWindow", "Debug settings"))
from mtg_proxy_printer.ui.page_config_widget import PageConfigWidget
from mtg_proxy_printer.ui.printing_filter_widgets import FormatPrintingFilterWidget, GeneralPrintingFilterWidget
