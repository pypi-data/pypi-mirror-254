# -*- coding: utf-8 -*-

"""
openweathermapapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openweathermapapi.api_helper import APIHelper


class Main(object):

    """Implementation of the 'Main' model.

    TODO: type model description here.

    Attributes:
        temp (float): Temperature. Unit Default: Kelvin, Metric: Celsius,
            Imperial: Fahrenheit.
        pressure (int): Atmospheric pressure (on the sea level, if there is no
            sea_level or grnd_level data), hPa
        humidity (int): Humidity, %
        temp_min (float): Minimum temperature at the moment. This is deviation
            from current temp that is possible for large cities and
            megalopolises geographically expanded (use these parameter
            optionally). Unit Default: Kelvin, Metric: Celsius, Imperial:
            Fahrenheit.
        temp_max (float): Maximum temperature at the moment. This is deviation
            from current temp that is possible for large cities and
            megalopolises geographically expanded (use these parameter
            optionally). Unit Default: Kelvin, Metric: Celsius, Imperial:
            Fahrenheit.
        sea_level (float): Atmospheric pressure on the sea level, hPa
        grnd_level (float): Atmospheric pressure on the ground level, hPa

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "temp": 'temp',
        "pressure": 'pressure',
        "humidity": 'humidity',
        "temp_min": 'temp_min',
        "temp_max": 'temp_max',
        "sea_level": 'sea_level',
        "grnd_level": 'grnd_level'
    }

    _optionals = [
        'temp',
        'pressure',
        'humidity',
        'temp_min',
        'temp_max',
        'sea_level',
        'grnd_level',
    ]

    def __init__(self,
                 temp=APIHelper.SKIP,
                 pressure=APIHelper.SKIP,
                 humidity=APIHelper.SKIP,
                 temp_min=APIHelper.SKIP,
                 temp_max=APIHelper.SKIP,
                 sea_level=APIHelper.SKIP,
                 grnd_level=APIHelper.SKIP):
        """Constructor for the Main class"""

        # Initialize members of the class
        if temp is not APIHelper.SKIP:
            self.temp = temp 
        if pressure is not APIHelper.SKIP:
            self.pressure = pressure 
        if humidity is not APIHelper.SKIP:
            self.humidity = humidity 
        if temp_min is not APIHelper.SKIP:
            self.temp_min = temp_min 
        if temp_max is not APIHelper.SKIP:
            self.temp_max = temp_max 
        if sea_level is not APIHelper.SKIP:
            self.sea_level = sea_level 
        if grnd_level is not APIHelper.SKIP:
            self.grnd_level = grnd_level 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        temp = dictionary.get("temp") if dictionary.get("temp") else APIHelper.SKIP
        pressure = dictionary.get("pressure") if dictionary.get("pressure") else APIHelper.SKIP
        humidity = dictionary.get("humidity") if dictionary.get("humidity") else APIHelper.SKIP
        temp_min = dictionary.get("temp_min") if dictionary.get("temp_min") else APIHelper.SKIP
        temp_max = dictionary.get("temp_max") if dictionary.get("temp_max") else APIHelper.SKIP
        sea_level = dictionary.get("sea_level") if dictionary.get("sea_level") else APIHelper.SKIP
        grnd_level = dictionary.get("grnd_level") if dictionary.get("grnd_level") else APIHelper.SKIP
        # Return an object of this model
        return cls(temp,
                   pressure,
                   humidity,
                   temp_min,
                   temp_max,
                   sea_level,
                   grnd_level)
