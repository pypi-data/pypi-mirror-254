# -*- coding: utf-8 -*-

"""
openweathermapapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openweathermapapi.api_helper import APIHelper
from openweathermapapi.models.clouds import Clouds
from openweathermapapi.models.coord import Coord
from openweathermapapi.models.main import Main
from openweathermapapi.models.rain import Rain
from openweathermapapi.models.snow import Snow
from openweathermapapi.models.sys import Sys
from openweathermapapi.models.weather import Weather
from openweathermapapi.models.wind import Wind


class SuccessfulResponse(object):

    """Implementation of the 'Successful response' model.

    TODO: type model description here.

    Attributes:
        coord (Coord): TODO: type description here.
        weather (List[Weather]): (more info Weather condition codes)
        base (str): Internal parameter
        main (Main): TODO: type description here.
        visibility (int): Visibility, meter
        wind (Wind): TODO: type description here.
        clouds (Clouds): TODO: type description here.
        rain (Rain): TODO: type description here.
        snow (Snow): TODO: type description here.
        dt (int): Time of data calculation, unix, UTC
        sys (Sys): TODO: type description here.
        id (int): City ID
        name (str): TODO: type description here.
        cod (int): Internal parameter

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "coord": 'coord',
        "weather": 'weather',
        "base": 'base',
        "main": 'main',
        "visibility": 'visibility',
        "wind": 'wind',
        "clouds": 'clouds',
        "rain": 'rain',
        "snow": 'snow',
        "dt": 'dt',
        "sys": 'sys',
        "id": 'id',
        "name": 'name',
        "cod": 'cod'
    }

    _optionals = [
        'coord',
        'weather',
        'base',
        'main',
        'visibility',
        'wind',
        'clouds',
        'rain',
        'snow',
        'dt',
        'sys',
        'id',
        'name',
        'cod',
    ]

    def __init__(self,
                 coord=APIHelper.SKIP,
                 weather=APIHelper.SKIP,
                 base=APIHelper.SKIP,
                 main=APIHelper.SKIP,
                 visibility=APIHelper.SKIP,
                 wind=APIHelper.SKIP,
                 clouds=APIHelper.SKIP,
                 rain=APIHelper.SKIP,
                 snow=APIHelper.SKIP,
                 dt=APIHelper.SKIP,
                 sys=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 cod=APIHelper.SKIP):
        """Constructor for the SuccessfulResponse class"""

        # Initialize members of the class
        if coord is not APIHelper.SKIP:
            self.coord = coord 
        if weather is not APIHelper.SKIP:
            self.weather = weather 
        if base is not APIHelper.SKIP:
            self.base = base 
        if main is not APIHelper.SKIP:
            self.main = main 
        if visibility is not APIHelper.SKIP:
            self.visibility = visibility 
        if wind is not APIHelper.SKIP:
            self.wind = wind 
        if clouds is not APIHelper.SKIP:
            self.clouds = clouds 
        if rain is not APIHelper.SKIP:
            self.rain = rain 
        if snow is not APIHelper.SKIP:
            self.snow = snow 
        if dt is not APIHelper.SKIP:
            self.dt = dt 
        if sys is not APIHelper.SKIP:
            self.sys = sys 
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if cod is not APIHelper.SKIP:
            self.cod = cod 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        coord = Coord.from_dictionary(dictionary.get('coord')) if 'coord' in dictionary.keys() else APIHelper.SKIP
        weather = None
        if dictionary.get('weather') is not None:
            weather = [Weather.from_dictionary(x) for x in dictionary.get('weather')]
        else:
            weather = APIHelper.SKIP
        base = dictionary.get("base") if dictionary.get("base") else APIHelper.SKIP
        main = Main.from_dictionary(dictionary.get('main')) if 'main' in dictionary.keys() else APIHelper.SKIP
        visibility = dictionary.get("visibility") if dictionary.get("visibility") else APIHelper.SKIP
        wind = Wind.from_dictionary(dictionary.get('wind')) if 'wind' in dictionary.keys() else APIHelper.SKIP
        clouds = Clouds.from_dictionary(dictionary.get('clouds')) if 'clouds' in dictionary.keys() else APIHelper.SKIP
        rain = Rain.from_dictionary(dictionary.get('rain')) if 'rain' in dictionary.keys() else APIHelper.SKIP
        snow = Snow.from_dictionary(dictionary.get('snow')) if 'snow' in dictionary.keys() else APIHelper.SKIP
        dt = dictionary.get("dt") if dictionary.get("dt") else APIHelper.SKIP
        sys = Sys.from_dictionary(dictionary.get('sys')) if 'sys' in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        cod = dictionary.get("cod") if dictionary.get("cod") else APIHelper.SKIP
        # Return an object of this model
        return cls(coord,
                   weather,
                   base,
                   main,
                   visibility,
                   wind,
                   clouds,
                   rain,
                   snow,
                   dt,
                   sys,
                   id,
                   name,
                   cod)
