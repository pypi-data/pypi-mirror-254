# -*- coding: utf-8 -*-

"""
openweathermapapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openweathermapapi.api_helper import APIHelper


class Sys(object):

    """Implementation of the 'Sys' model.

    TODO: type model description here.

    Attributes:
        mtype (int): Internal parameter
        id (int): Internal parameter
        message (float): Internal parameter
        country (str): Country code (GB, JP etc.)
        sunrise (int): Sunrise time, unix, UTC
        sunset (int): Sunset time, unix, UTC

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "id": 'id',
        "message": 'message',
        "country": 'country',
        "sunrise": 'sunrise',
        "sunset": 'sunset'
    }

    _optionals = [
        'mtype',
        'id',
        'message',
        'country',
        'sunrise',
        'sunset',
    ]

    def __init__(self,
                 mtype=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 message=APIHelper.SKIP,
                 country=APIHelper.SKIP,
                 sunrise=APIHelper.SKIP,
                 sunset=APIHelper.SKIP):
        """Constructor for the Sys class"""

        # Initialize members of the class
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if id is not APIHelper.SKIP:
            self.id = id 
        if message is not APIHelper.SKIP:
            self.message = message 
        if country is not APIHelper.SKIP:
            self.country = country 
        if sunrise is not APIHelper.SKIP:
            self.sunrise = sunrise 
        if sunset is not APIHelper.SKIP:
            self.sunset = sunset 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        sunrise = dictionary.get("sunrise") if dictionary.get("sunrise") else APIHelper.SKIP
        sunset = dictionary.get("sunset") if dictionary.get("sunset") else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   id,
                   message,
                   country,
                   sunrise,
                   sunset)
