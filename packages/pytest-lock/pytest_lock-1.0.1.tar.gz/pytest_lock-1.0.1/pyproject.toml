[tool.poetry]
name = "pytest-lock"
version = "1.0.1"
description = "pytest-lock is a pytest plugin that allows you to \"lock\" the results of unit tests, storing them in a local cache. This is particularly useful for tests that are resource-intensive or don't need to be run every time. When the tests are run subsequently, pytest-lock will compare the current results with the locked results and issue a warning if there are any discrepancies."
authors = ["CHAUMONT Pierre <pierre.chaumont@scalian.com>"]
license = "MIT"
readme = "README.md"

packages = [
    { include = "pytest_lock", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.8"
pytest = "^7.4.3"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
python = "3.12"
pytest = "^7.4.3"
coverage = "^7.4.0"  # better than pytest-cov (the best detection with pytester)
ruff = "^0.1.9"
bandit = "^1.7.6"
mypy = "^1.8.0"
tox = "^4.12.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = [
    { version = "<7.2.6", python = "<3.9" },
    { version = "^7.2.6", python = ">=3.9" }
]
myst-parser = "^2.0.0"
sphinx-rtd-theme = "^2.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.plugins.pytest11]
pytest-lock = "pytest_lock.plugin"

[tool.pytest.ini_options]
addopts = ["-k", "not scenarios", "-vv", '--doctest-modules']
pytester_example_dir = "./tests"
norecursedirs = ["scenarios/*"]

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests"]
skips = [
    "B101",  # https://stackoverflow.com/questions/68428293/s101-use-of-assert-detected-for-python-tests
]