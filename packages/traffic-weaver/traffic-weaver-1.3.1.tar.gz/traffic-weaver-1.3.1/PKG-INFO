Metadata-Version: 2.1
Name: traffic-weaver
Version: 1.3.1
Summary: Recreate time-series from averaged data
Author-email: "Piotr T. Lechowicz" <piotr.lechowicz@pwr.edu.pl>
Maintainer-email: "Piotr T. Lechowicz" <piotr.lechowicz@pwr.edu.pl>
License: MIT License
        
        Copyright (c) 2024 NetOpt
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: homepage, https://github.com/netopt/traffic-weaver
Project-URL: documentation, https://netopt.github.io/traffic-weaver/
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python :: 3.9
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: scipy
Provides-Extra: dev
Requires-Dist: matplotlib; extra == "dev"
Requires-Dist: sphinx; extra == "dev"
Requires-Dist: sphinx-rtd-theme; extra == "dev"
Requires-Dist: sphinx-mdinclude; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: pytest-mock; extra == "dev"
Requires-Dist: twine; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"
Requires-Dist: coverage-badge; extra == "dev"
Requires-Dist: urllib3==1.26.6; extra == "dev"

# Traffic Weaver

Semi-synthetic time series generator based on averaged data.

[![PyPI version](https://badge.fury.io/py/traffic-weaver.svg)](https://badge.fury.io/py/traffic-weaver)
[![test](https://github.com/netopt/traffic-weaver/actions/workflows/test.yml/badge.svg)](https://github.com/netopt/traffic-weaver/actions/workflows/test.yml)
[![coverage badge](https://github.com/netopt/traffic-weaver/raw/main/badges/coverage.svg)](https://github.com/netopt/traffic-weaver/raw/main/badges/coverage.svg)
[![Deploy Sphinx documentation to Pages](https://github.com/netopt/traffic-weaver/actions/workflows/documentation.yml/badge.svg)](https://github.com/netopt/traffic-weaver/actions/workflows/documentation.yml)
[![pages-build-deployment](https://github.com/netopt/traffic_weaver/actions/workflows/pages/pages-build-deployment/badge.svg)](https://github.com/netopt/traffic_weaver/actions/workflows/pages/pages-build-deployment)

## Acknowledgments and citation

TBD

## Table of content
- [Documentation](https://netopt.github.io/traffic-weaver/)
    - [Introduction](https://netopt.github.io/traffic-weaver/introduction.html)
    - [Quick start](https://netopt.github.io/traffic-weaver/quick_start.html)
    - [API reference](https://netopt.github.io/traffic-weaver/apidocs/traffic_weaver.html)


## Introduction

Traffic Weaver reads averaged time series and creates
semi-synthetic signal with finer granularity, that after averaging
matches the original provided signal.
Following tools are applied to create semi-synthetic signal.

* Oversampling with a given strategy
* Stretching to match the integral of the original time series
* Smoothing
* Repeating
* Trending
* Noising

Below figure shows general usage example.
Based on provided original averaged time series (a), signal is *n*-times oversampled
with predefined strategy (b). Next, it is stretched to match integral of the input
time series function (c). Further, it is smoothed with spline function (d).
In order to create weekly semi-synthetic data, signal is repeated 7 times
(e) applying long-term trend consisting of sinusoidal and linear function (f).
Finally, the noise is introduced to the signal. starting from small values and
increasing over time (g). To validate correctness of applied processing,
(h) presents averaged two periods of created signal, showing that they closely
match the original signal (except the applied trend).

<img alt="Signal processing" width="800px" src="https://github.com/netopt/traffic-weaver/raw/main/docs/source/_static/gfx/signal_processing_overview.png"/>
