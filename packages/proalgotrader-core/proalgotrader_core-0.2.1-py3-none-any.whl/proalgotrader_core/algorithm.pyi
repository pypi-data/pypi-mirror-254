from _typeshed import Incomplete
from datetime import date, datetime, time, timedelta
from proalgotrader_core.algo_session import AlgoSession as AlgoSession
from proalgotrader_core.api import Api as Api
from proalgotrader_core.args_manager import ArgsManager as ArgsManager
from proalgotrader_core.broker_manager import BrokerManager as BrokerManager
from proalgotrader_core.broker_symbol import BrokerSymbol as BrokerSymbol
from proalgotrader_core.chart import Chart as Chart
from proalgotrader_core.chart_manager import ChartManager as ChartManager
from proalgotrader_core.helpers.get_strike_price import get_strike_price as get_strike_price
from proalgotrader_core.order import Order as Order
from proalgotrader_core.position import Position as Position
from proalgotrader_core.protocols.enums.account_type import AccountType as AccountType
from proalgotrader_core.protocols.enums.market_type import MarketType as MarketType
from proalgotrader_core.protocols.enums.order_type import OrderType as OrderType
from proalgotrader_core.protocols.enums.position_type import PositionType as PositionType
from proalgotrader_core.protocols.enums.segment_type import SegmentType as SegmentType
from proalgotrader_core.protocols.enums.symbol_type import SymbolType as SymbolType
from proalgotrader_core.protocols.position_manager import PositionManagerProtocol as PositionManagerProtocol
from proalgotrader_core.protocols.signal_manager import SignalManagerProtocol as SignalManagerProtocol
from proalgotrader_core.protocols.strategy import StrategyProtocol as StrategyProtocol
from typing import Any, List, Literal, Tuple, Type

class Algorithm:
    args_manager: Incomplete
    api: Incomplete
    algo_session: Incomplete
    broker_manager: Incomplete
    chart_manager: Incomplete
    account_type: Incomplete
    signal_manager: Incomplete
    position_manager: Incomplete
    signals: Incomplete
    strategy: Incomplete
    def __init__(self, args_manager: ArgsManager, api: Api, algo_session: AlgoSession, broker_manager: BrokerManager, chart_manager: ChartManager) -> None: ...
    @property
    def orders(self) -> List[Order]: ...
    @property
    def positions(self) -> List[Position]: ...
    @property
    def open_positions(self) -> List[Position]: ...
    @property
    def trades(self) -> List[Position]: ...
    @property
    def current_datetime(self) -> datetime: ...
    @property
    def current_date(self) -> date: ...
    @property
    def current_time(self) -> time: ...
    def between_time(self, first: time, second: time) -> bool: ...
    def set_signal_manager(self, *, signal_manager: Type[SignalManagerProtocol] = None) -> None: ...
    def set_position_manager(self, *, position_manager: Type[PositionManagerProtocol] = None) -> None: ...
    async def set_account_type(self, *, account_type: AccountType) -> None: ...
    async def set_signals(self, *, symbol_types: List[SymbolType] = None) -> None: ...
    async def initialize(self) -> None: ...
    async def boot(self) -> None: ...
    async def run(self) -> None: ...
    async def initialize_signals(self) -> None: ...
    async def next_signals(self) -> None: ...
    async def chart_next(self) -> None: ...
    async def on_market_opened(self) -> None: ...
    async def on_after_market_closed(self) -> None: ...
    async def set_strategy(self) -> None: ...
    async def add_chart(self, broker_symbol: BrokerSymbol, timeframe: timedelta) -> Chart: ...
    def add_equity(self, *, symbol_type: SymbolType) -> BrokerSymbol: ...
    def add_future(self, symbol_type: SymbolType, expiry_input: Tuple[Literal['weekly', 'monthly'], int]) -> BrokerSymbol: ...
    def add_option(self, symbol_type: SymbolType, expiry_input: Tuple[Literal['weekly', 'monthly'], int], strike_price_input: int, option_type: Literal['CE', 'PE']) -> BrokerSymbol: ...
    def get_expiry(self, broker_symbol: BrokerSymbol, segment_type: str, expiry_input: Tuple[Literal['weekly', 'monthly'], int]) -> Tuple[str, Any]: ...
    async def buy(self, *, broker_symbol: BrokerSymbol, quantities: int) -> None: ...
    async def sell(self, *, broker_symbol: BrokerSymbol, quantities: int) -> None: ...
