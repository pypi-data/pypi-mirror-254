"""Generated by Sideko (sideko.dev)"""
import io
import typing
import enum
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class BinaryResponse:
    content: bytes
    headers: dict[str, str]

    def __init__(self, content: bytes, headers: dict[str, str]) -> None:
        self.content = content
        self.headers = headers


class DeleteCustomersCustomerIdBillingConfigBillingProviderTypeBillingProviderTypeEnum(
    str, enum.Enum
):
    AWS_MARKETPLACE = "aws_marketplace"
    STRIPE = "stripe"
    NETSUITE = "netsuite"
    CUSTOM = "custom"
    AZURE_MARKETPLACE = "azure_marketplace"
    QUICKBOOKS_ONLINE = "quickbooks_online"

    def __str__(self) -> str:
        return self.value


class GetAuditLogsResponseDataItemStatusEnum(str, enum.Enum):
    SUCCESS = "success"
    FAILURE = "failure"
    PENDING = "pending"

    def __str__(self) -> str:
        return self.value


class GetCustomersResponseDataItemCurrentBillableStatusValueEnum(str, enum.Enum):
    BILLABLE = "billable"
    UNBILLABLE = "unbillable"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdResponseDataCurrentBillableStatusValueEnum(str, enum.Enum):
    BILLABLE = "billable"
    UNBILLABLE = "unbillable"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdBillingConfigBillingProviderTypeBillingProviderTypeEnum(
    str, enum.Enum
):
    AWS_MARKETPLACE = "aws_marketplace"
    STRIPE = "stripe"
    NETSUITE = "netsuite"
    CUSTOM = "custom"
    AZURE_MARKETPLACE = "azure_marketplace"
    QUICKBOOKS_ONLINE = "quickbooks_online"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdBillingConfigBillingProviderTypeResponseDataAwsRegionEnum(
    str, enum.Enum
):
    AF_SOUTH_1 = "af-south-1"
    AP_EAST_1 = "ap-east-1"
    AP_NORTHEAST_1 = "ap-northeast-1"
    AP_NORTHEAST_2 = "ap-northeast-2"
    AP_NORTHEAST_3 = "ap-northeast-3"
    AP_SOUTH_1 = "ap-south-1"
    AP_SOUTHEAST_1 = "ap-southeast-1"
    AP_SOUTHEAST_2 = "ap-southeast-2"
    CA_CENTRAL_1 = "ca-central-1"
    CN_NORTH_1 = "cn-north-1"
    CN_NORTHWEST_1 = "cn-northwest-1"
    EU_CENTRAL_1 = "eu-central-1"
    EU_NORTH_1 = "eu-north-1"
    EU_SOUTH_1 = "eu-south-1"
    EU_WEST_1 = "eu-west-1"
    EU_WEST_2 = "eu-west-2"
    EU_WEST_3 = "eu-west-3"
    ME_SOUTH_1 = "me-south-1"
    SA_EAST_1 = "sa-east-1"
    US_EAST_1 = "us-east-1"
    US_EAST_2 = "us-east-2"
    US_GOV_EAST_1 = "us-gov-east-1"
    US_GOV_WEST_1 = "us-gov-west-1"
    US_WEST_1 = "us-west-1"
    US_WEST_2 = "us-west-2"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdBillingConfigBillingProviderTypeResponseDataAzureSubscriptionStatusEnum(
    str, enum.Enum
):
    SUBSCRIBED = "Subscribed"
    UNSUBSCRIBED = "Unsubscribed"
    SUSPENDED = "Suspended"
    PENDING_FULFILLMENT_START = "PendingFulfillmentStart"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdBillingConfigBillingProviderTypeResponseDataStripeCollectionMethodEnum(
    str, enum.Enum
):
    CHARGE_AUTOMATICALLY = "charge_automatically"
    SEND_INVOICE = "send_invoice"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesSortEnum(str, enum.Enum):
    DATE_ASC = "date_asc"
    DATE_DESC = "date_desc"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesResponseDataItemBillableStatusEnum(str, enum.Enum):
    BILLABLE = "billable"
    UNBILLABLE = "unbillable"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesResponseDataItemCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeEnum(
    str, enum.Enum
):
    AWS_MARKETPLACE = "aws_marketplace"
    STRIPE = "stripe"
    NETSUITE = "netsuite"
    CUSTOM = "custom"
    AZURE_MARKETPLACE = "azure_marketplace"
    QUICKBOOKS_ONLINE = "quickbooks_online"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesResponseDataItemCorrectionRecordCorrectedExternalInvoiceExternalStatusEnum(
    str, enum.Enum
):
    DRAFT = "DRAFT"
    FINALIZED = "FINALIZED"
    PAID = "PAID"
    UNCOLLECTIBLE = "UNCOLLECTIBLE"
    VOID = "VOID"
    DELETED = "DELETED"
    PAYMENT_FAILED = "PAYMENT_FAILED"
    INVALID_REQUEST_ERROR = "INVALID_REQUEST_ERROR"
    SKIPPED = "SKIPPED"
    SENT = "SENT"
    QUEUED = "QUEUED"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesResponseDataItemExternalInvoiceBillingProviderTypeEnum(
    str, enum.Enum
):
    AWS_MARKETPLACE = "aws_marketplace"
    STRIPE = "stripe"
    NETSUITE = "netsuite"
    CUSTOM = "custom"
    AZURE_MARKETPLACE = "azure_marketplace"
    QUICKBOOKS_ONLINE = "quickbooks_online"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesResponseDataItemExternalInvoiceExternalStatusEnum(
    str, enum.Enum
):
    DRAFT = "DRAFT"
    FINALIZED = "FINALIZED"
    PAID = "PAID"
    UNCOLLECTIBLE = "UNCOLLECTIBLE"
    VOID = "VOID"
    DELETED = "DELETED"
    PAYMENT_FAILED = "PAYMENT_FAILED"
    INVALID_REQUEST_ERROR = "INVALID_REQUEST_ERROR"
    SKIPPED = "SKIPPED"
    SENT = "SENT"
    QUEUED = "QUEUED"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemResellerTypeEnum(
    str, enum.Enum
):
    AWS = "AWS"
    GCP = "GCP"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesResponseDataItemResellerRoyaltyResellerTypeEnum(
    str, enum.Enum
):
    AWS = "AWS"
    GCP = "GCP"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataBillableStatusEnum(
    str, enum.Enum
):
    BILLABLE = "billable"
    UNBILLABLE = "unbillable"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeEnum(
    str, enum.Enum
):
    AWS_MARKETPLACE = "aws_marketplace"
    STRIPE = "stripe"
    NETSUITE = "netsuite"
    CUSTOM = "custom"
    AZURE_MARKETPLACE = "azure_marketplace"
    QUICKBOOKS_ONLINE = "quickbooks_online"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusEnum(
    str, enum.Enum
):
    DRAFT = "DRAFT"
    FINALIZED = "FINALIZED"
    PAID = "PAID"
    UNCOLLECTIBLE = "UNCOLLECTIBLE"
    VOID = "VOID"
    DELETED = "DELETED"
    PAYMENT_FAILED = "PAYMENT_FAILED"
    INVALID_REQUEST_ERROR = "INVALID_REQUEST_ERROR"
    SKIPPED = "SKIPPED"
    SENT = "SENT"
    QUEUED = "QUEUED"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataExternalInvoiceBillingProviderTypeEnum(
    str, enum.Enum
):
    AWS_MARKETPLACE = "aws_marketplace"
    STRIPE = "stripe"
    NETSUITE = "netsuite"
    CUSTOM = "custom"
    AZURE_MARKETPLACE = "azure_marketplace"
    QUICKBOOKS_ONLINE = "quickbooks_online"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataExternalInvoiceExternalStatusEnum(
    str, enum.Enum
):
    DRAFT = "DRAFT"
    FINALIZED = "FINALIZED"
    PAID = "PAID"
    UNCOLLECTIBLE = "UNCOLLECTIBLE"
    VOID = "VOID"
    DELETED = "DELETED"
    PAYMENT_FAILED = "PAYMENT_FAILED"
    INVALID_REQUEST_ERROR = "INVALID_REQUEST_ERROR"
    SKIPPED = "SKIPPED"
    SENT = "SENT"
    QUEUED = "QUEUED"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemResellerTypeEnum(
    str, enum.Enum
):
    AWS = "AWS"
    GCP = "GCP"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataResellerRoyaltyResellerTypeEnum(
    str, enum.Enum
):
    AWS = "AWS"
    GCP = "GCP"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdPlansCustomerPlanIdPriceAdjustmentsResponseDataItemChargeTypeEnum(
    str, enum.Enum
):
    USAGE = "usage"
    FIXED = "fixed"
    COMPOSITE = "composite"
    MINIMUM = "minimum"
    SEAT = "seat"

    def __str__(self) -> str:
        return self.value


class GetCustomersCustomerIdPlansCustomerPlanIdPriceAdjustmentsResponseDataItemPricesItemAdjustmentTypeEnum(
    str, enum.Enum
):
    FIXED = "fixed"
    QUANTITY = "quantity"
    PERCENTAGE = "percentage"
    OVERRIDE = "override"

    def __str__(self) -> str:
        return self.value


class GetPlanDetailsPlanIdChargesResponseDataItemChargeTypeEnum(str, enum.Enum):
    USAGE = "usage"
    FIXED = "fixed"
    COMPOSITE = "composite"
    MINIMUM = "minimum"
    SEAT = "seat"

    def __str__(self) -> str:
        return self.value


class GetPlanDetailsPlanIdChargesResponseDataItemUnitConversionRoundingBehaviorEnum(
    str, enum.Enum
):
    FLOOR = "floor"
    CEILING = "ceiling"

    def __str__(self) -> str:
        return self.value


class GetPlanDetailsPlanIdCustomersStatusEnum(str, enum.Enum):
    ALL = "all"
    ACTIVE = "active"
    ENDED = "ended"
    UPCOMING = "upcoming"

    def __str__(self) -> str:
        return self.value


class GetPlanDetailsPlanIdCustomersResponseDataItemCustomerDetailsCurrentBillableStatusValueEnum(
    str, enum.Enum
):
    BILLABLE = "billable"
    UNBILLABLE = "unbillable"

    def __str__(self) -> str:
        return self.value


class PostAlertsCreateBodyAlertTypeEnum(str, enum.Enum):
    LOW_CREDIT_BALANCE_REACHED = "low_credit_balance_reached"
    SPEND_THRESHOLD_REACHED = "spend_threshold_reached"
    MONTHLY_INVOICE_TOTAL_SPEND_THRESHOLD_REACHED = (
        "monthly_invoice_total_spend_threshold_reached"
    )
    LOW_REMAINING_DAYS_IN_PLAN_REACHED = "low_remaining_days_in_plan_reached"
    LOW_REMAINING_CREDIT_PERCENTAGE_REACHED = "low_remaining_credit_percentage_reached"
    USAGE_THRESHOLD_REACHED = "usage_threshold_reached"

    def __str__(self) -> str:
        return self.value


class PostCustomFieldsAddKeyBodyEntityEnum(str, enum.Enum):
    CHARGE = "charge"
    CREDIT_GRANT = "credit_grant"
    CUSTOMER = "customer"
    CUSTOMER_PLAN = "customer_plan"
    PLAN = "plan"
    PRODUCT = "product"
    BILLABLE_METRIC = "billable_metric"
    COMMIT = "commit"

    def __str__(self) -> str:
        return self.value


class PostCustomFieldsDeleteValuesBodyEntityEnum(str, enum.Enum):
    CHARGE = "charge"
    CREDIT_GRANT = "credit_grant"
    CUSTOMER = "customer"
    CUSTOMER_PLAN = "customer_plan"
    PLAN = "plan"
    PRODUCT = "product"
    BILLABLE_METRIC = "billable_metric"
    COMMIT = "commit"

    def __str__(self) -> str:
        return self.value


class PostCustomFieldsListKeysBodyEntitiesItemEnum(str, enum.Enum):
    CHARGE = "charge"
    CREDIT_GRANT = "credit_grant"
    CUSTOMER = "customer"
    CUSTOMER_PLAN = "customer_plan"
    PLAN = "plan"
    PRODUCT = "product"
    BILLABLE_METRIC = "billable_metric"
    COMMIT = "commit"

    def __str__(self) -> str:
        return self.value


class PostCustomFieldsListKeysResponseDataItemEntityEnum(str, enum.Enum):
    CHARGE = "charge"
    CREDIT_GRANT = "credit_grant"
    CUSTOMER = "customer"
    CUSTOMER_PLAN = "customer_plan"
    PLAN = "plan"
    PRODUCT = "product"
    BILLABLE_METRIC = "billable_metric"
    COMMIT = "commit"

    def __str__(self) -> str:
        return self.value


class PostCustomFieldsRemoveKeyBodyEntityEnum(str, enum.Enum):
    CHARGE = "charge"
    CREDIT_GRANT = "credit_grant"
    CUSTOMER = "customer"
    CUSTOMER_PLAN = "customer_plan"
    PLAN = "plan"
    PRODUCT = "product"
    BILLABLE_METRIC = "billable_metric"
    COMMIT = "commit"

    def __str__(self) -> str:
        return self.value


class PostCustomFieldsSetValuesBodyEntityEnum(str, enum.Enum):
    CHARGE = "charge"
    CREDIT_GRANT = "credit_grant"
    CUSTOMER = "customer"
    CUSTOMER_PLAN = "customer_plan"
    PLAN = "plan"
    PRODUCT = "product"
    BILLABLE_METRIC = "billable_metric"
    COMMIT = "commit"

    def __str__(self) -> str:
        return self.value


class PostCustomerAlertsGetResponseDataAlertStatusEnum(str, enum.Enum):
    ENABLED = "enabled"
    ARCHIVED = "archived"
    DISABLED = "disabled"

    def __str__(self) -> str:
        return self.value


class PostCustomerAlertsGetResponseDataAlertTypeEnum(str, enum.Enum):
    LOW_CREDIT_BALANCE_REACHED = "low_credit_balance_reached"
    SPEND_THRESHOLD_REACHED = "spend_threshold_reached"
    MONTHLY_INVOICE_TOTAL_SPEND_THRESHOLD_REACHED = (
        "monthly_invoice_total_spend_threshold_reached"
    )
    LOW_REMAINING_DAYS_IN_PLAN_REACHED = "low_remaining_days_in_plan_reached"
    LOW_REMAINING_CREDIT_PERCENTAGE_REACHED = "low_remaining_credit_percentage_reached"
    USAGE_THRESHOLD_REACHED = "usage_threshold_reached"

    def __str__(self) -> str:
        return self.value


class PostCustomerAlertsGetResponseDataCustomerStatusEnum(str, enum.Enum):
    OK = "ok"
    IN_ALARM = "in_alarm"
    EVALUATING = "evaluating"

    def __str__(self) -> str:
        return self.value


class PostCustomerAlertsListBodyAlertStatusesItemEnum(str, enum.Enum):
    ENABLED = "enabled"
    DISABLED = "disabled"
    ARCHIVED = "archived"
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"
    ARCHIVED = "ARCHIVED"
    ENABLED = "Enabled"
    DISABLED = "Disabled"
    ARCHIVED = "Archived"

    def __str__(self) -> str:
        return self.value


class PostCustomerAlertsListResponseDataItemAlertStatusEnum(str, enum.Enum):
    ENABLED = "enabled"
    ARCHIVED = "archived"
    DISABLED = "disabled"

    def __str__(self) -> str:
        return self.value


class PostCustomerAlertsListResponseDataItemAlertTypeEnum(str, enum.Enum):
    LOW_CREDIT_BALANCE_REACHED = "low_credit_balance_reached"
    SPEND_THRESHOLD_REACHED = "spend_threshold_reached"
    MONTHLY_INVOICE_TOTAL_SPEND_THRESHOLD_REACHED = (
        "monthly_invoice_total_spend_threshold_reached"
    )
    LOW_REMAINING_DAYS_IN_PLAN_REACHED = "low_remaining_days_in_plan_reached"
    LOW_REMAINING_CREDIT_PERCENTAGE_REACHED = "low_remaining_credit_percentage_reached"
    USAGE_THRESHOLD_REACHED = "usage_threshold_reached"

    def __str__(self) -> str:
        return self.value


class PostCustomerAlertsListResponseDataItemCustomerStatusEnum(str, enum.Enum):
    OK = "ok"
    IN_ALARM = "in_alarm"
    EVALUATING = "evaluating"

    def __str__(self) -> str:
        return self.value


class PostCustomersBodyBillingConfigAwsRegionEnum(str, enum.Enum):
    AF_SOUTH_1 = "af-south-1"
    AP_EAST_1 = "ap-east-1"
    AP_NORTHEAST_1 = "ap-northeast-1"
    AP_NORTHEAST_2 = "ap-northeast-2"
    AP_NORTHEAST_3 = "ap-northeast-3"
    AP_SOUTH_1 = "ap-south-1"
    AP_SOUTHEAST_1 = "ap-southeast-1"
    AP_SOUTHEAST_2 = "ap-southeast-2"
    CA_CENTRAL_1 = "ca-central-1"
    CN_NORTH_1 = "cn-north-1"
    CN_NORTHWEST_1 = "cn-northwest-1"
    EU_CENTRAL_1 = "eu-central-1"
    EU_NORTH_1 = "eu-north-1"
    EU_SOUTH_1 = "eu-south-1"
    EU_WEST_1 = "eu-west-1"
    EU_WEST_2 = "eu-west-2"
    EU_WEST_3 = "eu-west-3"
    ME_SOUTH_1 = "me-south-1"
    SA_EAST_1 = "sa-east-1"
    US_EAST_1 = "us-east-1"
    US_EAST_2 = "us-east-2"
    US_GOV_EAST_1 = "us-gov-east-1"
    US_GOV_WEST_1 = "us-gov-west-1"
    US_WEST_1 = "us-west-1"
    US_WEST_2 = "us-west-2"

    def __str__(self) -> str:
        return self.value


class PostCustomersBodyBillingConfigBillingProviderTypeEnum(str, enum.Enum):
    AWS_MARKETPLACE = "aws_marketplace"
    STRIPE = "stripe"
    NETSUITE = "netsuite"
    CUSTOM = "custom"
    AZURE_MARKETPLACE = "azure_marketplace"
    QUICKBOOKS_ONLINE = "quickbooks_online"

    def __str__(self) -> str:
        return self.value


class PostCustomersBodyBillingConfigStripeCollectionMethodEnum(str, enum.Enum):
    CHARGE_AUTOMATICALLY = "charge_automatically"
    SEND_INVOICE = "send_invoice"

    def __str__(self) -> str:
        return self.value


class PostCustomersCustomerIdBillingConfigBillingProviderTypeBillingProviderTypeEnum(
    str, enum.Enum
):
    AWS_MARKETPLACE = "aws_marketplace"
    STRIPE = "stripe"
    NETSUITE = "netsuite"
    CUSTOM = "custom"
    AZURE_MARKETPLACE = "azure_marketplace"
    QUICKBOOKS_ONLINE = "quickbooks_online"

    def __str__(self) -> str:
        return self.value


class PostCustomersCustomerIdBillingConfigBillingProviderTypeBodyAwsRegionEnum(
    str, enum.Enum
):
    AF_SOUTH_1 = "af-south-1"
    AP_EAST_1 = "ap-east-1"
    AP_NORTHEAST_1 = "ap-northeast-1"
    AP_NORTHEAST_2 = "ap-northeast-2"
    AP_NORTHEAST_3 = "ap-northeast-3"
    AP_SOUTH_1 = "ap-south-1"
    AP_SOUTHEAST_1 = "ap-southeast-1"
    AP_SOUTHEAST_2 = "ap-southeast-2"
    CA_CENTRAL_1 = "ca-central-1"
    CN_NORTH_1 = "cn-north-1"
    CN_NORTHWEST_1 = "cn-northwest-1"
    EU_CENTRAL_1 = "eu-central-1"
    EU_NORTH_1 = "eu-north-1"
    EU_SOUTH_1 = "eu-south-1"
    EU_WEST_1 = "eu-west-1"
    EU_WEST_2 = "eu-west-2"
    EU_WEST_3 = "eu-west-3"
    ME_SOUTH_1 = "me-south-1"
    SA_EAST_1 = "sa-east-1"
    US_EAST_1 = "us-east-1"
    US_EAST_2 = "us-east-2"
    US_GOV_EAST_1 = "us-gov-east-1"
    US_GOV_WEST_1 = "us-gov-west-1"
    US_WEST_1 = "us-west-1"
    US_WEST_2 = "us-west-2"

    def __str__(self) -> str:
        return self.value


class PostCustomersCustomerIdBillingConfigBillingProviderTypeBodyStripeCollectionMethodEnum(
    str, enum.Enum
):
    CHARGE_AUTOMATICALLY = "charge_automatically"
    SEND_INVOICE = "send_invoice"

    def __str__(self) -> str:
        return self.value


class PostCustomersCustomerIdPlansAddBodyPriceAdjustmentsItemAdjustmentTypeEnum(
    str, enum.Enum
):
    PERCENTAGE = "percentage"
    FIXED = "fixed"
    OVERRIDE = "override"
    QUANTITY = "quantity"

    def __str__(self) -> str:
        return self.value


class PostDashboardsGetEmbeddableUrlBodyColorOverridesItemNameEnum(str, enum.Enum):
    GRAY_DARK = "Gray_dark"
    GRAY_MEDIUM = "Gray_medium"
    GRAY_LIGHT = "Gray_light"
    GRAY_EXTRALIGHT = "Gray_extralight"
    WHITE = "White"
    PRIMARY_MEDIUM = "Primary_medium"
    PRIMARY_LIGHT = "Primary_light"
    USAGE_LINE_0 = "UsageLine_0"
    USAGE_LINE_1 = "UsageLine_1"
    USAGE_LINE_2 = "UsageLine_2"
    USAGE_LINE_3 = "UsageLine_3"
    USAGE_LINE_4 = "UsageLine_4"
    USAGE_LINE_5 = "UsageLine_5"
    USAGE_LINE_6 = "UsageLine_6"
    USAGE_LINE_7 = "UsageLine_7"
    USAGE_LINE_8 = "UsageLine_8"
    USAGE_LINE_9 = "UsageLine_9"
    PRIMARY_GREEN = "Primary_green"
    PRIMARY_RED = "Primary_red"

    def __str__(self) -> str:
        return self.value


class PostDashboardsGetEmbeddableUrlBodyDashboardEnum(str, enum.Enum):
    INVOICES = "invoices"
    USAGE = "usage"
    CREDITS = "credits"

    def __str__(self) -> str:
        return self.value


class PostUsageBodyWindowSizeEnum(str, enum.Enum):
    HOUR = "hour"
    DAY = "day"
    NONE = "none"
    HOUR = "HOUR"
    DAY = "DAY"
    NONE = "NONE"
    HOUR = "Hour"
    DAY = "Day"
    NONE = "None"

    def __str__(self) -> str:
        return self.value


class PostUsageGroupsBodyWindowSizeEnum(str, enum.Enum):
    HOUR = "hour"
    DAY = "day"
    NONE = "none"
    HOUR = "HOUR"
    DAY = "DAY"
    NONE = "NONE"
    HOUR = "Hour"
    DAY = "Day"
    NONE = "None"

    def __str__(self) -> str:
        return self.value


class DeleteCustomersCustomerIdBillingConfigBillingProviderTypeResponse404(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAuditLogsResponseDataItemActor(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    email: typing.Optional[str] = _PydanticField(alias="email", default=None)
    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCreditTypesListResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    is_currency: typing.Optional[bool] = _PydanticField(
        alias="is_currency", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersResponseDataItemCurrentBillableStatus(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    effective_at: typing.Optional[str] = _PydanticField(
        alias="effective_at", default=None
    )
    value: GetCustomersResponseDataItemCurrentBillableStatusValueEnum = _PydanticField(
        alias="value"
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersResponseDataItemCustomFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersResponseDataItemCustomerConfig(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    salesforce_account_id: typing.Optional[str] = _PydanticField(
        alias="salesforce_account_id", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdResponseDataCurrentBillableStatus(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    effective_at: typing.Optional[str] = _PydanticField(
        alias="effective_at", default=None
    )
    value: GetCustomersCustomerIdResponseDataCurrentBillableStatusValueEnum = (
        _PydanticField(alias="value")
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdResponseDataCustomFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdResponseDataCustomerConfig(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    salesforce_account_id: typing.Optional[str] = _PydanticField(
        alias="salesforce_account_id", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdBillableMetricsResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    group_by: typing.Optional[typing.List[str]] = _PydanticField(
        alias="group_by", default=None
    )
    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdBillingConfigBillingProviderTypeResponseData(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    aws_expiration_date: typing.Optional[str] = _PydanticField(
        alias="aws_expiration_date", default=None
    )
    aws_product_code: typing.Optional[str] = _PydanticField(
        alias="aws_product_code", default=None
    )
    aws_region: typing.Optional[
        GetCustomersCustomerIdBillingConfigBillingProviderTypeResponseDataAwsRegionEnum
    ] = _PydanticField(alias="aws_region", default=None)
    azure_expiration_date: typing.Optional[str] = _PydanticField(
        alias="azure_expiration_date", default=None
    )
    azure_plan_id: typing.Optional[str] = _PydanticField(
        alias="azure_plan_id", default=None
    )
    azure_start_date: typing.Optional[str] = _PydanticField(
        alias="azure_start_date", default=None
    )
    azure_subscription_status: typing.Optional[
        GetCustomersCustomerIdBillingConfigBillingProviderTypeResponseDataAzureSubscriptionStatusEnum
    ] = _PydanticField(alias="azure_subscription_status", default=None)
    billing_provider_customer_id: typing.Optional[str] = _PydanticField(
        alias="billing_provider_customer_id", default=None
    )
    stripe_collection_method: typing.Optional[
        GetCustomersCustomerIdBillingConfigBillingProviderTypeResponseDataStripeCollectionMethodEnum
    ] = _PydanticField(alias="stripe_collection_method", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdBillingConfigBillingProviderTypeResponse404(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdCostsResponseDataItemCreditTypesAdditionalPropsLineItemBreakdownItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: float = _PydanticField(alias="cost")
    group_key: typing.Optional[str] = _PydanticField(alias="group_key", default=None)
    group_value: typing.Optional[str] = _PydanticField(
        alias="group_value", default=None
    )
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdCostsResponse400(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdCostsResponse404(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemCorrectionRecordCorrectedExternalInvoice(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    billing_provider_type: GetCustomersCustomerIdInvoicesResponseDataItemCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeEnum = _PydanticField(
        alias="billing_provider_type"
    )
    external_status: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemCorrectionRecordCorrectedExternalInvoiceExternalStatusEnum
    ] = _PydanticField(alias="external_status", default=None)
    invoice_id: typing.Optional[str] = _PydanticField(alias="invoice_id", default=None)
    issued_at_timestamp: typing.Optional[str] = _PydanticField(
        alias="issued_at_timestamp", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemCreditType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemCustomFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, typing.Any]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemExternalInvoice(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    billing_provider_type: GetCustomersCustomerIdInvoicesResponseDataItemExternalInvoiceBillingProviderTypeEnum = _PydanticField(
        alias="billing_provider_type"
    )
    external_status: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemExternalInvoiceExternalStatusEnum
    ] = _PydanticField(alias="external_status", default=None)
    invoice_id: typing.Optional[str] = _PydanticField(alias="invoice_id", default=None)
    issued_at_timestamp: typing.Optional[str] = _PydanticField(
        alias="issued_at_timestamp", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemInvoiceAdjustmentsItemCreditType(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemCreditType(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemCustomFields(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemPostpaidCommit(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemSubLineItemsItemCustomFields(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemSubLineItemsItemTiersItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    price: float = _PydanticField(alias="price")
    quantity: float = _PydanticField(alias="quantity")
    starting_at: float = _PydanticField(alias="starting_at")
    subtotal: float = _PydanticField(alias="subtotal")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemPlanCustomFields(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemResellerRoyaltyAwsOptions(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    aws_account_number: typing.Optional[str] = _PydanticField(
        alias="aws_account_number", default=None
    )
    aws_offer_id: typing.Optional[str] = _PydanticField(
        alias="aws_offer_id", default=None
    )
    aws_payer_reference_id: typing.Optional[str] = _PydanticField(
        alias="aws_payer_reference_id", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemResellerRoyaltyGcpOptions(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    gcp_account_id: typing.Optional[str] = _PydanticField(
        alias="gcp_account_id", default=None
    )
    gcp_offer_id: typing.Optional[str] = _PydanticField(
        alias="gcp_offer_id", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponse404(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCorrectionRecordCorrectedExternalInvoice(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    billing_provider_type: GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeEnum = _PydanticField(
        alias="billing_provider_type"
    )
    external_status: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusEnum
    ] = _PydanticField(alias="external_status", default=None)
    invoice_id: typing.Optional[str] = _PydanticField(alias="invoice_id", default=None)
    issued_at_timestamp: typing.Optional[str] = _PydanticField(
        alias="issued_at_timestamp", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCreditType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCustomFields(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, typing.Any]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataExternalInvoice(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    billing_provider_type: GetCustomersCustomerIdInvoicesInvoiceIdResponseDataExternalInvoiceBillingProviderTypeEnum = _PydanticField(
        alias="billing_provider_type"
    )
    external_status: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataExternalInvoiceExternalStatusEnum
    ] = _PydanticField(alias="external_status", default=None)
    invoice_id: typing.Optional[str] = _PydanticField(alias="invoice_id", default=None)
    issued_at_timestamp: typing.Optional[str] = _PydanticField(
        alias="issued_at_timestamp", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataInvoiceAdjustmentsItemCreditType(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemCreditType(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemCustomFields(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemPostpaidCommit(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemSubLineItemsItemCustomFields(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemSubLineItemsItemTiersItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    price: float = _PydanticField(alias="price")
    quantity: float = _PydanticField(alias="quantity")
    starting_at: float = _PydanticField(alias="starting_at")
    subtotal: float = _PydanticField(alias="subtotal")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataPlanCustomFields(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataResellerRoyaltyAwsOptions(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    aws_account_number: typing.Optional[str] = _PydanticField(
        alias="aws_account_number", default=None
    )
    aws_offer_id: typing.Optional[str] = _PydanticField(
        alias="aws_offer_id", default=None
    )
    aws_payer_reference_id: typing.Optional[str] = _PydanticField(
        alias="aws_payer_reference_id", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataResellerRoyaltyGcpOptions(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    gcp_account_id: typing.Optional[str] = _PydanticField(
        alias="gcp_account_id", default=None
    )
    gcp_offer_id: typing.Optional[str] = _PydanticField(
        alias="gcp_offer_id", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponse404(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdPlansResponseDataItemCustomFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdPlansResponseDataItemTrialInfoSpendingCapsItemCreditType(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdPlansCustomerPlanIdPriceAdjustmentsResponseDataItemPricesItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    adjustment_type: GetCustomersCustomerIdPlansCustomerPlanIdPriceAdjustmentsResponseDataItemPricesItemAdjustmentTypeEnum = _PydanticField(
        alias="adjustment_type"
    )
    tier: typing.Optional[float] = _PydanticField(alias="tier", default=None)
    value: typing.Optional[float] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdResponseDataCreditGrantsItemAmountGrantedCreditType(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdResponseDataCreditGrantsItemAmountPaidCreditType(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdResponseDataCustomFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdResponseDataMinimumsItemCreditType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdResponseDataOverageRatesItemCreditType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdResponseDataOverageRatesItemFiatCreditType(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdChargesResponseDataItemCreditType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdChargesResponseDataItemCustomFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdChargesResponseDataItemPricesItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    collection_interval: typing.Optional[float] = _PydanticField(
        alias="collection_interval", default=None
    )
    collection_schedule: typing.Optional[str] = _PydanticField(
        alias="collection_schedule", default=None
    )
    quantity: typing.Optional[float] = _PydanticField(alias="quantity", default=None)
    tier: float = _PydanticField(alias="tier")
    value: float = _PydanticField(alias="value")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdChargesResponseDataItemUnitConversion(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    division_factor: float = _PydanticField(alias="division_factor")
    rounding_behavior: typing.Optional[
        GetPlanDetailsPlanIdChargesResponseDataItemUnitConversionRoundingBehaviorEnum
    ] = _PydanticField(alias="rounding_behavior", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdCustomersResponseDataItemCustomerDetailsCurrentBillableStatus(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    effective_at: typing.Optional[str] = _PydanticField(
        alias="effective_at", default=None
    )
    value: GetPlanDetailsPlanIdCustomersResponseDataItemCustomerDetailsCurrentBillableStatusValueEnum = _PydanticField(
        alias="value"
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdCustomersResponseDataItemCustomerDetailsCustomFields(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdCustomersResponseDataItemCustomerDetailsCustomerConfig(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    salesforce_account_id: typing.Optional[str] = _PydanticField(
        alias="salesforce_account_id", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdCustomersResponseDataItemPlanDetailsCustomFields(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlansResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    description: str = _PydanticField(alias="description")
    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostAlertsArchiveBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostAlertsArchiveResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostAlertsArchiveResponse404(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostAlertsCreateBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    alert_type: PostAlertsCreateBodyAlertTypeEnum = _PydanticField(alias="alert_type")
    billable_metric_id: typing.Optional[str] = _PydanticField(
        alias="billable_metric_id", default=None
    )
    credit_type_id: typing.Optional[str] = _PydanticField(
        alias="credit_type_id", default=None
    )
    customer_id: typing.Optional[str] = _PydanticField(
        alias="customer_id", default=None
    )
    name: str = _PydanticField(alias="name")
    plan_id: typing.Optional[str] = _PydanticField(alias="plan_id", default=None)
    threshold: float = _PydanticField(alias="threshold")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostAlertsCreateResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsCreateGrantBodyGrantAmount(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: float = _PydanticField(alias="amount")
    credit_type_id: str = _PydanticField(alias="credit_type_id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsCreateGrantBodyPaidAmount(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: float = _PydanticField(alias="amount")
    credit_type_id: str = _PydanticField(alias="credit_type_id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsCreateGrantResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsEditGrantBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    expires_at: typing.Optional[str] = _PydanticField(alias="expires_at", default=None)
    id: str = _PydanticField(alias="id")
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsEditGrantResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsEditGrantResponse400(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListEntriesBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_type_ids: typing.Optional[typing.List[str]] = _PydanticField(
        alias="credit_type_ids", default=None
    )
    customer_ids: typing.Optional[typing.List[str]] = _PydanticField(
        alias="customer_ids", default=None
    )
    ending_before: typing.Optional[str] = _PydanticField(
        alias="ending_before", default=None
    )
    starting_on: typing.Optional[str] = _PydanticField(
        alias="starting_on", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListEntriesResponseDataItemLedgersItemCreditType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListEntriesResponseDataItemLedgersItemEndingBalance(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    effective_at: str = _PydanticField(alias="effective_at")
    excluding_pending: float = _PydanticField(alias="excluding_pending")
    including_pending: float = _PydanticField(alias="including_pending")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListEntriesResponseDataItemLedgersItemEntriesItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: float = _PydanticField(alias="amount")
    created_by: str = _PydanticField(alias="created_by")
    credit_grant_id: str = _PydanticField(alias="credit_grant_id")
    effective_at: str = _PydanticField(alias="effective_at")
    invoice_id: typing.Optional[str] = _PydanticField(alias="invoice_id", default=None)
    reason: str = _PydanticField(alias="reason")
    running_balance: float = _PydanticField(alias="running_balance")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListEntriesResponseDataItemLedgersItemPendingEntriesItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: float = _PydanticField(alias="amount")
    created_by: str = _PydanticField(alias="created_by")
    credit_grant_id: str = _PydanticField(alias="credit_grant_id")
    effective_at: str = _PydanticField(alias="effective_at")
    invoice_id: typing.Optional[str] = _PydanticField(alias="invoice_id", default=None)
    reason: str = _PydanticField(alias="reason")
    running_balance: float = _PydanticField(alias="running_balance")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListEntriesResponseDataItemLedgersItemStartingBalance(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    effective_at: str = _PydanticField(alias="effective_at")
    excluding_pending: float = _PydanticField(alias="excluding_pending")
    including_pending: float = _PydanticField(alias="including_pending")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListEntriesResponse404(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_grant_ids: typing.Optional[typing.List[str]] = _PydanticField(
        alias="credit_grant_ids", default=None
    )
    credit_type_ids: typing.Optional[typing.List[str]] = _PydanticField(
        alias="credit_type_ids", default=None
    )
    customer_ids: typing.Optional[typing.List[str]] = _PydanticField(
        alias="customer_ids", default=None
    )
    effective_before: typing.Optional[str] = _PydanticField(
        alias="effective_before", default=None
    )
    not_expiring_before: typing.Optional[str] = _PydanticField(
        alias="not_expiring_before", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsResponseDataItemBalance(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    effective_at: str = _PydanticField(alias="effective_at")
    excluding_pending: float = _PydanticField(alias="excluding_pending")
    including_pending: float = _PydanticField(alias="including_pending")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsResponseDataItemCustomFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsResponseDataItemDeductionsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: float = _PydanticField(alias="amount")
    created_by: str = _PydanticField(alias="created_by")
    credit_grant_id: str = _PydanticField(alias="credit_grant_id")
    effective_at: str = _PydanticField(alias="effective_at")
    invoice_id: typing.Optional[str] = _PydanticField(alias="invoice_id", default=None)
    reason: str = _PydanticField(alias="reason")
    running_balance: float = _PydanticField(alias="running_balance")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsResponseDataItemGrantAmountCreditType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsResponseDataItemPaidAmountCreditType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsResponseDataItemPendingDeductionsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: float = _PydanticField(alias="amount")
    created_by: str = _PydanticField(alias="created_by")
    credit_grant_id: str = _PydanticField(alias="credit_grant_id")
    effective_at: str = _PydanticField(alias="effective_at")
    invoice_id: typing.Optional[str] = _PydanticField(alias="invoice_id", default=None)
    reason: str = _PydanticField(alias="reason")
    running_balance: float = _PydanticField(alias="running_balance")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsResponseDataItemProductsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsVoidGrantBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsVoidGrantResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsVoidGrantResponse400(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomFieldsAddKeyBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    enforce_uniqueness: bool = _PydanticField(alias="enforce_uniqueness")
    entity: PostCustomFieldsAddKeyBodyEntityEnum = _PydanticField(alias="entity")
    key: str = _PydanticField(alias="key")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomFieldsDeleteValuesBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    entity: PostCustomFieldsDeleteValuesBodyEntityEnum = _PydanticField(alias="entity")
    entity_id: str = _PydanticField(alias="entity_id")
    keys: typing.List[str] = _PydanticField(alias="keys")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomFieldsListKeysBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    entities: typing.Optional[
        typing.List[PostCustomFieldsListKeysBodyEntitiesItemEnum]
    ] = _PydanticField(alias="entities", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomFieldsListKeysResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    enforce_uniqueness: bool = _PydanticField(alias="enforce_uniqueness")
    entity: PostCustomFieldsListKeysResponseDataItemEntityEnum = _PydanticField(
        alias="entity"
    )
    key: str = _PydanticField(alias="key")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomFieldsRemoveKeyBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    entity: PostCustomFieldsRemoveKeyBodyEntityEnum = _PydanticField(alias="entity")
    key: str = _PydanticField(alias="key")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomFieldsSetValuesBodyCustomFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomerAlertsGetBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    alert_id: str = _PydanticField(alias="alert_id")
    customer_id: str = _PydanticField(alias="customer_id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomerAlertsGetResponseDataAlertCreditType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomerAlertsGetResponse404(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomerAlertsListBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    alert_statuses: typing.Optional[
        typing.List[PostCustomerAlertsListBodyAlertStatusesItemEnum]
    ] = _PydanticField(alias="alert_statuses", default=None)
    customer_id: str = _PydanticField(alias="customer_id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomerAlertsListResponseDataItemAlertCreditType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersBodyBillingConfig(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    aws_product_code: typing.Optional[str] = _PydanticField(
        alias="aws_product_code", default=None
    )
    aws_region: typing.Optional[
        PostCustomersBodyBillingConfigAwsRegionEnum
    ] = _PydanticField(alias="aws_region", default=None)
    billing_provider_customer_id: str = _PydanticField(
        alias="billing_provider_customer_id"
    )
    billing_provider_type: PostCustomersBodyBillingConfigBillingProviderTypeEnum = (
        _PydanticField(alias="billing_provider_type")
    )
    stripe_collection_method: typing.Optional[
        PostCustomersBodyBillingConfigStripeCollectionMethodEnum
    ] = _PydanticField(alias="stripe_collection_method", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersBodyCustomFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersResponseDataCustomFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersResponse409(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: typing.Optional[str] = _PydanticField(alias="message", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersArchiveBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersArchiveResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersArchiveResponse400(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersArchiveResponse404(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdBillingConfigBillingProviderTypeBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    aws_product_code: typing.Optional[str] = _PydanticField(
        alias="aws_product_code", default=None
    )
    aws_region: typing.Optional[
        PostCustomersCustomerIdBillingConfigBillingProviderTypeBodyAwsRegionEnum
    ] = _PydanticField(alias="aws_region", default=None)
    billing_provider_customer_id: str = _PydanticField(
        alias="billing_provider_customer_id"
    )
    stripe_collection_method: typing.Optional[
        PostCustomersCustomerIdBillingConfigBillingProviderTypeBodyStripeCollectionMethodEnum
    ] = _PydanticField(alias="stripe_collection_method", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdBillingConfigBillingProviderTypeResponse400(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdBillingConfigBillingProviderTypeResponse404(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdPlansAddBodyPriceAdjustmentsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    adjustment_type: PostCustomersCustomerIdPlansAddBodyPriceAdjustmentsItemAdjustmentTypeEnum = _PydanticField(
        alias="adjustment_type"
    )
    charge_id: str = _PydanticField(alias="charge_id")
    quantity: typing.Optional[float] = _PydanticField(alias="quantity", default=None)
    start_period: float = _PydanticField(alias="start_period")
    tier: typing.Optional[float] = _PydanticField(alias="tier", default=None)
    value: typing.Optional[float] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdPlansAddResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdPlansCustomerPlanIdEndBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ending_before: typing.Optional[str] = _PydanticField(
        alias="ending_before", default=None
    )
    void_invoices: typing.Optional[bool] = _PydanticField(
        alias="void_invoices", default=None
    )
    void_stripe_invoices: typing.Optional[bool] = _PydanticField(
        alias="void_stripe_invoices", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdSetIngestAliasesBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ingest_aliases: typing.List[str] = _PydanticField(alias="ingest_aliases")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdSetNameBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdSetNameResponseDataCustomFields(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdUpdateConfigBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    leave_stripe_invoices_in_draft: typing.Optional[bool] = _PydanticField(
        alias="leave_stripe_invoices_in_draft", default=None
    )
    salesforce_account_id: typing.Optional[str] = _PydanticField(
        alias="salesforce_account_id", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdUpdateConfigResponse400(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdUpdateConfigResponse404(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostDashboardsGetEmbeddableUrlBodyColorOverridesItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    name: typing.Optional[
        PostDashboardsGetEmbeddableUrlBodyColorOverridesItemNameEnum
    ] = _PydanticField(alias="name", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostDashboardsGetEmbeddableUrlBodyDashboardOptionsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    key: str = _PydanticField(alias="key")
    value: str = _PydanticField(alias="value")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostDashboardsGetEmbeddableUrlResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    url: typing.Optional[str] = _PydanticField(alias="url", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostDashboardsGetEmbeddableUrlResponse400(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostIngestBodyItemProperties(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, typing.Any]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostUsageBodyBillableMetricsItemGroupBy(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    key: str = _PydanticField(alias="key")
    values: typing.Optional[typing.List[str]] = _PydanticField(
        alias="values", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostUsageResponseDataItemGroups(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, float]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostUsageGroupsBodyGroupBy(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    key: str = _PydanticField(alias="key")
    values: typing.Optional[typing.List[str]] = _PydanticField(
        alias="values", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostUsageGroupsResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ending_before: str = _PydanticField(alias="ending_before")
    group_key: typing.Optional[str] = _PydanticField(alias="group_key", default=None)
    group_value: typing.Optional[str] = _PydanticField(
        alias="group_value", default=None
    )
    starting_on: str = _PydanticField(alias="starting_on")
    value: typing.Optional[float] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAuditLogsResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action: typing.Optional[str] = _PydanticField(alias="action", default=None)
    actor: typing.Optional[GetAuditLogsResponseDataItemActor] = _PydanticField(
        alias="actor", default=None
    )
    id: str = _PydanticField(alias="id")
    resource_id: typing.Optional[str] = _PydanticField(
        alias="resource_id", default=None
    )
    resource_type: typing.Optional[str] = _PydanticField(
        alias="resource_type", default=None
    )
    status: typing.Optional[GetAuditLogsResponseDataItemStatusEnum] = _PydanticField(
        alias="status", default=None
    )
    timestamp: str = _PydanticField(alias="timestamp")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCreditTypesListResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[GetCreditTypesListResponseDataItem] = _PydanticField(alias="data")
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_billable_status: GetCustomersResponseDataItemCurrentBillableStatus = (
        _PydanticField(alias="current_billable_status")
    )
    custom_fields: GetCustomersResponseDataItemCustomFields = _PydanticField(
        alias="custom_fields"
    )
    customer_config: GetCustomersResponseDataItemCustomerConfig = _PydanticField(
        alias="customer_config"
    )
    external_id: str = _PydanticField(alias="external_id")
    id: str = _PydanticField(alias="id")
    ingest_aliases: typing.List[str] = _PydanticField(alias="ingest_aliases")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_billable_status: GetCustomersCustomerIdResponseDataCurrentBillableStatus = (
        _PydanticField(alias="current_billable_status")
    )
    custom_fields: GetCustomersCustomerIdResponseDataCustomFields = _PydanticField(
        alias="custom_fields"
    )
    customer_config: GetCustomersCustomerIdResponseDataCustomerConfig = _PydanticField(
        alias="customer_config"
    )
    external_id: str = _PydanticField(alias="external_id")
    id: str = _PydanticField(alias="id")
    ingest_aliases: typing.List[str] = _PydanticField(alias="ingest_aliases")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdBillableMetricsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[
        GetCustomersCustomerIdBillableMetricsResponseDataItem
    ] = _PydanticField(alias="data")
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdBillingConfigBillingProviderTypeResponse(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: GetCustomersCustomerIdBillingConfigBillingProviderTypeResponseData = (
        _PydanticField(alias="data")
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdCostsResponseDataItemCreditTypesAdditionalProps(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = _PydanticField(alias="cost", default=None)
    line_item_breakdown: typing.Optional[
        typing.List[
            GetCustomersCustomerIdCostsResponseDataItemCreditTypesAdditionalPropsLineItemBreakdownItem
        ]
    ] = _PydanticField(alias="line_item_breakdown", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemCorrectionRecord(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    corrected_external_invoice: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemCorrectionRecordCorrectedExternalInvoice
    ] = _PydanticField(alias="corrected_external_invoice", default=None)
    corrected_invoice_id: str = _PydanticField(alias="corrected_invoice_id")
    memo: str = _PydanticField(alias="memo")
    reason: str = _PydanticField(alias="reason")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemInvoiceAdjustmentsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_grant_id: typing.Optional[str] = _PydanticField(
        alias="credit_grant_id", default=None
    )
    credit_type: GetCustomersCustomerIdInvoicesResponseDataItemInvoiceAdjustmentsItemCreditType = _PydanticField(
        alias="credit_type"
    )
    name: str = _PydanticField(alias="name")
    total: float = _PydanticField(alias="total")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemSubLineItemsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    charge_id: typing.Optional[str] = _PydanticField(alias="charge_id", default=None)
    credit_grant_id: typing.Optional[str] = _PydanticField(
        alias="credit_grant_id", default=None
    )
    custom_fields: GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemSubLineItemsItemCustomFields = _PydanticField(
        alias="custom_fields"
    )
    name: str = _PydanticField(alias="name")
    price: typing.Optional[float] = _PydanticField(alias="price", default=None)
    quantity: float = _PydanticField(alias="quantity")
    subtotal: float = _PydanticField(alias="subtotal")
    tiers: typing.Optional[
        typing.List[
            GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemSubLineItemsItemTiersItem
        ]
    ] = _PydanticField(alias="tiers", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemResellerRoyalty(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    aws_options: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemResellerRoyaltyAwsOptions
    ] = _PydanticField(alias="aws_options", default=None)
    fraction: str = _PydanticField(alias="fraction")
    gcp_options: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemResellerRoyaltyGcpOptions
    ] = _PydanticField(alias="gcp_options", default=None)
    netsuite_reseller_id: str = _PydanticField(alias="netsuite_reseller_id")
    reseller_type: GetCustomersCustomerIdInvoicesResponseDataItemResellerRoyaltyResellerTypeEnum = _PydanticField(
        alias="reseller_type"
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCorrectionRecord(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    corrected_external_invoice: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCorrectionRecordCorrectedExternalInvoice
    ] = _PydanticField(alias="corrected_external_invoice", default=None)
    corrected_invoice_id: str = _PydanticField(alias="corrected_invoice_id")
    memo: str = _PydanticField(alias="memo")
    reason: str = _PydanticField(alias="reason")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataInvoiceAdjustmentsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_grant_id: typing.Optional[str] = _PydanticField(
        alias="credit_grant_id", default=None
    )
    credit_type: GetCustomersCustomerIdInvoicesInvoiceIdResponseDataInvoiceAdjustmentsItemCreditType = _PydanticField(
        alias="credit_type"
    )
    name: str = _PydanticField(alias="name")
    total: float = _PydanticField(alias="total")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemSubLineItemsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    charge_id: typing.Optional[str] = _PydanticField(alias="charge_id", default=None)
    credit_grant_id: typing.Optional[str] = _PydanticField(
        alias="credit_grant_id", default=None
    )
    custom_fields: GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemSubLineItemsItemCustomFields = _PydanticField(
        alias="custom_fields"
    )
    name: str = _PydanticField(alias="name")
    price: typing.Optional[float] = _PydanticField(alias="price", default=None)
    quantity: float = _PydanticField(alias="quantity")
    subtotal: float = _PydanticField(alias="subtotal")
    tiers: typing.Optional[
        typing.List[
            GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemSubLineItemsItemTiersItem
        ]
    ] = _PydanticField(alias="tiers", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataResellerRoyalty(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    aws_options: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataResellerRoyaltyAwsOptions
    ] = _PydanticField(alias="aws_options", default=None)
    fraction: str = _PydanticField(alias="fraction")
    gcp_options: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataResellerRoyaltyGcpOptions
    ] = _PydanticField(alias="gcp_options", default=None)
    netsuite_reseller_id: str = _PydanticField(alias="netsuite_reseller_id")
    reseller_type: GetCustomersCustomerIdInvoicesInvoiceIdResponseDataResellerRoyaltyResellerTypeEnum = _PydanticField(
        alias="reseller_type"
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdPlansResponseDataItemTrialInfoSpendingCapsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: float = _PydanticField(alias="amount")
    amount_remaining: float = _PydanticField(alias="amount_remaining")
    credit_type: GetCustomersCustomerIdPlansResponseDataItemTrialInfoSpendingCapsItemCreditType = _PydanticField(
        alias="credit_type"
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdPlansCustomerPlanIdPriceAdjustmentsResponseDataItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    charge_id: str = _PydanticField(alias="charge_id")
    charge_type: GetCustomersCustomerIdPlansCustomerPlanIdPriceAdjustmentsResponseDataItemChargeTypeEnum = _PydanticField(
        alias="charge_type"
    )
    prices: typing.List[
        GetCustomersCustomerIdPlansCustomerPlanIdPriceAdjustmentsResponseDataItemPricesItem
    ] = _PydanticField(alias="prices")
    quantity: typing.Optional[float] = _PydanticField(alias="quantity", default=None)
    start_period: float = _PydanticField(alias="start_period")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdResponseDataCreditGrantsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount_granted: float = _PydanticField(alias="amount_granted")
    amount_granted_credit_type: GetPlanDetailsPlanIdResponseDataCreditGrantsItemAmountGrantedCreditType = _PydanticField(
        alias="amount_granted_credit_type"
    )
    amount_paid: float = _PydanticField(alias="amount_paid")
    amount_paid_credit_type: GetPlanDetailsPlanIdResponseDataCreditGrantsItemAmountPaidCreditType = _PydanticField(
        alias="amount_paid_credit_type"
    )
    effective_duration: float = _PydanticField(alias="effective_duration")
    name: str = _PydanticField(alias="name")
    priority: str = _PydanticField(alias="priority")
    reason: typing.Optional[str] = _PydanticField(alias="reason", default=None)
    recurrence_duration: typing.Optional[float] = _PydanticField(
        alias="recurrence_duration", default=None
    )
    recurrence_interval: typing.Optional[float] = _PydanticField(
        alias="recurrence_interval", default=None
    )
    send_invoice: bool = _PydanticField(alias="send_invoice")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdResponseDataMinimumsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_type: GetPlanDetailsPlanIdResponseDataMinimumsItemCreditType = (
        _PydanticField(alias="credit_type")
    )
    name: str = _PydanticField(alias="name")
    start_period: float = _PydanticField(alias="start_period")
    value: float = _PydanticField(alias="value")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdResponseDataOverageRatesItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_type: GetPlanDetailsPlanIdResponseDataOverageRatesItemCreditType = (
        _PydanticField(alias="credit_type")
    )
    fiat_credit_type: GetPlanDetailsPlanIdResponseDataOverageRatesItemFiatCreditType = (
        _PydanticField(alias="fiat_credit_type")
    )
    start_period: float = _PydanticField(alias="start_period")
    to_fiat_conversion_factor: float = _PydanticField(alias="to_fiat_conversion_factor")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdChargesResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    charge_type: GetPlanDetailsPlanIdChargesResponseDataItemChargeTypeEnum = (
        _PydanticField(alias="charge_type")
    )
    credit_type: GetPlanDetailsPlanIdChargesResponseDataItemCreditType = _PydanticField(
        alias="credit_type"
    )
    custom_fields: GetPlanDetailsPlanIdChargesResponseDataItemCustomFields = (
        _PydanticField(alias="custom_fields")
    )
    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")
    prices: typing.List[
        GetPlanDetailsPlanIdChargesResponseDataItemPricesItem
    ] = _PydanticField(alias="prices")
    product_name: str = _PydanticField(alias="product_name")
    quantity: typing.Optional[float] = _PydanticField(alias="quantity", default=None)
    start_period: typing.Optional[float] = _PydanticField(
        alias="start_period", default=None
    )
    unit_conversion: typing.Optional[
        GetPlanDetailsPlanIdChargesResponseDataItemUnitConversion
    ] = _PydanticField(alias="unit_conversion", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdCustomersResponseDataItemCustomerDetails(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_billable_status: GetPlanDetailsPlanIdCustomersResponseDataItemCustomerDetailsCurrentBillableStatus = _PydanticField(
        alias="current_billable_status"
    )
    custom_fields: GetPlanDetailsPlanIdCustomersResponseDataItemCustomerDetailsCustomFields = _PydanticField(
        alias="custom_fields"
    )
    customer_config: GetPlanDetailsPlanIdCustomersResponseDataItemCustomerDetailsCustomerConfig = _PydanticField(
        alias="customer_config"
    )
    external_id: str = _PydanticField(alias="external_id")
    id: str = _PydanticField(alias="id")
    ingest_aliases: typing.List[str] = _PydanticField(alias="ingest_aliases")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdCustomersResponseDataItemPlanDetails(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    custom_fields: GetPlanDetailsPlanIdCustomersResponseDataItemPlanDetailsCustomFields = _PydanticField(
        alias="custom_fields"
    )
    customer_plan_id: str = _PydanticField(alias="customer_plan_id")
    ending_before: typing.Optional[str] = _PydanticField(
        alias="ending_before", default=None
    )
    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")
    starting_on: str = _PydanticField(alias="starting_on")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlansResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[GetPlansResponseDataItem] = _PydanticField(alias="data")
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostAlertsArchiveResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PostAlertsArchiveResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostAlertsCreateResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PostAlertsCreateResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsCreateGrantBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_grant_type: typing.Optional[str] = _PydanticField(
        alias="credit_grant_type", default=None
    )
    customer_id: str = _PydanticField(alias="customer_id")
    effective_at: typing.Optional[str] = _PydanticField(
        alias="effective_at", default=None
    )
    expires_at: str = _PydanticField(alias="expires_at")
    grant_amount: PostCreditsCreateGrantBodyGrantAmount = _PydanticField(
        alias="grant_amount"
    )
    invoice_date: typing.Optional[str] = _PydanticField(
        alias="invoice_date", default=None
    )
    name: str = _PydanticField(alias="name")
    paid_amount: PostCreditsCreateGrantBodyPaidAmount = _PydanticField(
        alias="paid_amount"
    )
    priority: float = _PydanticField(alias="priority")
    product_ids: typing.Optional[typing.List[str]] = _PydanticField(
        alias="product_ids", default=None
    )
    reason: typing.Optional[str] = _PydanticField(alias="reason", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsCreateGrantResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PostCreditsCreateGrantResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsEditGrantResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PostCreditsEditGrantResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListEntriesResponseDataItemLedgersItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_type: PostCreditsListEntriesResponseDataItemLedgersItemCreditType = (
        _PydanticField(alias="credit_type")
    )
    ending_balance: PostCreditsListEntriesResponseDataItemLedgersItemEndingBalance = (
        _PydanticField(alias="ending_balance")
    )
    entries: typing.List[
        PostCreditsListEntriesResponseDataItemLedgersItemEntriesItem
    ] = _PydanticField(alias="entries")
    pending_entries: typing.List[
        PostCreditsListEntriesResponseDataItemLedgersItemPendingEntriesItem
    ] = _PydanticField(alias="pending_entries")
    starting_balance: PostCreditsListEntriesResponseDataItemLedgersItemStartingBalance = _PydanticField(
        alias="starting_balance"
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsResponseDataItemGrantAmount(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: float = _PydanticField(alias="amount")
    credit_type: PostCreditsListGrantsResponseDataItemGrantAmountCreditType = (
        _PydanticField(alias="credit_type")
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsResponseDataItemPaidAmount(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: float = _PydanticField(alias="amount")
    credit_type: PostCreditsListGrantsResponseDataItemPaidAmountCreditType = (
        _PydanticField(alias="credit_type")
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsVoidGrantResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PostCreditsVoidGrantResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomFieldsListKeysResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[PostCustomFieldsListKeysResponseDataItem] = _PydanticField(
        alias="data"
    )
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomFieldsSetValuesBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    custom_fields: PostCustomFieldsSetValuesBodyCustomFields = _PydanticField(
        alias="custom_fields"
    )
    entity: PostCustomFieldsSetValuesBodyEntityEnum = _PydanticField(alias="entity")
    entity_id: str = _PydanticField(alias="entity_id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomerAlertsGetResponseDataAlert(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_type: typing.Optional[
        PostCustomerAlertsGetResponseDataAlertCreditType
    ] = _PydanticField(alias="credit_type", default=None)
    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")
    status: PostCustomerAlertsGetResponseDataAlertStatusEnum = _PydanticField(
        alias="status"
    )
    threshold: float = _PydanticField(alias="threshold")
    type: PostCustomerAlertsGetResponseDataAlertTypeEnum = _PydanticField(alias="type")
    updated_at: str = _PydanticField(alias="updated_at")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomerAlertsListResponseDataItemAlert(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_type: typing.Optional[
        PostCustomerAlertsListResponseDataItemAlertCreditType
    ] = _PydanticField(alias="credit_type", default=None)
    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")
    status: PostCustomerAlertsListResponseDataItemAlertStatusEnum = _PydanticField(
        alias="status"
    )
    threshold: float = _PydanticField(alias="threshold")
    type: PostCustomerAlertsListResponseDataItemAlertTypeEnum = _PydanticField(
        alias="type"
    )
    updated_at: str = _PydanticField(alias="updated_at")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    billing_config: typing.Optional[PostCustomersBodyBillingConfig] = _PydanticField(
        alias="billing_config", default=None
    )
    custom_fields: typing.Optional[PostCustomersBodyCustomFields] = _PydanticField(
        alias="custom_fields", default=None
    )
    external_id: typing.Optional[str] = _PydanticField(
        alias="external_id", default=None
    )
    ingest_aliases: typing.Optional[typing.List[str]] = _PydanticField(
        alias="ingest_aliases", default=None
    )
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    custom_fields: typing.Optional[
        PostCustomersResponseDataCustomFields
    ] = _PydanticField(alias="custom_fields", default=None)
    external_id: str = _PydanticField(alias="external_id")
    id: str = _PydanticField(alias="id")
    ingest_aliases: typing.List[str] = _PydanticField(alias="ingest_aliases")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersArchiveResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PostCustomersArchiveResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdPlansAddBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ending_before: typing.Optional[str] = _PydanticField(
        alias="ending_before", default=None
    )
    net_payment_terms_days: typing.Optional[float] = _PydanticField(
        alias="net_payment_terms_days", default=None
    )
    plan_id: str = _PydanticField(alias="plan_id")
    price_adjustments: typing.Optional[
        typing.List[PostCustomersCustomerIdPlansAddBodyPriceAdjustmentsItem]
    ] = _PydanticField(alias="price_adjustments", default=None)
    starting_on: str = _PydanticField(alias="starting_on")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdPlansAddResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PostCustomersCustomerIdPlansAddResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdSetNameResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    custom_fields: typing.Optional[
        PostCustomersCustomerIdSetNameResponseDataCustomFields
    ] = _PydanticField(alias="custom_fields", default=None)
    external_id: str = _PydanticField(alias="external_id")
    id: str = _PydanticField(alias="id")
    ingest_aliases: typing.List[str] = _PydanticField(alias="ingest_aliases")
    name: str = _PydanticField(alias="name")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostDashboardsGetEmbeddableUrlBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    color_overrides: typing.Optional[
        typing.List[PostDashboardsGetEmbeddableUrlBodyColorOverridesItem]
    ] = _PydanticField(alias="color_overrides", default=None)
    customer_id: str = _PydanticField(alias="customer_id")
    dashboard: PostDashboardsGetEmbeddableUrlBodyDashboardEnum = _PydanticField(
        alias="dashboard"
    )
    dashboard_options: typing.Optional[
        typing.List[PostDashboardsGetEmbeddableUrlBodyDashboardOptionsItem]
    ] = _PydanticField(alias="dashboard_options", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostDashboardsGetEmbeddableUrlResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PostDashboardsGetEmbeddableUrlResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostIngestBodyItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    customer_id: str = _PydanticField(alias="customer_id")
    event_type: str = _PydanticField(alias="event_type")
    properties: typing.Optional[PostIngestBodyItemProperties] = _PydanticField(
        alias="properties", default=None
    )
    timestamp: str = _PydanticField(alias="timestamp")
    transaction_id: str = _PydanticField(alias="transaction_id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostUsageBodyBillableMetricsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    group_by: typing.Optional[PostUsageBodyBillableMetricsItemGroupBy] = _PydanticField(
        alias="group_by", default=None
    )
    id: str = _PydanticField(alias="id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostUsageResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    billable_metric_id: str = _PydanticField(alias="billable_metric_id")
    billable_metric_name: str = _PydanticField(alias="billable_metric_name")
    customer_id: str = _PydanticField(alias="customer_id")
    end_timestamp: str = _PydanticField(alias="end_timestamp")
    groups: typing.Optional[PostUsageResponseDataItemGroups] = _PydanticField(
        alias="groups", default=None
    )
    start_timestamp: str = _PydanticField(alias="start_timestamp")
    value: typing.Optional[float] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostUsageGroupsBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    billable_metric_id: str = _PydanticField(alias="billable_metric_id")
    current_period: typing.Optional[bool] = _PydanticField(
        alias="current_period", default=None
    )
    customer_id: str = _PydanticField(alias="customer_id")
    ending_before: typing.Optional[str] = _PydanticField(
        alias="ending_before", default=None
    )
    group_by: typing.Optional[PostUsageGroupsBodyGroupBy] = _PydanticField(
        alias="group_by", default=None
    )
    starting_on: typing.Optional[str] = _PydanticField(
        alias="starting_on", default=None
    )
    window_size: PostUsageGroupsBodyWindowSizeEnum = _PydanticField(alias="window_size")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostUsageGroupsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[PostUsageGroupsResponseDataItem] = _PydanticField(alias="data")
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetAuditLogsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[GetAuditLogsResponseDataItem] = _PydanticField(alias="data")
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[GetCustomersResponseDataItem] = _PydanticField(alias="data")
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: GetCustomersCustomerIdResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdCostsResponseDataItemCreditTypes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[
        str, GetCustomersCustomerIdCostsResponseDataItemCreditTypesAdditionalProps
    ]

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    commit_id: typing.Optional[str] = _PydanticField(alias="commit_id", default=None)
    commit_netsuite_item_id: typing.Optional[str] = _PydanticField(
        alias="commit_netsuite_item_id", default=None
    )
    commit_netsuite_sales_order_id: typing.Optional[str] = _PydanticField(
        alias="commit_netsuite_sales_order_id", default=None
    )
    commit_segment_id: typing.Optional[str] = _PydanticField(
        alias="commit_segment_id", default=None
    )
    commit_type: typing.Optional[str] = _PydanticField(
        alias="commit_type", default=None
    )
    credit_type: GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemCreditType = _PydanticField(
        alias="credit_type"
    )
    custom_fields: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemCustomFields
    ] = _PydanticField(alias="custom_fields", default=None)
    ending_before: typing.Optional[str] = _PydanticField(
        alias="ending_before", default=None
    )
    group_key: typing.Optional[str] = _PydanticField(alias="group_key", default=None)
    group_value: typing.Optional[str] = _PydanticField(
        alias="group_value", default=None
    )
    is_prorated: typing.Optional[bool] = _PydanticField(
        alias="is_prorated", default=None
    )
    name: str = _PydanticField(alias="name")
    netsuite_item_id: typing.Optional[str] = _PydanticField(
        alias="netsuite_item_id", default=None
    )
    postpaid_commit: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemPostpaidCommit
    ] = _PydanticField(alias="postpaid_commit", default=None)
    product_id: typing.Optional[str] = _PydanticField(alias="product_id", default=None)
    quantity: typing.Optional[float] = _PydanticField(alias="quantity", default=None)
    reseller_type: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemResellerTypeEnum
    ] = _PydanticField(alias="reseller_type", default=None)
    starting_at: typing.Optional[str] = _PydanticField(
        alias="starting_at", default=None
    )
    sub_line_items: typing.Optional[
        typing.List[
            GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItemSubLineItemsItem
        ]
    ] = _PydanticField(alias="sub_line_items", default=None)
    total: float = _PydanticField(alias="total")
    unit_price: typing.Optional[float] = _PydanticField(
        alias="unit_price", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    commit_id: typing.Optional[str] = _PydanticField(alias="commit_id", default=None)
    commit_netsuite_item_id: typing.Optional[str] = _PydanticField(
        alias="commit_netsuite_item_id", default=None
    )
    commit_netsuite_sales_order_id: typing.Optional[str] = _PydanticField(
        alias="commit_netsuite_sales_order_id", default=None
    )
    commit_segment_id: typing.Optional[str] = _PydanticField(
        alias="commit_segment_id", default=None
    )
    commit_type: typing.Optional[str] = _PydanticField(
        alias="commit_type", default=None
    )
    credit_type: GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemCreditType = _PydanticField(
        alias="credit_type"
    )
    custom_fields: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemCustomFields
    ] = _PydanticField(alias="custom_fields", default=None)
    ending_before: typing.Optional[str] = _PydanticField(
        alias="ending_before", default=None
    )
    group_key: typing.Optional[str] = _PydanticField(alias="group_key", default=None)
    group_value: typing.Optional[str] = _PydanticField(
        alias="group_value", default=None
    )
    is_prorated: typing.Optional[bool] = _PydanticField(
        alias="is_prorated", default=None
    )
    name: str = _PydanticField(alias="name")
    netsuite_item_id: typing.Optional[str] = _PydanticField(
        alias="netsuite_item_id", default=None
    )
    postpaid_commit: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemPostpaidCommit
    ] = _PydanticField(alias="postpaid_commit", default=None)
    product_id: typing.Optional[str] = _PydanticField(alias="product_id", default=None)
    quantity: typing.Optional[float] = _PydanticField(alias="quantity", default=None)
    reseller_type: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemResellerTypeEnum
    ] = _PydanticField(alias="reseller_type", default=None)
    starting_at: typing.Optional[str] = _PydanticField(
        alias="starting_at", default=None
    )
    sub_line_items: typing.Optional[
        typing.List[
            GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItemSubLineItemsItem
        ]
    ] = _PydanticField(alias="sub_line_items", default=None)
    total: float = _PydanticField(alias="total")
    unit_price: typing.Optional[float] = _PydanticField(
        alias="unit_price", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdPlansResponseDataItemTrialInfo(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ending_before: str = _PydanticField(alias="ending_before")
    spending_caps: typing.List[
        GetCustomersCustomerIdPlansResponseDataItemTrialInfoSpendingCapsItem
    ] = _PydanticField(alias="spending_caps")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdPlansCustomerPlanIdPriceAdjustmentsResponse(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[
        GetCustomersCustomerIdPlansCustomerPlanIdPriceAdjustmentsResponseDataItem
    ] = _PydanticField(alias="data")
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_grants: typing.Optional[
        typing.List[GetPlanDetailsPlanIdResponseDataCreditGrantsItem]
    ] = _PydanticField(alias="credit_grants", default=None)
    custom_fields: GetPlanDetailsPlanIdResponseDataCustomFields = _PydanticField(
        alias="custom_fields"
    )
    description: typing.Optional[str] = _PydanticField(
        alias="description", default=None
    )
    id: str = _PydanticField(alias="id")
    minimums: typing.Optional[
        typing.List[GetPlanDetailsPlanIdResponseDataMinimumsItem]
    ] = _PydanticField(alias="minimums", default=None)
    name: str = _PydanticField(alias="name")
    overage_rates: typing.Optional[
        typing.List[GetPlanDetailsPlanIdResponseDataOverageRatesItem]
    ] = _PydanticField(alias="overage_rates", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdChargesResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[GetPlanDetailsPlanIdChargesResponseDataItem] = _PydanticField(
        alias="data"
    )
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdCustomersResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    customer_details: GetPlanDetailsPlanIdCustomersResponseDataItemCustomerDetails = (
        _PydanticField(alias="customer_details")
    )
    plan_details: GetPlanDetailsPlanIdCustomersResponseDataItemPlanDetails = (
        _PydanticField(alias="plan_details")
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListEntriesResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    customer_id: str = _PydanticField(alias="customer_id")
    ledgers: typing.List[
        PostCreditsListEntriesResponseDataItemLedgersItem
    ] = _PydanticField(alias="ledgers")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: PostCreditsListGrantsResponseDataItemBalance = _PydanticField(
        alias="balance"
    )
    credit_grant_type: typing.Optional[str] = _PydanticField(
        alias="credit_grant_type", default=None
    )
    custom_fields: PostCreditsListGrantsResponseDataItemCustomFields = _PydanticField(
        alias="custom_fields"
    )
    customer_id: str = _PydanticField(alias="customer_id")
    deductions: typing.List[
        PostCreditsListGrantsResponseDataItemDeductionsItem
    ] = _PydanticField(alias="deductions")
    effective_at: str = _PydanticField(alias="effective_at")
    expires_at: str = _PydanticField(alias="expires_at")
    grant_amount: PostCreditsListGrantsResponseDataItemGrantAmount = _PydanticField(
        alias="grant_amount"
    )
    id: str = _PydanticField(alias="id")
    invoice_id: typing.Optional[str] = _PydanticField(alias="invoice_id", default=None)
    name: str = _PydanticField(alias="name")
    paid_amount: PostCreditsListGrantsResponseDataItemPaidAmount = _PydanticField(
        alias="paid_amount"
    )
    pending_deductions: typing.List[
        PostCreditsListGrantsResponseDataItemPendingDeductionsItem
    ] = _PydanticField(alias="pending_deductions")
    priority: float = _PydanticField(alias="priority")
    products: typing.Optional[
        typing.List[PostCreditsListGrantsResponseDataItemProductsItem]
    ] = _PydanticField(alias="products", default=None)
    reason: typing.Optional[str] = _PydanticField(alias="reason", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomerAlertsGetResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    alert: PostCustomerAlertsGetResponseDataAlert = _PydanticField(alias="alert")
    customer_status: typing.Optional[
        PostCustomerAlertsGetResponseDataCustomerStatusEnum
    ] = _PydanticField(alias="customer_status", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomerAlertsListResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    alert: PostCustomerAlertsListResponseDataItemAlert = _PydanticField(alias="alert")
    customer_status: typing.Optional[
        PostCustomerAlertsListResponseDataItemCustomerStatusEnum
    ] = _PydanticField(alias="customer_status", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PostCustomersResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomersCustomerIdSetNameResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PostCustomersCustomerIdSetNameResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostUsageBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    billable_metrics: typing.Optional[
        typing.List[PostUsageBodyBillableMetricsItem]
    ] = _PydanticField(alias="billable_metrics", default=None)
    customer_ids: typing.Optional[typing.List[str]] = _PydanticField(
        alias="customer_ids", default=None
    )
    ending_before: str = _PydanticField(alias="ending_before")
    starting_on: str = _PydanticField(alias="starting_on")
    window_size: PostUsageBodyWindowSizeEnum = _PydanticField(alias="window_size")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostUsageResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[PostUsageResponseDataItem] = _PydanticField(alias="data")
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdCostsResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    credit_types: GetCustomersCustomerIdCostsResponseDataItemCreditTypes = (
        _PydanticField(alias="credit_types")
    )
    end_timestamp: str = _PydanticField(alias="end_timestamp")
    start_timestamp: str = _PydanticField(alias="start_timestamp")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amendment_id: typing.Optional[str] = _PydanticField(
        alias="amendment_id", default=None
    )
    billable_status: GetCustomersCustomerIdInvoicesResponseDataItemBillableStatusEnum = _PydanticField(
        alias="billable_status"
    )
    contract_id: typing.Optional[str] = _PydanticField(
        alias="contract_id", default=None
    )
    correction_record: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemCorrectionRecord
    ] = _PydanticField(alias="correction_record", default=None)
    credit_type: GetCustomersCustomerIdInvoicesResponseDataItemCreditType = (
        _PydanticField(alias="credit_type")
    )
    custom_fields: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemCustomFields
    ] = _PydanticField(alias="custom_fields", default=None)
    customer_id: str = _PydanticField(alias="customer_id")
    end_timestamp: typing.Optional[str] = _PydanticField(
        alias="end_timestamp", default=None
    )
    external_invoice: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemExternalInvoice
    ] = _PydanticField(alias="external_invoice", default=None)
    id: str = _PydanticField(alias="id")
    invoice_adjustments: typing.Optional[
        typing.List[
            GetCustomersCustomerIdInvoicesResponseDataItemInvoiceAdjustmentsItem
        ]
    ] = _PydanticField(alias="invoice_adjustments", default=None)
    issued_at: typing.Optional[str] = _PydanticField(alias="issued_at", default=None)
    line_items: typing.List[
        GetCustomersCustomerIdInvoicesResponseDataItemLineItemsItem
    ] = _PydanticField(alias="line_items")
    net_payment_terms_days: typing.Optional[float] = _PydanticField(
        alias="net_payment_terms_days", default=None
    )
    netsuite_sales_order_id: typing.Optional[str] = _PydanticField(
        alias="netsuite_sales_order_id", default=None
    )
    plan_custom_fields: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemPlanCustomFields
    ] = _PydanticField(alias="plan_custom_fields", default=None)
    plan_id: typing.Optional[str] = _PydanticField(alias="plan_id", default=None)
    plan_name: typing.Optional[str] = _PydanticField(alias="plan_name", default=None)
    reseller_royalty: typing.Optional[
        GetCustomersCustomerIdInvoicesResponseDataItemResellerRoyalty
    ] = _PydanticField(alias="reseller_royalty", default=None)
    salesforce_opportunity_id: typing.Optional[str] = _PydanticField(
        alias="salesforce_opportunity_id", default=None
    )
    start_timestamp: typing.Optional[str] = _PydanticField(
        alias="start_timestamp", default=None
    )
    status: str = _PydanticField(alias="status")
    subtotal: typing.Optional[float] = _PydanticField(alias="subtotal", default=None)
    total: float = _PydanticField(alias="total")
    type: str = _PydanticField(alias="type")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amendment_id: typing.Optional[str] = _PydanticField(
        alias="amendment_id", default=None
    )
    billable_status: GetCustomersCustomerIdInvoicesInvoiceIdResponseDataBillableStatusEnum = _PydanticField(
        alias="billable_status"
    )
    contract_id: typing.Optional[str] = _PydanticField(
        alias="contract_id", default=None
    )
    correction_record: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCorrectionRecord
    ] = _PydanticField(alias="correction_record", default=None)
    credit_type: GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCreditType = (
        _PydanticField(alias="credit_type")
    )
    custom_fields: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataCustomFields
    ] = _PydanticField(alias="custom_fields", default=None)
    customer_id: str = _PydanticField(alias="customer_id")
    end_timestamp: typing.Optional[str] = _PydanticField(
        alias="end_timestamp", default=None
    )
    external_invoice: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataExternalInvoice
    ] = _PydanticField(alias="external_invoice", default=None)
    id: str = _PydanticField(alias="id")
    invoice_adjustments: typing.Optional[
        typing.List[
            GetCustomersCustomerIdInvoicesInvoiceIdResponseDataInvoiceAdjustmentsItem
        ]
    ] = _PydanticField(alias="invoice_adjustments", default=None)
    issued_at: typing.Optional[str] = _PydanticField(alias="issued_at", default=None)
    line_items: typing.List[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataLineItemsItem
    ] = _PydanticField(alias="line_items")
    net_payment_terms_days: typing.Optional[float] = _PydanticField(
        alias="net_payment_terms_days", default=None
    )
    netsuite_sales_order_id: typing.Optional[str] = _PydanticField(
        alias="netsuite_sales_order_id", default=None
    )
    plan_custom_fields: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataPlanCustomFields
    ] = _PydanticField(alias="plan_custom_fields", default=None)
    plan_id: typing.Optional[str] = _PydanticField(alias="plan_id", default=None)
    plan_name: typing.Optional[str] = _PydanticField(alias="plan_name", default=None)
    reseller_royalty: typing.Optional[
        GetCustomersCustomerIdInvoicesInvoiceIdResponseDataResellerRoyalty
    ] = _PydanticField(alias="reseller_royalty", default=None)
    salesforce_opportunity_id: typing.Optional[str] = _PydanticField(
        alias="salesforce_opportunity_id", default=None
    )
    start_timestamp: typing.Optional[str] = _PydanticField(
        alias="start_timestamp", default=None
    )
    status: str = _PydanticField(alias="status")
    subtotal: typing.Optional[float] = _PydanticField(alias="subtotal", default=None)
    total: float = _PydanticField(alias="total")
    type: str = _PydanticField(alias="type")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdPlansResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    custom_fields: GetCustomersCustomerIdPlansResponseDataItemCustomFields = (
        _PydanticField(alias="custom_fields")
    )
    ending_before: typing.Optional[str] = _PydanticField(
        alias="ending_before", default=None
    )
    id: str = _PydanticField(alias="id")
    net_payment_terms_days: typing.Optional[float] = _PydanticField(
        alias="net_payment_terms_days", default=None
    )
    plan_description: str = _PydanticField(alias="plan_description")
    plan_id: str = _PydanticField(alias="plan_id")
    plan_name: str = _PydanticField(alias="plan_name")
    starting_on: str = _PydanticField(alias="starting_on")
    trial_info: typing.Optional[
        GetCustomersCustomerIdPlansResponseDataItemTrialInfo
    ] = _PydanticField(alias="trial_info", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: GetPlanDetailsPlanIdResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPlanDetailsPlanIdCustomersResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[GetPlanDetailsPlanIdCustomersResponseDataItem] = _PydanticField(
        alias="data"
    )
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListEntriesResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[PostCreditsListEntriesResponseDataItem] = _PydanticField(
        alias="data"
    )
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCreditsListGrantsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[PostCreditsListGrantsResponseDataItem] = _PydanticField(
        alias="data"
    )
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomerAlertsGetResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PostCustomerAlertsGetResponseData = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostCustomerAlertsListResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[PostCustomerAlertsListResponseDataItem] = _PydanticField(
        alias="data"
    )
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdCostsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[GetCustomersCustomerIdCostsResponseDataItem] = _PydanticField(
        alias="data"
    )
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[GetCustomersCustomerIdInvoicesResponseDataItem] = _PydanticField(
        alias="data"
    )
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdInvoicesInvoiceIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: GetCustomersCustomerIdInvoicesInvoiceIdResponseData = _PydanticField(
        alias="data"
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetCustomersCustomerIdPlansResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[GetCustomersCustomerIdPlansResponseDataItem] = _PydanticField(
        alias="data"
    )
    next_page: typing.Optional[str] = _PydanticField(alias="next_page", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)
