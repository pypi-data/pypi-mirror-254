# coding=utf-8

"""
    @header create_flask.py
    @abstract   
    
    @MyBlog: http://www.kuture.com.cn
    @author  Created by Kuture on 2021/8/10
    @version 1.0.0 2021/8/10 Creation()
    
    @Copyright © 2021年 Mr.Li All rights reserved
"""
import os
import sys
import shutil
import base64
import argparse
from datetime import datetime


pars = argparse.ArgumentParser(description='Create Flask Project')
pars.add_argument('--proj_name', type=str, default='MyProject', help='Project Name, Default Is MyProject!')
pars.add_argument('--proj_dir', default=None, help='Project Dir Path, Default Is None')
args = pars.parse_args()


class AKFlask(object):

    def __init__(self, project_name, project_dir=None):

        dir_name, file = os.path.split(os.path.abspath(sys.argv[0]))
        if (project_dir is None) or (not os.path.exists(project_dir)):self._project_name = os.path.join(dir_name, project_name)
        else:self._project_name = os.path.join(project_dir, project_name)

        self._server_log_base_str = 'IyBjb2Rpbmc9dXRmLTgKCiIiIgogICAgQGhlYWRlciBTZXJ2ZXJfbG9nLnB5CiAgICBAYWJzdHJhY3QgICAKICAgIAogICAgQE15QmxvZzogaHR0cDovL3d3dy5rdXR1cmUuY29tLmNuCiAgICBAYXV0aG9yICBDcmVhdGVkIGJ5IEt1dHVyZSBvbiAyMDIxLzgvOQogICAgQHZlcnNpb24gMS4wLjAgMjAyMS84LzkgQ3JlYXRpb24oKQogICAgCiAgICBAQ29weXJpZ2h0IMKpIDIwMjHlubQgTXIuTGkgQWxsIHJpZ2h0cyByZXNlcnZlZAoiIiIKaW1wb3J0IGxvZ2dpbmcKZnJvbSBsb2dnaW5nIGltcG9ydCBoYW5kbGVycwoKbGV2ZWxfcmVsYXRpb25zID0gewogICAgJ2RlYnVnJzogbG9nZ2luZy5ERUJVRywKICAgICdpbmZvJzogbG9nZ2luZy5JTkZPLAogICAgJ3dhcm5pbmcnOiBsb2dnaW5nLldBUk5JTkcsCiAgICAnZXJyb3InOiBsb2dnaW5nLkVSUk9SLAogICAgJ2NyaXQnOiBsb2dnaW5nLkNSSVRJQ0FMCn0gICMgbG9nIGxldmVsIGRpY3QKCnByb2plY3RfbmFtZSA9ICdhaXNlcnZlcmZsYXNrJyAgIyBwcm9qZWN0IG5hbWUgZm9yIHJlY29nbml0aW9uIGxvZ28KCgpjbGFzcyBMb2dnZXIob2JqZWN0KToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbGV2ZWw9J2RlYnVnJywgZmlsZW5hbWU9Tm9uZSwgd2hlbj0nVycsIGJhY2tDb3VudD0yMCk6CgogICAgICAgIGlmIGZpbGVuYW1lIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgoKICAgICAgICAjICBsb2cgZm9ybWF0CiAgICAgICAgIyBmbXQgPSAnJShhc2N0aW1lKXMgLSAlKGZpbGVuYW1lKXNbbGluZTolKGxpbmVubylkXSAtICUobGV2ZWxuYW1lKXM6ICUobWVzc2FnZSlzJwogICAgICAgIGZtdCA9ICclKGFzY3RpbWUpcyAtIFtsaW5lOiUobGluZW5vKWRdIC0gJShsZXZlbG5hbWUpczogJShtZXNzYWdlKXMnCiAgICAgICAgIyBsb2cgYWJzb2x1dGUgcGF0aAoKICAgICAgICBzZWxmLmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKGZpbGVuYW1lKQoKICAgICAgICBmb3JtYXRfc3RyID0gbG9nZ2luZy5Gb3JtYXR0ZXIoZm10KSAgIyBzZXR0aW5nIGxvZyBmb3JtYXQKICAgICAgICBzZWxmLmxvZ2dlci5zZXRMZXZlbChsZXZlbF9yZWxhdGlvbnMuZ2V0KGxldmVsKSkgICMgc2V0dGluZyBsb2cgbGV2ZWwKICAgICAgICBzaCA9IGxvZ2dpbmcuU3RyZWFtSGFuZGxlcigpICAjIGRpc3BsYXkgaW4gdGVybWluYWwKICAgICAgICBzaC5zZXRGb3JtYXR0ZXIoZm9ybWF0X3N0cikgICMgc2V0dGluZyBkaXNwbGF5IGZvcm1hdAoKICAgICAgICAjIHdyaXRlIGxvZyBpbiBmaWxlLCBzZXR0aW5nIHRpbWUgaW50ZXJ2YWwgZm9yIGF1dG8gZ2VuZXJhdGUgZmlsZQogICAgICAgICMgdGggPSBoYW5kbGVycy5UaW1lZFJvdGF0aW5nRmlsZUhhbmRsZXIoZmlsZW5hbWU9ZmlsZW5hbWUsIHdoZW49d2hlbiwgYmFja3VwQ291bnQ9YmFja0NvdW50LAogICAgICAgICMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2Rpbmc9J3V0Zi04JykKICAgICAgICAjIHRoLnNldEZvcm1hdHRlcihmb3JtYXRfc3RyKSAgIyBzZXR0aW5nIHdyaXRpbmcgZm9tYXRlCgogICAgICAgICMgYXV0byBnZW5lcmF0ZSBmaWxlIGZvciBjb250cm9sIGZpbGUgc2l6ZSBhbmQgY291bnQKICAgICAgICBzaXplX3RoID0gaGFuZGxlcnMuUm90YXRpbmdGaWxlSGFuZGxlcihmaWxlbmFtZSwgbWF4Qnl0ZXM9NSoxMDI0KjEwMjQsIGJhY2t1cENvdW50PWJhY2tDb3VudCkKICAgICAgICBzaXplX3RoLnNldEZvcm1hdHRlcihmb3JtYXRfc3RyKQoKICAgICAgICAjIGFkZCBvYmplY3QgdG8gbG9nZ2VyCiAgICAgICAgc2VsZi5sb2dnZXIuYWRkSGFuZGxlcihzaXplX3RoICkgICMgc2l6ZSBmb3JtYXQKICAgICAgICAjIHNlbGYubG9nZ2VyLmFkZEhhbmRsZXIodGgpICAjIHRpbWUgZm9ybWF0CiAgICAgICAgc2VsZi5sb2dnZXIuYWRkSGFuZGxlcihzaCk='
        self._server_conf_base_str = ''
        self._server_views_base_str = 'IyBjb2Rpbmc9dXRmLTgKCiIiIgogICAgQGhlYWRlciB2aWV3cy5weQogICAgQGFic3RyYWN0ICAgCiAgICAKICAgIEBNeUJsb2c6IGh0dHA6Ly93d3cua3V0dXJlLmNvbS5jbgogICAgQGF1dGhvciAgQ3JlYXRlZCBieSBLdXR1cmUgb24gMjAyMS84LzkKICAgIEB2ZXJzaW9uIDEuMC4wIDIwMjEvOC85IENyZWF0aW9uKCkKICAgIAogICAgQENvcHlyaWdodCDCqSAyMDIx5bm0IE1yLkxpIEFsbCByaWdodHMgcmVzZXJ2ZWQKIiIiCmltcG9ydCBqc29uCmZyb20gZmxhc2sgaW1wb3J0IEJsdWVwcmludCwgcmVxdWVzdApmcm9tIGNvbmZpZyBpbXBvcnQgU2VydmVyVG9vbHMsIGxvZwoKCm1haW5fYXBwID0gQmx1ZXByaW50KCdtYWluX2FwcCcsIF9fbmFtZV9fKQp0b29scyA9IFNlcnZlclRvb2xzKCkKCgojIGNhbGxiYWNrIGZ1bmN0aW9uLCBvYnRhaW4gcmVnaXN0ZXIgYmx1ZXByaW50IGlucHV0IHBhcmFtZXRlcgpkZWYgY2FsbGJhY2tfcGFyYW1ldGVycyhwYXJhbWV0ZXIpOgogICAgbG9nLmxvZ2dlci5pbmZvKCdbIDEwMDAwIF0gLSBNYWluIEFQUCBDYWxsYmFjayBGdW5jdGlvbi4uLicpCiAgICBwYXJhX2RpY3QgPSBwYXJhbWV0ZXIub3B0aW9ucwoKCiMg6LCD55So5Zue6LCD5pa55rOVCm1haW5fYXBwLnJlY29yZChjYWxsYmFja19wYXJhbWV0ZXJzKQoKCkBtYWluX2FwcC5yb3V0ZSgnLycsIG1ldGhvZHM9WydQT1NUJ10pCmRlZiBpbmRleCgpOgogICAgbG9nLmxvZ2dlci5pbmZvKCdbIDIwMDAxIF0gLSBNYWluIEFwcCBJbmRleCBVcmwgUE9TVCBSZXF1ZXN0Li4uJykKICAgIHRyeToKICAgICAgICBwb3N0X3BhcmFtZXRlciA9IGpzb24ubG9hZHMocmVxdWVzdC5nZXRfZGF0YSgpKQogICAgICAgIGxvZy5sb2dnZXIuaW5mbygnWyAyMDAwMiBdIC0gTWFpbiBBcHAgSW5kZXggUE9TVCBQYXJhbWV0ZXI6e30nLmZvcm1hdChzdHIocG9zdF9wYXJhbWV0ZXIpWzo2OF0pKQoKICAgICAgICByZXNwb25zZV9yZXMgPSAnJwogICAgICAgIGxvZy5sb2dnZXIuaW5mbygnWyAyMDAwNSBdIC0gTWFpbiBBcHAgSW5kZXggUmVzcG9uc2UuLi4nKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlcnJvcjoKICAgICAgICBlcnJvcl9tc2cgPSAnWyAyMDAwMyBdIC0gTWFpbiBBcHAgSW5kZXggVXJsIFBPU1QgUmVxdWVzdCBFcnJvcjp7fScuZm9ybWF0KGVycm9yKQogICAgICAgIHJldHVybiB0b29scy5jcm9zc19kb21haW4oeyJjb2RlIjogY29uZmlnLkVSUk9SLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtZXNzYWdlIjogZXJyb3JfbXNnfSkKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIHRvb2xzLmNyb3NzX2RvbWFpbihyZXNwb25zZV9yZXMpCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK'
        self._server_manager_base_str = 'IyBjb2Rpbmc9dXRmLTgKCiIiIgogICAgQGhlYWRlciBtYW5hZ2VyLnB5CiAgICBAYWJzdHJhY3QKCiAgICBATXlCbG9nOiBodHRwOi8vd3d3Lmt1dHVyZS5jb20uY24KICAgIEBhdXRob3IgIENyZWF0ZWQgYnkgS3V0dXJlIG9uIDIwMjEvOC85CiAgICBAdmVyc2lvbiAxLjAuMCAyMDIxLzgvOSBDcmVhdGlvbigpKCkKCiAgICBAQ29weXJpZ2h0IMKpIDIwMjHlubQgTXIuTGkgQWxsIHJpZ2h0cyByZXNlcnZlZAoiIiIKaW1wb3J0IGNvbmZpZwppbXBvcnQgYXJncGFyc2UKZnJvbSBnZXZlbnQgaW1wb3J0IHB5d3NnaQoKbG9nID0gY29uZmlnLmxvZwpsb2cubG9nZ2VyLmluZm8oJycpCmxvZy5sb2dnZXIuaW5mbygnWyAwMDAwMCBdIC0ge31TdGFydCBNYW5hZ2VyIFNlcnZpY2V7fScuZm9ybWF0KCctJyAqIDIwLCAnLScgKiAyMCkpCgonJyctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEluaXQgU2VydmVyIEFuZCBCbHVlcHJpbnQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScnJwp0cnk6CiAgICBpbXBvcnQganNvbgogICAgaW1wb3J0IHRpbWUKICAgIGZyb20gY29uZmlnIGltcG9ydCBBYnNvbHV0ZVBhdGgsIFNlcnZlclRvb2xzCiAgICBmcm9tIEFQUC5NYWluIGltcG9ydCB2aWV3cyBhcyBtYWluX3ZpZXcKICAgIGZyb20gZmxhc2sgaW1wb3J0IEZsYXNrLCByZXF1ZXN0LCBqc29uaWZ5LCBzZW5kX2Zyb21fZGlyZWN0b3J5LCBzZXNzaW9uLCBtYWtlX3Jlc3BvbnNlCgogICAgYXBwID0gRmxhc2soX19uYW1lX18pCiAgICBhcHAuZGVidWcgPSBGYWxzZQogICAgYXBwLnNlY3JldF9rZXkgPSAnS3V0dXJlJwoKICAgICMgSW5pdCBTZXJ2ZXIgdG9vbHMKICAgIGFic29sdXRlX2NvbmZpZyA9IEFic29sdXRlUGF0aCgpCgogICAgIyBJbml0IGJsdWVwcmludAogICAgY2FsbF9iYWNrX2RpY3QgPSB7ImtleSI6ICJwYXJhbWV0ZXIifQogICAgYXBwLnJlZ2lzdGVyX2JsdWVwcmludChtYWluX3ZpZXcubWFpbl9hcHAsIHVybF9wcmVmaXg9Jy8nLCAqKmNhbGxfYmFja19kaWN0KSAgIyBjYWxsX2JhY2tfZGljdOS4uuS8oOmAkueahOWPguaVsAoKZXhjZXB0IEV4Y2VwdGlvbiBhcyBlcnJvcjoKICAgIGVycm9yX21zZyA9ICdbIDAwMDAxIF0gLSBMb2FkIEZsYXNrIEFuZCBDb25maWcgRXJyb3I6e30nLmZvcm1hdChlcnJvcikKICAgIGxvZy5sb2dnZXIuZXJyb3IoZXJyb3JfbXNnKQogICAgcmFpc2UgRXhjZXB0aW9uKGVycm9yX21zZykKZWxzZToKICAgIGxvZy5sb2dnZXIuaW5mbygnWyAwMDAwMiBdIC0gTG9hZGVkIEZsYXNrIEFuZCBDb25maWcgLi4uJykKCicnJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTG9hZCBNYWluIEZ1bmN0aW9uIENsYXNzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJycnCnRyeToKICAgIHBhc3MKZXhjZXB0IEV4Y2VwdGlvbiBhcyBlcnJvcjoKICAgIGVycm9yX21zZyA9ICdbIDAwMDAzIF0gLSBMb2FkZWQgeHh4IEZ1bmN0aW9uIEVycm9yOnt9Jy5mb3JtYXQoZXJyb3IpCiAgICBsb2cubG9nZ2VyLmVycm9yKGVycm9yX21zZykKICAgIHJhaXNlIEV4Y2VwdGlvbihlcnJvcl9tc2cpCmVsc2U6CiAgICBsb2cubG9nZ2VyLmluZm8oJ1sgMDAwMDQgXSAtIExvYWRlZCB4eHggLi4uJykKCicnJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaW5pdCBnbG9iYWwgdmFyaWFibGXvvIwgY3JlYXRlIGZvbGRlciwgc3RhdGljIHJlc291cmNlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nJycKdHJ5OgogICAgIyBDaGVjayBSZXNvdXJjZSBGb2xkZXIsSWYgSXQgRG9lcyBOb3QgRXhpc3QsIENyZWF0ZQogICAgcmVzb3VyY2VfZm9sZGVyX3BhdGggPSBhYnNvbHV0ZV9jb25maWcucm9vdEFic29sdXRlUGF0aCgnUmVzb3VyY2UnKQogICAgdGVtcG9yYXJ5X2ZvbGRlcl9wYXRoID0gYWJzb2x1dGVfY29uZmlnLnJvb3RBYnNvbHV0ZVBhdGgoJ1RlbXBvcmFyeScpICAjIENyZWF0ZSBUZW1wb3JhcnkgRm9sZGVyCgpleGNlcHQgRXhjZXB0aW9uIGFzIGVycm9yOgogICAgZXJyb3JfbXNnID0gJ1sgMDAwMDUgXSAtIEluaXQgR2xvYmFsIEVycm9yOnt9Jy5mb3JtYXQoZXJyb3IpCiAgICBsb2cubG9nZ2VyLmVycm9yKGVycm9yX21zZykKICAgIHJhaXNlIEV4Y2VwdGlvbihlcnJvcl9tc2cpCmVsc2U6CiAgICBsb2cubG9nZ2VyLmluZm8oJ1sgMDAwMDYgXSAtIEluaXQgR2xvYmFsIC4uLicpCiAgICBsb2cubG9nZ2VyLmluZm8oJ1sgMDAwMDcgXSAtIFJlc291cmNlIERpciBQYXRoOnt9Jy5mb3JtYXQocmVzb3VyY2VfZm9sZGVyX3BhdGgpKQogICAgbG9nLmxvZ2dlci5pbmZvKCdbIDAwMDA4IF0gLSBUZW1wb3JhcnkgRGlyIFBhdGg6e30nLmZvcm1hdCh0ZW1wb3JhcnlfZm9sZGVyX3BhdGgpKQoKCmRlZiBtYWluKHNlcnZlcl9pcCwgc2VydmVyX3BvcnQpOgogICAgdHJ5OgogICAgICAgICMgYXBwLnJ1bihob3N0PXNlcnZlcl9pcCwgcG9ydD1zZXJ2ZXJfcG9ydCkKICAgICAgICBweXdzZ2kuV1NHSVNlcnZlcigoc2VydmVyX2lwLCBzZXJ2ZXJfcG9ydCksIGFwcCkuc2VydmVfZm9yZXZlcigpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGVycm9yOgogICAgICAgICMgdGltZS5zbGVlcCgzKQogICAgICAgIGxvZy5sb2dnZXIuZXJyb3IoJ1sgMDAwMDkgXSAtIFNlcnZlciBDYW4gTm90IExhdW5jaDoge30nLmZvcm1hdChlcnJvcikpCiAgICAgICAgIyBkZWZhdWx0X3BvcnQgPSBzZXJ2ZXJfcG9ydCArIDIKICAgICAgICAjIHRyeToKICAgICAgICAjICAgICBsb2cubG9nZ2VyLmluZm8oJ1sgMDAwMzEgXSAtIFRyeSBMYXVuY2ggU2VydmVyIFdpdGggTmV3IFBvcnQ6IHt9Jy5mb3JtYXQoZGVmYXVsdF9wb3J0KSkKICAgICAgICAjICAgICAjIGFwcC5ydW4oaG9zdD1zZXJ2ZXJfaXAsIHBvcnQ9ZGVmYXVsdF9wb3J0KQogICAgICAgICMgICAgIHB5d3NnaS5XU0dJU2VydmVyKChzZXJ2ZXJfaXAsIHNlcnZlcl9wb3J0KSwgYXBwKS5zZXJ2ZV9mb3JldmVyKCkKICAgICAgICAjCiAgICAgICAgIyAgICAgbG9nLmxvZ2dlci5pbmZvKCdbIDAwMDMyIF0gLSBOZXcgUG9ydDoge30gTGF1bmNoIFN1Y2Nlc3NmdWwhJy5mb3JtYXQoZGVmYXVsdF9wb3J0KSkKICAgICAgICAjIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXJyb3I6CiAgICAgICAgIyAgICAgbG9nLmxvZ2dlci5lcnJvcignWyAwMDAzMyBdIC0gVGVtcG9yYXJ5IElQIEVycm9yOnt9Jy5mb3JtYXQoZXJyb3IpKQoKICAgICAgICBsb2cubG9nZ2VyLmVycm9yKCdbIDAwMDEwIF0gLSBUcnkgTGF1bmNoIFNlcnZlciBFcnJvciwgJwogICAgICAgICAgICAgICAgICAgICAgICAgJ1BsZWFzZSBDaGVjayBQb3J0IHt9IGFuZCBSZXN0YXJ0IFRoZSBTZXJ2ZXInLmZvcm1hdChzZXJ2ZXJfcG9ydCkpCgoKIyBLaWxsZWQgTWFuYWdlciBUaHJlYWQKZGVmIGtpbGxlZF9tYW5hZ2VyX3RoZCgpOgoKICAgIHN0b3Bfc2hlbGwgPSBvcy5wb3BlbigicHMgLWVmIHwgZ3JlcCBtYW5hZ2VyIHwgZ3JlcCAtdiBncmVwIHwgYXdrICd7cHJpbnQgJDJ9JyIpLnJlYWQoKQogICAgc2lkTGlzdCA9IHN0b3Bfc2hlbGwuc3BsaXQoJ1xuJykKICAgIHNpZExpc3QucmVtb3ZlKCcnKQogICAgZm9yIGkgaW4gc2lkTGlzdDoKICAgICAgICB0cnk6CiAgICAgICAgICAgIG9zLmtpbGwoaW50KGkpLCBzaWduYWwuU0lHS0lMTCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIF86CiAgICAgICAgICAgIGNvbnRpbnVlCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKCiAgICB0cnk6CiAgICAgICAgcGFyYXNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSdLdXR1cmUgU2VydmVyJykKICAgICAgICBwYXJhc2VyLmFkZF9hcmd1bWVudCgnLS1pcCcsIHR5cGU9c3RyLCBkZWZhdWx0PWNvbmZpZy5ERUZBVUxUX0lQLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9J1NlcnZlciBJUCwgRGVmYXVsdCBpcyB7fScuZm9ybWF0KGNvbmZpZy5ERUZBVUxUX0lQKSkKICAgICAgICBwYXJhc2VyLmFkZF9hcmd1bWVudCgnLS1wb3J0JywgdHlwZT1pbnQsIGRlZmF1bHQ9Y29uZmlnLkRFRkFVTFRfUE9SVCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSdTZXJ2ZXIgUG9ydCwgRGVmYXVsdCBpcyB7fScuZm9ybWF0KGNvbmZpZy5ERUZBVUxUX1BPUlQpKQoKICAgICAgICBhcmdzID0gcGFyYXNlci5wYXJzZV9hcmdzKCkKICAgICAgICBzZXJ2ZXJfaXAgPSBhcmdzLmlwCiAgICAgICAgc2VydmVyX3BvcnQgPSBhcmdzLnBvcnQKICAgICAgICBsb2cubG9nZ2VyLmluZm8oJ1sgMDAwMTEgXSAtIFNlcnZlciBJUDp7fSBQb3J0Ont9IFZlcnNpb246e30nLmZvcm1hdChzZXJ2ZXJfaXAsIHNlcnZlcl9wb3J0LCBjb25maWcuQ0FSX1ZFUlNJT04pKQoKICAgICAgICBtYWluKHNlcnZlcl9pcCwgc2VydmVyX3BvcnQpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGVycm9yOgogICAgICAgIGxvZy5sb2dnZXIuY3JpdGljYWwoJ1sgU2VydmVyIFN0YXJ0IEZhaWxlZCBdIC0ge30nLmZvcm1hdChlcnJvcikpCiAgICBmaW5hbGx5OgogICAgICAgICMgS2lsbGVkIFNlcnZlciBBZnRlciBDbG9zZWQKICAgICAgICBwcmludCgne30gWyBBbGwgUHJvY2Vzc2VzIEhhdmUgQmVlbiBLaWxsZWQgXSB7fScuZm9ybWF0KCctJyo1MCwgJy0nKjUwKSkKICAgICAgICBraWxsZWRfbWFuYWdlcl90aGQoKQoKCgoKCgoKCgoKCg=='

        print(self._generate_print_str('创建工程 {}'.format(self._project_name)))
        if os.path.exists(self._project_name):
            input_str = input('{} is exist, recover or not(y/n)'.format(self._project_name))
            if input_str.lower() == 'y':
                shutil.rmtree(self._project_name)
        os.mkdir(self._project_name)

    # generate print str
    def _generate_print_str(self, label_str):
        new_label = '{}{}'.format('-' * (50 - len(label_str)), label_str)
        return new_label

    # generate python file
    def _generate_file(self, file_path, file_content):

        if isinstance(file_content, bytes):file_content = file_content.decode()
        file_content = file_content.replace('2021/8/9', '{}'.format(str(datetime.now()).split()[0]))
        with open(file_path, 'w') as sf:
            sf.write(file_content)

    # create Modules
    def _create_modules(self):
        print(self._generate_print_str('创建模块 Modules'))
        modules_path = os.path.join(self._project_name, 'Modules')
        modules_init_path = os.path.join(modules_path, '__init__.py')
        modules_log_path = os.path.join(modules_path, 'Server_log.py')

        os.mkdir(modules_path)
        self._generate_file(modules_init_path, '')
        self._generate_file(modules_log_path, base64.b64decode(self._server_log_base_str))

    # create Package
    def _create_package(self):
        print(self._generate_print_str('创建模块 Package'))
        package_path = os.path.join(self._project_name, 'Package')
        package_init_path = os.path.join(package_path, '__init__.py')

        os.mkdir(package_path)
        self._generate_file(package_init_path, '')

    # create app
    def _create_app(self):

        print(self._generate_print_str('创建模块 APP'))
        app_path = os.path.join(self._project_name, 'APP')
        app_main_dir_path = os.path.join(app_path, 'Main')
        app_main_init_path = os.path.join(app_main_dir_path, '__init__.py')
        app_main_views_path = os.path.join(app_main_dir_path, 'views.py')

        os.mkdir(app_path)
        os.mkdir(app_main_dir_path)
        self._generate_file(app_main_init_path, '')
        self._generate_file(app_main_views_path, base64.b64decode(self._server_views_base_str))

    # create config file
    def _create_config(self):

        print(self._generate_print_str('创建文件 config'))
        config_path = os.path.join(self._project_name, 'config.py')
        self._generate_file(config_path, base64.b64decode(self._server_conf_base_str))

    # create manager file
    def _create_manager(self):

        print(self._generate_print_str('创建文件 manager'))
        manager_path = os.path.join(self._project_name, 'manager.py')
        self._generate_file(manager_path, base64.b64decode(self._server_manager_base_str))

    # create all
    def main_create(self):
        self._create_modules()
        self._create_package()
        self._create_app()
        self._create_config()
        self._create_manager()


if __name__ == '__main__':

    create_obj = AKFlask(args.proj_name, args.proj_dir)
    create_obj.main_create()

















