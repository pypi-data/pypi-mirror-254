# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/typs',
                'doc_host': 'https://dsm-72.github.io',
                'git_url': 'https://github.com/dsm-72/typs',
                'lib_path': 'typs'},
  'syms': { 'typs.atyp': {},
            'typs.cons': { 'typs.cons.ProtocolMethod': ('cons.html#protocolmethod', 'typs/cons.py'),
                           'typs.cons.ProtocolMethod._missing_': ('cons.html#protocolmethod._missing_', 'typs/cons.py'),
                           'typs.cons.ProtocolMethod.casefold': ('cons.html#protocolmethod.casefold', 'typs/cons.py'),
                           'typs.cons.ProtocolMethod.gidt': ('cons.html#protocolmethod.gidt', 'typs/cons.py'),
                           'typs.cons.ProtocolMethod.idgt': ('cons.html#protocolmethod.idgt', 'typs/cons.py'),
                           'typs.cons.ProtocolMethod.ieq': ('cons.html#protocolmethod.ieq', 'typs/cons.py'),
                           'typs.cons.ProtocolMethod.startswith': ('cons.html#protocolmethod.startswith', 'typs/cons.py'),
                           'typs.cons.ProtocolMethodOrder': ('cons.html#protocolmethodorder', 'typs/cons.py'),
                           'typs.cons.synonyms': ('cons.html#synonyms', 'typs/cons.py'),
                           'typs.cons.synonyms.__eq__': ('cons.html#synonyms.__eq__', 'typs/cons.py'),
                           'typs.cons.synonyms.__hash__': ('cons.html#synonyms.__hash__', 'typs/cons.py'),
                           'typs.cons.synonyms.__new__': ('cons.html#synonyms.__new__', 'typs/cons.py'),
                           'typs.cons.synonyms.__repr__': ('cons.html#synonyms.__repr__', 'typs/cons.py'),
                           'typs.cons.synonyms.__str__': ('cons.html#synonyms.__str__', 'typs/cons.py'),
                           'typs.cons.synonyms.startswith': ('cons.html#synonyms.startswith', 'typs/cons.py'),
                           'typs.cons.synonyms.strs': ('cons.html#synonyms.strs', 'typs/cons.py')},
            'typs.core': {},
            'typs.duck': { 'typs.duck.Hashable': ('duck.html#hashable', 'typs/duck.py'),
                           'typs.duck.Hashable.__hash__': ('duck.html#hashable.__hash__', 'typs/duck.py'),
                           'typs.duck.Hashable.__instancecheck__': ('duck.html#hashable.__instancecheck__', 'typs/duck.py'),
                           'typs.duck.NonStrBytesIterable': ('duck.html#nonstrbytesiterable', 'typs/duck.py'),
                           'typs.duck.NonStrBytesIterable.__instancecheck__': ( 'duck.html#nonstrbytesiterable.__instancecheck__',
                                                                                'typs/duck.py'),
                           'typs.duck.NonStrBytesIterable.__iter__': ('duck.html#nonstrbytesiterable.__iter__', 'typs/duck.py'),
                           'typs.duck.NotSpecial': ('duck.html#notspecial', 'typs/duck.py'),
                           'typs.duck.NotSpecial.__hash__': ('duck.html#notspecial.__hash__', 'typs/duck.py'),
                           'typs.duck.NotSpecial.__instancecheck__': ('duck.html#notspecial.__instancecheck__', 'typs/duck.py'),
                           'typs.duck._acczeros': ('duck.html#_acczeros', 'typs/duck.py'),
                           'typs.duck._format_list': ('duck.html#_format_list', 'typs/duck.py'),
                           'typs.duck._genzeros': ('duck.html#_genzeros', 'typs/duck.py'),
                           'typs.duck._shape': ('duck.html#_shape', 'typs/duck.py'),
                           'typs.duck.empty': ('duck.html#empty', 'typs/duck.py'),
                           'typs.duck.empty.__init__': ('duck.html#empty.__init__', 'typs/duck.py'),
                           'typs.duck.empty.__repr__': ('duck.html#empty.__repr__', 'typs/duck.py'),
                           'typs.duck.empty.ndim': ('duck.html#empty.ndim', 'typs/duck.py')},
            'typs.enum': { 'typs.enum.ProtocolMethod': ('enum.html#protocolmethod', 'typs/enum.py'),
                           'typs.enum.ProtocolMethod._missing_': ('enum.html#protocolmethod._missing_', 'typs/enum.py'),
                           'typs.enum.ProtocolMethod.casefold': ('enum.html#protocolmethod.casefold', 'typs/enum.py'),
                           'typs.enum.ProtocolMethod.gidt': ('enum.html#protocolmethod.gidt', 'typs/enum.py'),
                           'typs.enum.ProtocolMethod.idgt': ('enum.html#protocolmethod.idgt', 'typs/enum.py'),
                           'typs.enum.ProtocolMethod.ieq': ('enum.html#protocolmethod.ieq', 'typs/enum.py'),
                           'typs.enum.ProtocolMethod.startswith': ('enum.html#protocolmethod.startswith', 'typs/enum.py'),
                           'typs.enum.ProtocolMethodOrder': ('enum.html#protocolmethodorder', 'typs/enum.py'),
                           'typs.enum.synonyms': ('enum.html#synonyms', 'typs/enum.py'),
                           'typs.enum.synonyms.__eq__': ('enum.html#synonyms.__eq__', 'typs/enum.py'),
                           'typs.enum.synonyms.__hash__': ('enum.html#synonyms.__hash__', 'typs/enum.py'),
                           'typs.enum.synonyms.__new__': ('enum.html#synonyms.__new__', 'typs/enum.py'),
                           'typs.enum.synonyms.__repr__': ('enum.html#synonyms.__repr__', 'typs/enum.py'),
                           'typs.enum.synonyms.__str__': ('enum.html#synonyms.__str__', 'typs/enum.py'),
                           'typs.enum.synonyms.startswith': ('enum.html#synonyms.startswith', 'typs/enum.py'),
                           'typs.enum.synonyms.strs': ('enum.html#synonyms.strs', 'typs/enum.py')},
            'typs.grds': { 'typs.grds.isalias': ('grds.html#isalias', 'typs/grds.py'),
                           'typs.grds.isallsame': ('grds.html#isallsame', 'typs/grds.py'),
                           'typs.grds.isargs': ('grds.html#isargs', 'typs/grds.py'),
                           'typs.grds.iscls': ('grds.html#iscls', 'typs/grds.py'),
                           'typs.grds.isdict': ('grds.html#isdict', 'typs/grds.py'),
                           'typs.grds.isdunder': ('grds.html#isdunder', 'typs/grds.py'),
                           'typs.grds.ishashable': ('grds.html#ishashable', 'typs/grds.py'),
                           'typs.grds.isiter': ('grds.html#isiter', 'typs/grds.py'),
                           'typs.grds.isnan': ('grds.html#isnan', 'typs/grds.py'),
                           'typs.grds.isnotiterstr': ('grds.html#isnotiterstr', 'typs/grds.py'),
                           'typs.grds.isnotspecial': ('grds.html#isnotspecial', 'typs/grds.py'),
                           'typs.grds.isorigin': ('grds.html#isorigin', 'typs/grds.py'),
                           'typs.grds.isprivate': ('grds.html#isprivate', 'typs/grds.py'),
                           'typs.grds.isstr': ('grds.html#isstr', 'typs/grds.py'),
                           'typs.grds.istuple': ('grds.html#istuple', 'typs/grds.py'),
                           'typs.grds.istype': ('grds.html#istype', 'typs/grds.py'),
                           'typs.grds.istyping': ('grds.html#istyping', 'typs/grds.py'),
                           'typs.grds.notcls': ('grds.html#notcls', 'typs/grds.py')},
            'typs.impr': { 'typs.impr.ImportedAttribute': ('impr.html#importedattribute', 'typs/impr.py'),
                           'typs.impr.ImportedAttribute.__asset_repr__': ('impr.html#importedattribute.__asset_repr__', 'typs/impr.py'),
                           'typs.impr.ImportedAttribute.__call__': ('impr.html#importedattribute.__call__', 'typs/impr.py'),
                           'typs.impr.ImportedAttribute.__getattribute__': ('impr.html#importedattribute.__getattribute__', 'typs/impr.py'),
                           'typs.impr.ImportedAttribute.__getitem__': ('impr.html#importedattribute.__getitem__', 'typs/impr.py'),
                           'typs.impr.ImportedAttribute.__import__': ('impr.html#importedattribute.__import__', 'typs/impr.py'),
                           'typs.impr.ImportedAttribute.__init__': ('impr.html#importedattribute.__init__', 'typs/impr.py'),
                           'typs.impr.ImportedAttribute.__repr__': ('impr.html#importedattribute.__repr__', 'typs/impr.py'),
                           'typs.impr.ImportedAttribute.ib': ('impr.html#importedattribute.ib', 'typs/impr.py'),
                           'typs.impr.ImportedAttribute.io': ('impr.html#importedattribute.io', 'typs/impr.py'),
                           'typs.impr.iattr': ('impr.html#iattr', 'typs/impr.py'),
                           'typs.impr.iattrs': ('impr.html#iattrs', 'typs/impr.py'),
                           'typs.impr.imod': ('impr.html#imod', 'typs/impr.py'),
                           'typs.impr.itry': ('impr.html#itry', 'typs/impr.py')},
            'typs.inst': { 'typs.inst.array': ('inst.html#array', 'typs/inst.py'),
                           'typs.inst.bool01': ('inst.html#bool01', 'typs/inst.py'),
                           'typs.inst.boolic': ('inst.html#boolic', 'typs/inst.py'),
                           'typs.inst.boolindex': ('inst.html#boolindex', 'typs/inst.py'),
                           'typs.inst.bools': ('inst.html#bools', 'typs/inst.py'),
                           'typs.inst.brownianintervial': ('inst.html#brownianintervial', 'typs/inst.py'),
                           'typs.inst.catindex': ('inst.html#catindex', 'typs/inst.py'),
                           'typs.inst.datatype': ('inst.html#datatype', 'typs/inst.py'),
                           'typs.inst.dim1': ('inst.html#dim1', 'typs/inst.py'),
                           'typs.inst.dim2': ('inst.html#dim2', 'typs/inst.py'),
                           'typs.inst.dim3': ('inst.html#dim3', 'typs/inst.py'),
                           'typs.inst.dim4': ('inst.html#dim4', 'typs/inst.py'),
                           'typs.inst.dimmed': ('inst.html#dimmed', 'typs/inst.py'),
                           'typs.inst.floatq': ('inst.html#floatq', 'typs/inst.py'),
                           'typs.inst.floats': ('inst.html#floats', 'typs/inst.py'),
                           'typs.inst.graphtype': ('inst.html#graphtype', 'typs/inst.py'),
                           'typs.inst.groupkey': ('inst.html#groupkey', 'typs/inst.py'),
                           'typs.inst.indexlike': ('inst.html#indexlike', 'typs/inst.py'),
                           'typs.inst.indextype': ('inst.html#indextype', 'typs/inst.py'),
                           'typs.inst.intq': ('inst.html#intq', 'typs/inst.py'),
                           'typs.inst.ints': ('inst.html#ints', 'typs/inst.py'),
                           'typs.inst.iternum': ('inst.html#iternum', 'typs/inst.py'),
                           'typs.inst.iterstr': ('inst.html#iterstr', 'typs/inst.py'),
                           'typs.inst.itertype': ('inst.html#itertype', 'typs/inst.py'),
                           'typs.inst.nan': ('inst.html#nan', 'typs/inst.py'),
                           'typs.inst.nanq': ('inst.html#nanq', 'typs/inst.py'),
                           'typs.inst.nans': ('inst.html#nans', 'typs/inst.py'),
                           'typs.inst.nantensor': ('inst.html#nantensor', 'typs/inst.py'),
                           'typs.inst.neuraldynamics': ('inst.html#neuraldynamics', 'typs/inst.py'),
                           'typs.inst.neuralode': ('inst.html#neuralode', 'typs/inst.py'),
                           'typs.inst.neuralsde': ('inst.html#neuralsde', 'typs/inst.py'),
                           'typs.inst.nilstr': ('inst.html#nilstr', 'typs/inst.py'),
                           'typs.inst.nnmodule': ('inst.html#nnmodule', 'typs/inst.py'),
                           'typs.inst.none': ('inst.html#none', 'typs/inst.py'),
                           'typs.inst.notnilstr': ('inst.html#notnilstr', 'typs/inst.py'),
                           'typs.inst.notstrbytes': ('inst.html#notstrbytes', 'typs/inst.py'),
                           'typs.inst.num': ('inst.html#num', 'typs/inst.py'),
                           'typs.inst.numq': ('inst.html#numq', 'typs/inst.py'),
                           'typs.inst.nums': ('inst.html#nums', 'typs/inst.py'),
                           'typs.inst.numstr': ('inst.html#numstr', 'typs/inst.py'),
                           'typs.inst.odefunc': ('inst.html#odefunc', 'typs/inst.py'),
                           'typs.inst.pttn': ('inst.html#pttn', 'typs/inst.py'),
                           'typs.inst.real': ('inst.html#real', 'typs/inst.py'),
                           'typs.inst.realq': ('inst.html#realq', 'typs/inst.py'),
                           'typs.inst.reals': ('inst.html#reals', 'typs/inst.py'),
                           'typs.inst.sdefunc': ('inst.html#sdefunc', 'typs/inst.py'),
                           'typs.inst.sdeito': ('inst.html#sdeito', 'typs/inst.py'),
                           'typs.inst.serialized': ('inst.html#serialized', 'typs/inst.py'),
                           'typs.inst.serieslike': ('inst.html#serieslike', 'typs/inst.py'),
                           'typs.inst.seriestype': ('inst.html#seriestype', 'typs/inst.py'),
                           'typs.inst.shaped': ('inst.html#shaped', 'typs/inst.py'),
                           'typs.inst.size': ('inst.html#size', 'typs/inst.py'),
                           'typs.inst.strbytes': ('inst.html#strbytes', 'typs/inst.py'),
                           'typs.inst.strq': ('inst.html#strq', 'typs/inst.py'),
                           'typs.inst.strs': ('inst.html#strs', 'typs/inst.py'),
                           'typs.inst.strtmpl': ('inst.html#strtmpl', 'typs/inst.py'),
                           'typs.inst.tensor': ('inst.html#tensor', 'typs/inst.py')},
            'typs.prot': { 'typs.prot.Alias': ('prot.html#alias', 'typs/prot.py'),
                           'typs.prot.AliasMeta': ('prot.html#aliasmeta', 'typs/prot.py'),
                           'typs.prot.AliasMeta.getbtype': ('prot.html#aliasmeta.getbtype', 'typs/prot.py'),
                           'typs.prot.Not': ('prot.html#not', 'typs/prot.py'),
                           'typs.prot.NotMeta': ('prot.html#notmeta', 'typs/prot.py'),
                           'typs.prot.NotMeta.default_kwds': ('prot.html#notmeta.default_kwds', 'typs/prot.py'),
                           'typs.prot.NotMeta.getbtype': ('prot.html#notmeta.getbtype', 'typs/prot.py'),
                           'typs.prot.NotMeta.guard': ('prot.html#notmeta.guard', 'typs/prot.py'),
                           'typs.prot.Opt': ('prot.html#opt', 'typs/prot.py'),
                           'typs.prot.OptionalMeta': ('prot.html#optionalmeta', 'typs/prot.py'),
                           'typs.prot.OptionalMeta.__new__': ('prot.html#optionalmeta.__new__', 'typs/prot.py'),
                           'typs.prot.OptionalMeta.default_kwds': ('prot.html#optionalmeta.default_kwds', 'typs/prot.py'),
                           'typs.prot.OptionalMeta.getbtype': ('prot.html#optionalmeta.getbtype', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta': ('prot.html#protocolbasemeta', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.__call__': ('prot.html#protocolbasemeta.__call__', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.__init__': ('prot.html#protocolbasemeta.__init__', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.__init_subclass__': ('prot.html#protocolbasemeta.__init_subclass__', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.__instancecheck__': ('prot.html#protocolbasemeta.__instancecheck__', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.__instanceguard__': ('prot.html#protocolbasemeta.__instanceguard__', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.__invert__': ('prot.html#protocolbasemeta.__invert__', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.__invopt__': ('prot.html#protocolbasemeta.__invopt__', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.__new__': ('prot.html#protocolbasemeta.__new__', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.__not__': ('prot.html#protocolbasemeta.__not__', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.__redirect__': ('prot.html#protocolbasemeta.__redirect__', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.check': ('prot.html#protocolbasemeta.check', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.construct': ('prot.html#protocolbasemeta.construct', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.default_kwds': ('prot.html#protocolbasemeta.default_kwds', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.getbtype': ('prot.html#protocolbasemeta.getbtype', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.guard': ('prot.html#protocolbasemeta.guard', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.makebases': ('prot.html#protocolbasemeta.makebases', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.new': ('prot.html#protocolbasemeta.new', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.setqualname': ('prot.html#protocolbasemeta.setqualname', 'typs/prot.py'),
                           'typs.prot.ProtocolBaseMeta.typeguard': ('prot.html#protocolbasemeta.typeguard', 'typs/prot.py'),
                           'typs.prot.ProtocolMeta': ('prot.html#protocolmeta', 'typs/prot.py'),
                           'typs.prot.ProtocolMeta.getbtype': ('prot.html#protocolmeta.getbtype', 'typs/prot.py'),
                           'typs.prot.Prototype': ('prot.html#prototype', 'typs/prot.py'),
                           'typs.prot.PrototypeMeta': ('prot.html#prototypemeta', 'typs/prot.py'),
                           'typs.prot.PrototypeMeta.__new__': ('prot.html#prototypemeta.__new__', 'typs/prot.py'),
                           'typs.prot.PrototypeMeta.getbtype': ('prot.html#prototypemeta.getbtype', 'typs/prot.py')},
            'typs.util': { 'typs.util.argname': ('util.html#argname', 'typs/util.py'),
                           'typs.util.argsname': ('util.html#argsname', 'typs/util.py'),
                           'typs.util.classname': ('util.html#classname', 'typs/util.py'),
                           'typs.util.filtkwds': ('util.html#filtkwds', 'typs/util.py'),
                           'typs.util.getname': ('util.html#getname', 'typs/util.py'),
                           'typs.util.getorigintypes': ('util.html#getorigintypes', 'typs/util.py'),
                           'typs.util.guardtype': ('util.html#guardtype', 'typs/util.py'),
                           'typs.util.opttypes': ('util.html#opttypes', 'typs/util.py'),
                           'typs.util.qualname': ('util.html#qualname', 'typs/util.py'),
                           'typs.util.unionify': ('util.html#unionify', 'typs/util.py')}}}
