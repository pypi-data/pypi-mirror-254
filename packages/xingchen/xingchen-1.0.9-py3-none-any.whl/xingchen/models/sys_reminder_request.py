# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from xingchen.models.gateway_issued_params import GatewayIssuedParams

class SysReminderRequest(BaseModel):
    """
    系统提醒参数  # noqa: E501
    """
    gateway_add_content: Optional[GatewayIssuedParams] = Field(None, alias="gatewayAddContent")
    character_id: StrictStr = Field(..., alias="characterId", description="角色ID")
    content: StrictStr = Field(..., description="系统提醒内容")
    biz_user_id: StrictStr = Field(..., alias="bizUserId", description="业务系统ID")
    __properties = ["gatewayAddContent", "characterId", "content", "bizUserId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SysReminderRequest:
        """Create an instance of SysReminderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gateway_add_content
        if self.gateway_add_content:
            _dict['gatewayAddContent'] = self.gateway_add_content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SysReminderRequest:
        """Create an instance of SysReminderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SysReminderRequest.parse_obj(obj)

        _obj = SysReminderRequest.parse_obj({
            "gateway_add_content": GatewayIssuedParams.from_dict(obj.get("gatewayAddContent")) if obj.get("gatewayAddContent") is not None else None,
            "character_id": obj.get("characterId"),
            "content": obj.get("content"),
            "biz_user_id": obj.get("bizUserId")
        })
        return _obj


