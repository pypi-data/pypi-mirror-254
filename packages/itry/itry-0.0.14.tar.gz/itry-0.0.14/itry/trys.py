# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_trys.ipynb.

# %% auto 0
__all__ = ['repattern', 'strtemplate', 'nan', 'number', 'pathlike', 'sig', 'param', 'ichain', 'iprod', 'ziplong', 'dict_keys',
           'dict_values', 'dict_items', 'moduletype', 'wrappertype', 'builtinfunctype', 'nonetype', 'trackbacktype',
           'functiontype', 'mapping', 'iterable', 'np', 'npdatasource', 'npbool', 'npmatrix', 'nparray', 'recarray',
           'npempty', 'npnan', 'npNaN', 'npNAN', 'earray', 'pd', 'pdna', 'pdindex', 'pdseries', 'pdcatindex',
           'pddataframe', 'pddelegate', 'sp', 'sparray', 'spmatrix', 'splinalg', 'speigs', 'sppdist', 'cscarray',
           'cscmatrix', 'csrarray', 'csrmatrix', 'cooarray', 'coomatrix', 'dokarray', 'dokmatrix', 'diaarray',
           'diamatrix', 'lilarray', 'lilmatrix', 'bsrarray', 'bsrmatrix', 'ptnan', 'ptsize', 'ptdtype', 'ptdevice',
           'ptmodule', 'ptdataset', 'ptdataloader', 'pttensorbase', 'pttensor', 'ptinttensor', 'ptbooltensor',
           'ptfloattensor', 'ptdatasets', 'pttransforms', 'ptfunctional', 'plmodule', 'pldatamodule', 'sdeito',
           'brownianinterval', 'odefunc', 'sdefunc', 'neuralode', 'neuralsde', 'augmenter', 'vidcap', 'image',
           'anndata', 'AnnData', 'mpl', 'plt', 'artist', 'colormap', 'lscolormap', 'mplpatch', 'mplaxbase', 'mplaxes',
           'sns', 'skestimator', 'skpairwise', 'PHATE', 'gtbase', 'gtdata', 'bgraph', 'dgraph', 'lgraph', 'kgraph',
           'tgraph', 'mgraph', 'klgraph', 'mlgraph', 'tlgraph', 'richtree', 'richtext', 'richcons', 'richprog',
           'richtask', 'tqdmauto', 'typer']

# %% ../nbs/05_trys.ipynb 5
from importlib import import_module

# %% ../nbs/05_trys.ipynb 7
from types import ModuleType, MethodWrapperType, BuiltinFunctionType, NoneType, FunctionType
from typing import (Type, Union, Tuple, Callable, ForwardRef, Optional, TypeVar, ParamSpec, TypeGuard, TypeAlias)

try: from abc import ABCMeta
except ImportError: ABCMeta = type

# %% ../nbs/05_trys.ipynb 8
from .atyp import G, T, P, GuardLike

# %% ../nbs/05_trys.ipynb 10
from .imod import imod, itry

# %% ../nbs/05_trys.ipynb 13
repattern: type = imod('re', 'Pattern')
strtemplate = imod('string', 'Template')

nan: float = imod('math', 'nan')
number: ABCMeta = imod('numbers', 'Number')

pathlike: type = imod('pathlib', 'Path')

sig, param = itry('inspect', 'Signature', 'Parameter')
sig: type
param: type


ichain, iprod, ziplong = itry('itertools', 'chain', 'product', 'zip_longest')
ichain: type
iprod: type
ziplong: type

dict_keys, dict_values, dict_items = itry('_collections_abc', 'dict_keys', 'dict_values', 'dict_items')
dict_keys: type
dict_values: type
dict_items: type

# %% ../nbs/05_trys.ipynb 14
moduletype, wrappertype, builtinfunctype, nonetype, trackbacktype, functiontype = \
    itry('types', 'ModuleType', 'MethodWrapperType', 
         'BuiltinFunctionType', 'NoneType', 'TracebackType', 'FunctionType')

moduletype: type
wrappertype: type
builtinfunctype: type
nonetype: type
trackbacktype: type
functiontype: type

# %% ../nbs/05_trys.ipynb 15
mapping, iterable = \
    itry('typing', 'Mapping', 'Iterable')

mapping: type
iterable: type

# %% ../nbs/05_trys.ipynb 17
np: ModuleType = imod('numpy')
npdatasource: type = imod('numpy', 'DataSource', default=pathlike)
npbool: type = imod('numpy', 'bool_', default=bool)
npmatrix, nparray, recarray, npempty = \
    itry('numpy', 'matrix', 'ndarray', 'recarray', 'empty', default=list)
npnan, npNaN, npNAN = itry('numpy', 'nan', 'NaN', 'NAN', default=nan)

npmatrix: type
nparray: type
recarray: type
npempty: type
npnan: float
npNaN: float
npNAN: float

# %% ../nbs/05_trys.ipynb 18
try:     
    empty = npempty
except: 
    class empty(list):
        @property
        def shape(self): return (len(self), )    
        def __repr__(self): return f'''array([{', '.join(self)}], dtype=float64)'''
    
    
earray = empty() if empty is list else empty(0)

# %% ../nbs/05_trys.ipynb 20
pd: ModuleType = imod('pandas')
pdna: type = imod('pandas', 'NA', default=nan)
pdindex, pdseries, pdcatindex, pddataframe = \
    itry('pandas', 'Index', 'Series', 'CategoricalIndex', 'DataFrame', default=list)

pdindex: type
pdseries: type
pdcatindex: type
pddataframe: type


pddelegate: type = imod('pandas.core.accessor', 'PandasDelegate')

# %% ../nbs/05_trys.ipynb 22
sp: ModuleType = imod('scipy')
sparray: type = imod('scipy.sparse._arrays', '_sparray')
sparray: type = imod('scipy.sparse', 'sparray', default=(sparray or list))
spmatrix: type = imod('scipy.sparse', 'spmatrix', default=list)

splinalg: ModuleType = imod('scipy.sparse', 'linalg')
speigs: FunctionType = imod('scipy.sparse.linalg', 'eigs')
sppdist: FunctionType = imod('scipy.spatial.distance', 'pdist')

# %% ../nbs/05_trys.ipynb 23
(
    cscarray, cscmatrix,
    csrarray, csrmatrix, 
    cooarray, coomatrix, 
    dokarray, dokmatrix, 
    diaarray, diamatrix, 
    lilarray, lilmatrix, 
    bsrarray, bsrmatrix,
) = \
    itry('scipy.sparse', 
        'csc_array', 'csc_matrix',
        'csr_array', 'csr_matrix', 
        'coo_array', 'coo_matrix', 
        'dok_array', 'dok_matrix', 
        'dia_array', 'dia_matrix', 
        'lil_array', 'lil_matrix', 
        'bsr_array', 'bsr_matrix', 
         default=list)

# %% ../nbs/05_trys.ipynb 25
ptnan: float = imod('torch', 'nan', default=nan)
ptsize: tuple = imod('torch', 'size', default=tuple)
ptdtype, ptdevice = itry('torch', 'dtype', 'device')
ptdtype: type
ptdevice: type

ptmodule: type = imod('torch.nn', 'Module')
ptdataset, ptdataloader = itry('torch.utils.data', 'Dataset', 'DataLoader')
ptdataset: type
ptdataloader: type

pttensorbase: type = imod('torch._C', '_TensorBase')
pttensor: type = imod('torch', 'Tensor', bases=(pttensorbase, ))
ptinttensor, ptbooltensor, ptfloattensor = \
    itry('torch', 'IntTensor', 'BoolTensor', 'FloatTensor', bases=(pttensor, ))
ptinttensor: type
ptbooltensor: type
ptfloattensor: type

# %% ../nbs/05_trys.ipynb 27
ptdatasets: ModuleType = imod('torchvision.datasets')
pttransforms: ModuleType = imod('torchvision.transforms')
ptfunctional: ModuleType = imod('torchvision.transforms.functional')

# %% ../nbs/05_trys.ipynb 29
plmodule, = itry('pytorch_lightning', 'LightningModule', default=ptmodule)
pldatamodule, = itry('pytorch_lightning', 'LightningDataModule', default=list)

plmodule: type
pldatamodule: type

# %% ../nbs/05_trys.ipynb 31
sdeito = imod('torchsde', 'SDEIto')
brownianinterval = imod('torchsde', 'BrownianInterval')

sdeito: type
brownianinterval: type

# %% ../nbs/05_trys.ipynb 33
odefunc, sdefunc = itry('torchdyn.core.defunc', 'ODEFunc', 'SDEFunc')
neuralode, neuralsde = itry('torchdyn.core', 'NeuralODE', 'NeuralSDE', default=ptmodule)
augmenter, = itry('torchdyn.nn', 'Augmenter')

odefunc: type
sdefunc: type
neuralode: type
neuralsde: type
augmenter: type

# %% ../nbs/05_trys.ipynb 35
vidcap, = itry('cv2', 'VideoCapture')
vidcap: type

# %% ../nbs/05_trys.ipynb 37
image, = itry('PIL.Image', 'Image')
image: type

# %% ../nbs/05_trys.ipynb 39
anndata, = itry('anndata', 'AnnData')
AnnData, = itry('anndata', 'AnnData')
anndata: type
AnnData: type

# %% ../nbs/05_trys.ipynb 41
mpl: ModuleType = imod('matplotlib')
plt: ModuleType = imod('matplotlib', 'pyplot', bases=(ModuleType, ))
artist, = itry('matplotlib.artist', 'Artist')

colormap, = itry('matplotlib.colors', 'Colormap')
lscolormap, = itry('matplotlib.colors', 'LinearSegmentedColormap', bases=(colormap, ))

mplpatch, = itry('matplotlib.patches', 'Patch', bases=(artist, ))
mplaxbase, = itry('matplotlib.axes._axes', '_AxesBase', bases=(artist, ))
mplaxes, = itry('matplotlib.axes._axes', 'Axes', bases=(mplaxbase, ))


artist: type
colormap: type
lscolormap: type
mplpatch: type
mplaxbase: type
mplaxes: type

# %% ../nbs/05_trys.ipynb 43
sns: ModuleType = imod('seaborn')

# %% ../nbs/05_trys.ipynb 45
skestimator, = itry('sklearn.base', 'BaseEstimator')
skestimator: type


skpairwise: ModuleType = imod('sklearn.metrics', 'pairwise')

# %% ../nbs/05_trys.ipynb 47
PHATE, = itry('phate', 'PHATE', bases=(skestimator, ))
PHATE: type

# %% ../nbs/05_trys.ipynb 49
gtbase, = itry('graphtools.base', 'Base')
gtdata, = itry('graphtools.base', 'Data', bases=(gtbase, ))

bgraph, = itry('graphtools.base', 'BaseGraph', bases=(gtbase, ))
dgraph, = itry('graphtools.base', 'Data', bases=(gtdata, bgraph))


lgraph, kgraph, tgraph, mgraph = \
    itry('graphtools.graphs', 'LandmarkGraph', 'kNNGraph', 'TraditionalGraph', 'MNNGraph', bases=(dgraph, ))


klgraph, = itry('graphtools.graphs', 'kNNLandmarkGraph', bases=(kgraph, lgraph, ))
mlgraph, = itry('graphtools.graphs', 'MNNLandmarkGraph', bases=(mgraph, lgraph, ))
tlgraph, = itry('graphtools.graphs', 'TraditionalLandmarkGraph', bases=(tgraph, lgraph, ))

gtbase: type
gtdata: type
bgraph: type
dgraph: type
lgraph: type
kgraph: type
tgraph: type
mgraph: type
klgraph: type
mlgraph: type
tlgraph: type

# %% ../nbs/05_trys.ipynb 51
_jupmix: object = imod('rich.jupyter', 'JupyterMixin')
richtree: type = imod('rich.tree', 'Tree', bases=(_jupmix, ))
richtext: type = imod('rich.text', 'Text', bases=(_jupmix, ))
richcons: type = imod('rich.console', 'Console', bases=(_jupmix, ))
richprog: type = imod('rich.progress', 'Progress', bases=(_jupmix, ))
richtask: type = imod('rich.progress', 'Task', bases=(_jupmix, ))

# %% ../nbs/05_trys.ipynb 53
_com: object = imod('tqdm.utils', 'Comparable')
_std: type = imod('tqdm.std', 'tqdm', __bases__=(_com, ))
_t_a: type = imod('tqdm.tqdm_asyncio', 'tqdm_asyncio', __bases__=(_std, ))
_t_n: type = imod('tqdm.notebook', 'tqdm_notebook', __bases__=(_std, ))
tqdmauto: type = imod('tqdm.auto', 'tqdm', __bases__=(_t_n, _t_a), default=lambda x, desc='': x)

# %% ../nbs/05_trys.ipynb 55
typer: type = imod('typer', 'Typer')
