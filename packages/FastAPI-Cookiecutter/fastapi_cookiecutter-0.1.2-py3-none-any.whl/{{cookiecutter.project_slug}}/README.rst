{{cookiecutter.project_name}}
{% for _ in cookiecutter.project_name %}={% endfor %}

Introduction
------------
{{cookiecutter.short_description}}

User Guide
----------

Configuration
+++++++++++++

{% if cookiecutter.ci_tool == 'GitLab' %}.gitlab-ci.yml{% elif cookiecutter.ci_tool == 'GitHub' %}GitHub Actions{% else %}bitbucket-pipelines.yml{% endif %}
{% if cookiecutter.ci_tool == 'GitLab' %}{{ ('.gitlab-ci.yml' | length) * '~' }}{% elif cookiecutter.ci_tool == 'GitHub' %}{{ ('GitHub Actions' | length) * '~' }}{% else %}{{ ('bitbucket-pipelines.yml' | length) * '~' }}{% endif %}

.. list-table::
   :header-rows: 1

   * - Stage
     - Description
     - TODOs
     - Enabled
   * - linting
     - Linting check with `flake8`_, `mypy`_, `bandit`_.
     -
     - Yes
   * - test
     - Run tests with `pytest`_ and generate coverage report.
     -
     - Yes
   * - build
     - Build docker images and push them to docker registry.
     - Docker login credentials.
     - Yes

CI/CD Variables
~~~~~~~~~~~~~~~
To make sure that the CI/CD pipeline runs successfully, there are some CI/CD variables need to be set in repository settings.

.. list-table::
   :header-rows: 1

   * - Environment Variable
     - Description
   * - MODE
     - Run the API service in which MODE ("DEV", "TEST", "PROD").
   {% if cookiecutter.use_database == "Yes" -%}
   * - DB_CONNECTION
     - Postgres DB URI for building docker image.
   {%- endif %}
   {% if cookiecutter.ci_tool == 'GitHub' -%}
   * - DOCKER_REGISTRY_USERNAME
     - Username of docker registry to login.
   * - DOCKER_REGISTRY_TOKEN
     - Token of docker registry to login.
   {% elif cookiecutter.ci_tool == 'GitLab' -%}
   * - DOCKER_AUTH_CONFIG
     - Docker authentication configuration.
   {%- endif %}

Makefile
~~~~~~~~

.. list-table::
   :header-rows: 1

   * - Command
     - Description
   * - clean
     - Remove autogenerated folders and artifacts.
   * - clean-pyc
     - Remove python artifacts.
   * - clean-build
     - Remove build artifacts.
   * - bandit
     - Install and run `bandit`_ security analysis.
   * - mypy
     - Install and run `mypy`_ type checking.
   * - flake8
     - Install and run `flake8`_ linting.
   * - test
     - Run tests and generate coverage report.

How to Use
++++++++++

Dependencies
~~~~~~~~~~~~

THh dependencies are listed in files from folder `requirements`:

+ `base.txt`: basic requisite dependencies for running the API service.
+ `dev.txt`: dependencies for the local development, linting checks, unit tests.
+ `doc.txt`: dependencies for creating sphinx documentation.


You can install them via::

    $ pip install -r requirements/<file name>

Run API Service
~~~~~~~~~~~~~~~

Please check the section `Running the API Service locally <./docs/source/02_usage.rst>`_ for detailed information.

Run Tests
~~~~~~~~~

Please check the section `Running Tests locally <./docs/source/02_usage.rst>`_ for detailed information.

Build Sphinx Documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~

Please check the section `Building Sphinx Documentation locally <./docs/source/02_usage.rst>`_ for detailed information.

API Endpoints
+++++++++++++

.. list-table::
   :header-rows: 1

   * - Endpoints
     - Description
   * - **/api/v1/version**
     - API Service version information
   {% if cookiecutter.use_oauth == 'Yes' -%}
   * - **/api/v1/auth/token**
     - Create a new authorization token.
   * - **/api/v1/auth/user/new**
     - Create a new user
   * - **/api/v1/auth/user/info**
     - get current user information
   {% endif -%}
   * - **/docs**
     - Open API documentation
   * - **/api/v1/openapi.json**
     - Open API information in json format

Maintainers
-----------

..
    TODO: List here the people responsible for the development and maintaining of this project.
    Format: **Name** - *Role/Responsibility* - Email

* **{{cookiecutter.author}}** - *Maintainer* - `{{cookiecutter.email}} <mailto:{{cookiecutter.email}}?subject=[{{cookiecutter.ci_tool}}]{{ cookiecutter.project_name | replace(" ", "%20") }}>`_

.. _bandit: https://bandit.readthedocs.io/en/latest/
.. _mypy: https://github.com/python/mypy
.. _flake8: https://gitlab.com/pycqa/flake8
.. _pytest: https://docs.pytest.org/en/stable/
