[project]
name = "PyAthena"
description = "Python DB API 2.0 (PEP 249) client for Amazon Athena"
authors = [
    { name = "laughingman7743", email = "laughingman7743@gmail.com" },
]
dependencies = [
    "boto3>=1.26.4",
    "botocore>=1.29.4",
    "tenacity>=4.1.0",
    "fsspec",
]
requires-python = ">=3.8.1"
readme = "README.rst"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Database :: Front-Ends",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dynamic = []
version = "3.2.1"

[project.license]
file = "LICENSE"

[project.urls]
homepage = "https://github.com/laughingman7743/PyAthena/"
repository = "https://github.com/laughingman7743/PyAthena/"

[project.entry-points."sqlalchemy.dialects"]
awsathena = "pyathena.sqlalchemy.base:AthenaDialect"
"awsathena.rest" = "pyathena.sqlalchemy.rest:AthenaRestDialect"
"awsathena.pandas" = "pyathena.sqlalchemy.pandas:AthenaPandasDialect"
"awsathena.arrow" = "pyathena.sqlalchemy.arrow:AthenaArrowDialect"

[project.optional-dependencies]
sqlalchemy = [
    "sqlalchemy>=1.0.0",
]
pandas = [
    "pandas>=1.3.0",
]
arrow = [
    "pyarrow>=7.0.0",
]
fastparquet = [
    "fastparquet>=0.4.0",
]

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
    "tox",
    "tox-gh-actions",
    "wheel",
    "twine",
    "sqlalchemy>=1.0.0",
    "pandas>=1.3.0",
    "numpy>=1.24.0",
    "pyarrow>=7.0.0",
    "fastparquet>=0.4.0",
    "Jinja2>=3.1.0",
    "mypy>=0.900",
    "pytest>=3.5",
    "pytest-cov",
    "pytest-xdist",
    "pytest-dependency",
    "ruff>=0.1.13",
]

[tool.pdm.version]
source = "file"
path = "pyathena/__init__.py"

[tool.pdm.build]
includes = [
    "pyathena",
    "pyathena/py.typed",
]

[tool.tox]
legacy_tox_ini = "[tox]\nisolated_build = true\nenvlist = py{38,39,310,311},py{38,39,310,311}-sqla\n\n[gh-actions]\npython =\n    3.8: py38\n    3.9: py39\n    3.10: py310\n    3.11: py311\n\n[testenv]\nallowlist_externals =\n    pdm\n    make\ncommands =\n    pdm install -v --dev\n    make test\npassenv =\n    AWS_*\n    TOXENV\n    GITHUB_*\n\n[testenv:py{38,39,310,311}-sqla]\ncommands =\n    pdm install -v --dev\n    make test-sqla\n"

[tool.pytest.ini_options]
norecursedirs = [
    "benchmarks",
    ".tox",
    ".venv",
]

[tool.sqla_testing]
requirement_cls = "pyathena.sqlalchemy.requirements:Requirements"
profile_file = "tests/sqlalchemy/profiles.txt"

[tool.ruff]
line-length = 100
exclude = [
    ".venv",
    ".tox",
    "tests",
]
target-version = "py38"
select = [
    "E",
    "W",
    "F",
    "I",
    "N",
]

[tool.mypy]
python_version = 3.8
follow_imports = "silent"
disallow_any_generics = true
strict_optional = true
check_untyped_defs = true
allow_redefinition = true
ignore_missing_imports = true
warn_redundant_casts = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
exclude = [
    "benchmarks.*",
    "tests.*",
    ".tox.*",
    ".venv.*",
]
