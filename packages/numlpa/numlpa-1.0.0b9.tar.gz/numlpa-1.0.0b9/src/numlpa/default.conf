[numlpa]
log = INFO # threshold for logging messages

[numlpa.core.parallelism]
size = SLURM_JOB_NUM_NODES # name of the environment variable giving the number of processes
rank = SLURM_NODEID # name of the environment variable giving the rank of the process

[numlpa.kits.analyzers.cpu]
type = screw # dislocation type
r_0 = 1e-9 # core radius (m)
r_roi = 0 # size of the region of interest (m)
r_max = 0 # maximum radius value (m)
steps = 100 # number of subdivision on the absice axis
b_len = 1e-9 # Burgers vector length (m)
poisson = 0.345 # Poisson number
shear = 26e9 # shear modulus (Pa)
processes = 0 # number of parallel processes

[numlpa.kits.diffractometers.cpu]
z_uvw = [ 1, 1, 0] # direction of the line vector (uvw)
b_uvw = [ 1, 1, 0] # direction of the Burgers vector (uvw)
g_hkl = [ 2, 0, 0] # direction of the diffraction vector (hkl)
cell = 0.4046e-9 # lattice constant (m)
step = 1.5e-9 # step size of the Fourier variable (m)
range = 3 # absolute or relative limit of the Fourier variable (1|m)
absolute = False # if true, the range parameter becomes an absolute value
poisson = 0.345 # Poisson number
harmonics = [1, 2, 3] # list of harmonics to be calculated
replicate = 1 # number of replications of the region of interest
points = 1000 # number of random points
processes = 0 # number of parallel processes
check = False # display random points and replicated dislocations

[numlpa.kits.distributions.dipoles]
length = 0 # distance between two dislocations of a dipole (m)
nsub = 5 # number of subareas on a side of the region of interest
pairs = 4 # number of dipoles in each subarea
side = 2000e-9 # size of the region of interest (m)

[numlpa.kits.distributions.images]
number = 200 # number of dislocations in the region of interest
radius = 1000e-9 # radius of the region of interest (m)

[numlpa.kits.distributions.wilkens]
nsub = 5 # number of subareas on a side of the region of interest
pairs = 4 # number of pairs of dislocations in each subarea
side = 2000e-9 # size of the region of interest (m)

[numlpa.kits.evaluators.cpu]
z_uvw = [ 1, 1, 0] # direction of the line vector (uvw)
b_uvw = [ 1, 1, 0] # direction of the Burgers vector (uvw)
g_hkl = [ 2, 0, 0] # direction of the diffraction vector (hkl)
cell = 0.4046e-9 # lattice constant (m)
poisson = 0.345 # Poisson number
shear = 26e9 # shear modulus (Pa)
core = 2.6 # absolute or relative value of the core radius (1|m)
absolute = False # if true, the core parameter becomes an absolute value
replicate = 2 # number of replications of the region of interest
points = 1000 # number of random points
processes = 0 # number of parallel processes
check = False # display random points and replicated dislocations

[numlpa.kits.optimizers.default]
maxiter = 1000 # maximum number of iterations
method = Nelder-Mead # name of the solver
points = 100 # number of random initializations tested
seed = 0 # random seed
processes = 0 # number of parallel processes

[numlpa.kits.representations.basic]
figsize = [5, 5] # width and heigth of the figure (inches)
title = # title of the figure
legend = True # display legends
length = nm # length unit
pairs = False # display a line between two consecutive dislocations
subareas = nsub # name of the parameter giving the number of subareas
ylog = False # display the ordinate axis in logarithmic scale

[numlpa.kits.representations.affine]
figsize = [5, 5] # width and heigth of the figure (inches)
title = # title of the figure
legend = True # display legends
length = nm # length unit

[numlpa.main.analyze]
format = json # format of the output files
analyzer = cpu # name of the module used for analysis

[numlpa.main.diffract]
format = json # format of the output files
diffractometer = cpu # name of the module used for diffraction

[numlpa.main.draw]
size = 10 # number of samples to draw
seed = 0 # random seed
format = json # format of the output files
distribution = dipoles # name of the module used for the random draw

[numlpa.main.evaluate]
format = json # format of the output files
evaluator = cpu # name of the module used for evaluation

[numlpa.main.export]
format = svg # output data files format
font = latinmodern-math.ttf # text font used in the figures
math = cm # math font used in the figures
size = 10 # font size used in the figures (pt)
dpi = 600 # dots per inch
representation = basic # name of module used for illustration

[numlpa.main.extract]
format = json # format of the output file

[numlpa.main.fit]
format = json # format of the output files
model = kr # name of the model to be fitted
restrict = positive # name of the restriction for the variable interval
part = real # part of the Fourier transform to be fitted
harmonic = 1 # harmonic of the Fourier transform to be fitted
optimizer = default # name of the module used for error minimization

[numlpa.main.merge]
format = json # format of the output files
